{
"version":3,
"file":"build/libv86.js",
"lineCount":1280,
"mappings":"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",
"sources":[" [synthetic:base] "," [synthetic:es6/util/arrayiterator] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/defines] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:util/polyfill] "," [synthetic:es6/math/trunc] "," [synthetic:es6/symbol] "," [synthetic:es6/util/iteratorfromarray] "," [synthetic:es6/array/entries] "," [synthetic:es6/string/trimend] "," [synthetic:es6/conformance] "," [synthetic:util/owns] "," [synthetic:es6/weakmap] "," [synthetic:es6/map] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/construct] "," [synthetic:es6/reflect/construct] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/reflect/setprototypeof] ","lib/closure-base.js","src/const.js","src/browser/screen.js","lib/9p.js","src/config.js","src/io.js","src/main.js","src/lib.js","src/fpu.js","src/ide.js","src/pci.js","src/floppy.js","src/memory.js","src/dma.js","src/pit.js","src/vga.js","src/ps2.js","src/pic.js","src/rtc.js","src/uart.js","src/hpet.js","src/acpi.js","src/apic.js","src/ioapic.js","src/state.js","src/ne2k.js","src/sb16.js","src/virtio.js","src/bus.js","src/log.js","src/cpu.js","src/translate.js","src/modrm.js","src/string.js","src/arith.js","src/misc_instr.js","src/instructions.js","src/debug.js","src/elf.js","src/browser/keyboard.js","src/browser/mouse.js","src/browser/speaker.js","src/browser/serial.js","src/browser/network.js","src/browser/lib.js","src/browser/starter.js","src/browser/worker_bus.js","src/browser/dummy_screen.js","lib/filesystem.js","lib/jor1k.js","lib/marshall.js","lib/utf8.js"],
"sourcesContent":["/*\n * Copyright 2012 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview The base namespace for code injected by the compiler\n * at compile-time.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n\n/** @const */\nvar $jscomp = $jscomp || {};\n\n/** @const Locals for goog.scope */\n$jscomp.scope = {};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utility method for creating an iterator for Arrays.\n */\n'require base';\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {function():!IIterableResult<T>}\n * @template T\n */\n$jscomp.arrayIteratorImpl = function(array) {\n  var index = 0;\n  return function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  };\n};\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {!Iterator<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  return /** @type {!Iterator<T>} */ ({next: $jscomp.arrayIteratorImpl(array)});\n};\n\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/util/arrayiterator';\n\n/**\n * Creates an iterator for the given iterable.  This iterator should never\n * be exposed to user code.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator &&\n      (/** @type {?} */ (iterable)[Symbol.iterator]);\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Whether to assume ES5 is available.  This enables removing several\n * internal polyfills, which must otherwise be detected at runtime.\n * @define {boolean}\n */\n$jscomp.ASSUME_ES5 = false;\n\n/**\n * Whether to skip the conformance check and simply use the polyfill always.\n * @define {boolean}\n */\n$jscomp.ASSUME_NO_NATIVE_MAP = false;\n\n/**\n * Whether to skip the conformance check and simply use the polyfill always.\n * @define {boolean}\n */\n$jscomp.ASSUME_NO_NATIVE_SET = false;\n\n/**\n * Whether to provide an incorrect but tiny Math.fround polyfill that just\n * returns the number given.  This is usually okay to do, particularly if\n * `Math.fround` is only used to allow the JavaScript engine to use faster\n * 32-bit float operations, but could cause problems if program logic is\n * dependent on floats being truncated consistently.\n * @define {boolean}\n */\n$jscomp.SIMPLE_FROUND_POLYFILL = false;\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  // This logic can be simplified to be made more optimizable.\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ?\n      /** @type {!Object} */ (global) :\n      maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\" now that the type\n// of \"Global\" has landed in the type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.trunc', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Truncates any fractional digits from its argument (towards zero).\n   *\n   * <p>Polyfills the static function Math.trunc().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number}\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) return x;\n    var y = Math.floor(Math.abs(x));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Symbol polyfill.\n * @suppress {uselessCode}\n */\n\n'require es6/util/arrayiterator';\n'require util/defineproperty';\n'require util/global';\n\n/** @const {string} */\n$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';\n\n/**\n * Initializes the Symbol function.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbol = function() {\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbol = function() {};\n\n  if (!$jscomp.global['Symbol']) {\n    $jscomp.global['Symbol'] = $jscomp.Symbol;\n  }\n};\n\n\n/**\n * @struct @constructor\n * @param {string} id\n * @param {string=} opt_description\n */\n$jscomp.SymbolClass = function(id, opt_description) {\n  /** @private @const {string} */\n  this.$jscomp$symbol$id_ = id;\n\n  /** @const {string|undefined} */\n  this.description;\n\n  // description is read-only.\n  $jscomp.defineProperty(\n      this, 'description',\n      {configurable: true, writable: true, value: opt_description});\n};\n\n\n/** @override */\n$jscomp.SymbolClass.prototype.toString = function() {\n  return this.$jscomp$symbol$id_;\n};\n\n\n/**\n * Produces \"symbols\" (actually just unique strings).\n * @param {string=} opt_description\n * @return {symbol}\n */\n$jscomp.Symbol = /** @type {function(): !Function} */ (function() {\n  var counter = 0;\n\n  /**\n   * @param {string=} opt_description\n   * @return {symbol}\n   * @suppress {reportUnknownTypes}\n   */\n  function Symbol(opt_description) {\n    if (/** @type {?} */ (this) instanceof Symbol) {\n      throw new TypeError('Symbol is not a constructor');\n    }\n    return /** @type {?} */ (new $jscomp.SymbolClass(\n        $jscomp.SYMBOL_PREFIX + (opt_description || '') + '_' + (counter++),\n        opt_description));\n  }\n\n  return Symbol;\n})();\n\n/**\n * Initializes Symbol.iterator (if it's not already defined) and adds a\n * Symbol.iterator property to the Array prototype.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var symbolIterator = $jscomp.global['Symbol'].iterator;\n  if (!symbolIterator) {\n    symbolIterator = $jscomp.global['Symbol'].iterator =\n        $jscomp.global['Symbol']('Symbol.iterator');\n  }\n\n  if (typeof Array.prototype[symbolIterator] != 'function') {\n    $jscomp.defineProperty(\n        Array.prototype, symbolIterator, {\n          configurable: true,\n          writable: true,\n          /**\n           * @this {Array}\n           * @return {!IteratorIterable}\n           */\n          value: function() {\n            return $jscomp.iteratorPrototype(\n                $jscomp.arrayIteratorImpl(this));\n          }\n        });\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolIterator = function() {};\n};\n\n\n/**\n * Initializes Symbol.asyncIterator (if it's not already defined)\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolAsyncIterator = function() {\n  $jscomp.initSymbol();\n  var symbolAsyncIterator = $jscomp.global['Symbol'].asyncIterator;\n  if (!symbolAsyncIterator) {\n    symbolAsyncIterator = $jscomp.global['Symbol'].asyncIterator =\n        $jscomp.global['Symbol']('Symbol.asyncIterator');\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolAsyncIterator = function() {};\n};\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.iteratorPrototype = function(next) {\n  $jscomp.initSymbolIterator();\n\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[$jscomp.global['Symbol'].iterator] = function() {\n    return this;\n  };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  $jscomp.initSymbolIterator();\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var iter = {\n    next: function() {\n      if (i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      iter.next = function() { return {done: true, value: void 0}; };\n      return iter.next();\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/util/iteratorfromarray';\n\n$jscomp.polyfill('Array.prototype.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of [key, value] arrays, one for each entry\n   * in the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<!Array<number|VALUE>>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(\n        this, function(i, v) { return [i, v]; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2019 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n\n// Most browsers implemented trimRight around ES5-time-frame, but it wasn't\n// officially part of the language specification until ES_2019, so we have\n// to provide a polyfill for it.\n// IE11 doesn't have it, of course...\n$jscomp.polyfill('String.prototype.trimRight', function(orig) {\n  /**\n   * @this {string}\n   * @return {string}\n   */\n  function polyfill() {\n    return this.replace(/[\\s\\xa0]+$/, '');\n  }\n  return orig || polyfill;\n}, 'es_2019', 'es3');\n\n$jscomp.polyfill('String.prototype.trimEnd', function(orig) {\n  return orig || String.prototype.trimRight;\n}, 'es_2019', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/global';\n\n\n/**\n * @fileoverview Check one of the most obscure features of ES6 as a proxy\n * for full conformance.  If this is enabled, this test is used instead of\n * larger, more specific conformance tests.\n */\n\n/**\n * Check ES6 conformance by checking an obscure detail of Proxy that\n * wasn't implemented correctly until after all other ES6 features in\n * most browsers.\n * @return {boolean} Whether Proxy works correctly.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.checkEs6ConformanceViaProxy = function() {\n  try {\n    var proxied = {};\n    var proxy = Object.create(new $jscomp.global['Proxy'](proxied, {\n      'get': function (target, key, receiver) {\n        return target == proxied && key == 'q' && receiver == proxy;\n      }\n    }));\n    return proxy['q'] === true;\n  } catch (err) {\n    return false;\n  }\n};\n\n/**\n * If this is true, assume that a runtime which implements Proxy also\n * implements the rest of the ECMAScript 2015 spec.\n * @define {boolean}\n */\n$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = false;\n\n/**\n * Whether the runtime implements the entire ECMAScript 2015 spec.\n * @const {boolean}\n */\n$jscomp.ES6_CONFORMANCE =\n    $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS &&\n    $jscomp.checkEs6ConformanceViaProxy();\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n/**\n * Synonym for Object.prototype.hasOwnProperty.call(obj, prop).\n * @param {!Object} obj\n * @param {string} prop\n * @return {boolean}\n */\n$jscomp.owns = function(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/util/makeiterator';\n'require util/defineproperty';\n'require util/owns';\n'require util/polyfill';\n\n$jscomp.polyfill('WeakMap',\n    /**\n     * @param {*} NativeWeakMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeWeakMap) {\n  /**\n   * Checks conformance of the existing WeakMap.\n   * @return {boolean} True if the browser's implementation conforms.\n   */\n  function isConformant() {\n    if (!NativeWeakMap || !Object.seal) return false;\n    try {\n      var x = Object.seal({});\n      var y = Object.seal({});\n      var map = new /** @type {function(new: WeakMap, !Array)} */ (\n          NativeWeakMap)([[x, 2], [y, 3]]);\n      if (map.get(x) != 2 || map.get(y) != 3) return false;\n      map.delete(x);\n      map.set(y, 4);\n      return !map.has(x) && map.get(y) == 4;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) return NativeWeakMap;\n  } else {\n    if (isConformant()) return NativeWeakMap;\n  }\n\n  var prop = '$jscomp_hidden_' + Math.random();\n\n  /** @constructor */\n  function WeakMapMembership() {}\n\n  /**\n   * Inserts the hidden property into the target.\n   * @param {!Object} target\n   */\n  function insert(target) {\n    if (!$jscomp.owns(target, prop)) {\n      var obj = new WeakMapMembership();\n      // TODO(sdh): This property will be enumerated in IE8.  If this becomes\n      // a problem, we could avoid it by copying an infrequently-used non-enum\n      // method (like toLocaleString) onto the object itself and encoding the\n      // property on the copy instead.  This codepath must be easily removable\n      // if IE8 support is not needed.\n      $jscomp.defineProperty(target, prop, {value: obj});\n    }\n  }\n\n  /**\n   * Monkey-patches the freezing methods to ensure that the hidden\n   * property is added before any freezing happens.\n   * @param {string} name\n   */\n  function patch(name) {\n    var prev = Object[name];\n    if (prev) {\n      Object[name] = function(target) {\n        if (target instanceof WeakMapMembership) {\n          return target;\n        } else {\n          insert(target);\n          return prev(target);\n        }\n      };\n    }\n  }\n  patch('freeze');\n  patch('preventExtensions');\n  patch('seal');\n  // Note: no need to patch Reflect.preventExtensions since the polyfill\n  // just calls Object.preventExtensions anyway (and if it's not polyfilled\n  // then neither is WeakMap).\n\n  var index = 0;\n\n  /**\n   * Polyfill for WeakMap:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n   *\n   * This implementation is as non-leaky as possible, due to patching\n   * the freezing and sealing operations.  It does not include any logic\n   * to handle cases where a key was somehow made non-extensible without\n   * the special hidden property being added.  It takes some care to ensure\n   * the hidden property is not enumerated over nor discoverable, though\n   * it's not completely secure (particularly in IE8).\n   *\n   * @constructor\n   * @extends {WeakMap<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @param {!Iterator<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional initial data.\n   */\n  var PolyfillWeakMap = function(opt_iterable) {\n    /** @private @const {string} */\n    this.id_ = (index += (Math.random() + 1)).toString();\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item = entry.value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.set = function(key, value) {\n    insert(key);\n    if (!$jscomp.owns(key, prop)) {\n      // NOTE: If the insert() call fails on the key, but the property\n      // has previously successfully been added higher up the prototype\n      // chain, then we'll silently misbehave.  Instead, throw immediately\n      // before doing something bad.  If this becomes a problem (e.g. due\n      // to some rogue frozen objects) then we may need to add a slow and\n      // leaky fallback array to each WeakMap instance, as well as extra\n      // logic in each accessor to use it (*only*) when necessary.\n      throw new Error('WeakMap key fail: ' + key);\n    }\n    key[prop][this.id_] = value;\n    return this;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.get = function(key) {\n    return $jscomp.owns(key, prop) ? key[prop][this.id_] : undefined;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.has = function(key) {\n    return $jscomp.owns(key, prop) && $jscomp.owns(key[prop], this.id_);\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.delete = function(key) {\n    if (!$jscomp.owns(key, prop) ||\n        !$jscomp.owns(key[prop], this.id_)) {\n      return false;\n    }\n    return delete key[prop][this.id_];\n  };\n\n  return PolyfillWeakMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/symbol';\n'require es6/util/makeiterator';\n'require es6/weakmap';\n'require util/defines';\n'require util/owns';\n'require util/polyfill';\n\n\n/**\n * Internal record type for entries.\n * @record\n * @template KEY, VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.MapEntry = function() {\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.previous;\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.next;\n  /** @type {?Object} */\n  this.head;\n  /** @type {KEY} */\n  this.key;\n  /** @type {VALUE} */\n  this.value;\n};\n\n\n$jscomp.polyfill('Map',\n    /**\n     * @param {*} NativeMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeMap) {\n\n  /**\n   * Checks conformance of the existing Map.\n   * @return {boolean} True if the browser's implementation conforms.\n   * @suppress {missingProperties} \"entries\" unknown prototype\n   */\n  function isConformant() {\n    if ($jscomp.ASSUME_NO_NATIVE_MAP ||\n        !NativeMap ||\n        typeof NativeMap != \"function\" ||\n        !NativeMap.prototype.entries ||\n        typeof Object.seal != 'function') {\n      return false;\n    }\n    // Some implementations don't support constructor arguments.\n    try {\n      NativeMap = /** @type {function(new: Map, !Iterator=)} */ (NativeMap);\n      var key = Object.seal({x: 4});\n      var map = new NativeMap($jscomp.makeIterator([[key, 's']]));\n      if (map.get(key) != 's' || map.size != 1 || map.get({x: 4}) ||\n          map.set({x: 4}, 't') != map || map.size != 2) {\n        return false;\n      }\n      var /** !Iterator<!Array> */ iter = map.entries();\n      var item = iter.next();\n      if (item.done || item.value[0] != key || item.value[1] != 's') {\n        return false;\n      }\n      item = iter.next();\n      if (item.done || item.value[0].x != 4 ||\n          item.value[1] != 't' || !iter.next().done) {\n        return false;\n      }\n      return true;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeMap && $jscomp.ES6_CONFORMANCE) return NativeMap;\n  } else {\n    if (isConformant()) return NativeMap;\n  }\n\n  // We depend on Symbol.iterator, so ensure it's loaded.\n  $jscomp.initSymbolIterator();\n\n\n  /** @const {!WeakMap<!Object, string>} */\n  var idMap = new WeakMap();\n\n\n  /**\n   * Polyfill for the global Map data type.\n   * @constructor\n   * @struct\n   * @extends {Map<KEY, VALUE>}\n   * @implements {Iterable<!Array<KEY|VALUE>>}\n   * @template KEY, VALUE\n   * @param {!Iterable<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional data to populate the map.\n   */\n  // TODO(sdh): fix param type if heterogeneous arrays ever supported.\n  var PolyfillMap = function(opt_iterable) {\n    /** @private {!Object<!Array<!$jscomp.MapEntry<KEY, VALUE>>>} */\n    this.data_ = {};\n\n    /** @private {!$jscomp.MapEntry<KEY, VALUE>} */\n    this.head_ = createHead();\n\n    // Note: this property should not be changed.  If we're willing to give up\n    // ES3 support, we could define it as a property directly.  It should be\n    // marked readonly if such an annotation ever comes into existence.\n    /** @type {number} */\n    this.size = 0;\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item =\n            /** @type {!IIterableResult<!Array<KEY|VALUE>>} */ (entry).value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.set = function(key, value) {\n    // normalize -0/+0 to +0\n    key = key === 0 ? 0 : key;\n    var r = maybeGetEntry(this, key);\n    if (!r.list) {\n      r.list = (this.data_[r.id] = []);\n    }\n    if (!r.entry) {\n      r.entry = {\n        next: this.head_,\n        previous: this.head_.previous,\n        head: this.head_,\n        key: key,\n        value: value,\n      };\n      r.list.push(r.entry);\n      this.head_.previous.next = r.entry;\n      this.head_.previous = r.entry;\n      this.size++;\n    } else {\n      r.entry.value = value;\n    }\n    return this;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.delete = function(key) {\n    var r = maybeGetEntry(this, key);\n    if (r.entry && r.list) {\n      r.list.splice(r.index, 1);\n      if (!r.list.length) delete this.data_[r.id];\n      r.entry.previous.next = r.entry.next;\n      r.entry.next.previous = r.entry.previous;\n      r.entry.head = null;\n      this.size--;\n      return true;\n    }\n    return false;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.clear = function() {\n    this.data_ = {};\n    this.head_ = this.head_.previous = createHead();\n    this.size = 0;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.has = function(key) {\n    return !!(maybeGetEntry(this, key).entry);\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.get = function(key) {\n    var entry = maybeGetEntry(this, key).entry;\n    // NOTE: this cast is a lie, but so is the extern.\n    return /** @type {VALUE} */ (entry &&\n      /** @type {VALUE} */ (entry.value));\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.entries = function() {\n    return makeIterator(this, /** @return {!Array<(KEY|VALUE)>} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return ([entry.key, entry.value]);\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.keys = function() {\n    return makeIterator(this, /** @return {KEY} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.key;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.values = function() {\n    return makeIterator(this, /** @return {VALUE} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.value;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.forEach = function(callback, opt_thisArg) {\n    var iter = this.entries();\n    var item;\n    while (!(item = iter.next()).done) {\n      var entry = item.value;\n      callback.call(\n          /** @type {?} */ (opt_thisArg),\n          /** @type {VALUE} */ (entry[1]),\n          /** @type {KEY} */ (entry[0]),\n          this);\n    }\n  };\n\n\n  /** @type {?} */ (PolyfillMap.prototype)[Symbol.iterator] =\n      PolyfillMap.prototype.entries;\n\n\n  /**\n   * Returns an entry or undefined.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {KEY} key\n   * @return {{id: string,\n   *           list: (!Array<!$jscomp.MapEntry<KEY, VALUE>>|undefined),\n   *           index: number,\n   *           entry: (!$jscomp.MapEntry<KEY, VALUE>|undefined)}}\n   * @template KEY, VALUE\n   */\n  var maybeGetEntry = function(map, key) {\n    var id = getId(key);\n    var list = map.data_[id];\n    if (list && $jscomp.owns(map.data_, id)) {\n      for (var index = 0; index < list.length; index++) {\n        var entry = list[index];\n        if ((key !== key && entry.key !== entry.key) || key === entry.key) {\n          return {id: id, list: list, index: index, entry: entry};\n        }\n      }\n    }\n    return {id: id, list: list, index: -1, entry: undefined};\n  };\n\n\n  /**\n   * Maps over the entries with the given function.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {function(!$jscomp.MapEntry<KEY, VALUE>): T} func\n   * @return {!IteratorIterable<T>}\n   * @template KEY, VALUE, T\n   * @private\n   */\n  var makeIterator = function(map, func) {\n    var entry = map.head_;\n    return $jscomp.iteratorPrototype(function() {\n      if (entry) {\n        while (entry.head != map.head_) {\n          entry = entry.previous;\n        }\n        while (entry.next != entry.head) {\n          entry = entry.next;\n          return {done: false, value: func(entry)};\n        }\n        entry = null; // make sure depletion is permanent\n      }\n      return {done: true, value: void 0};\n    });\n  };\n\n\n  /**\n   * Makes a new \"head\" element.\n   * @return {!$jscomp.MapEntry<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @suppress {checkTypes} ignore missing key/value for head only\n   */\n  var createHead = function() {\n    var head = /** type {!$jscomp.MapEntry<KEY, VALUE>} */ ({});\n    head.previous = head.next = head.head = head;\n    return head;\n  };\n\n\n  /**\n   * Counter for generating IDs.\n   * @private {number}\n   */\n  var mapIndex = 0;\n\n\n  /**\n   * @param {*} obj An extensible object.\n   * @return {string} A unique ID.\n   */\n  var getId = function(obj) {\n    var type = obj && typeof obj;\n    if (type == 'object' || type == 'function') {\n      obj = /** @type {!Object} */ (obj);\n      if (!idMap.has(obj)) {\n        var id = '' + (++mapIndex);\n        idMap.set(obj, id);\n        return id;\n      }\n      return idMap.get(obj);\n    }\n    // Add a prefix since obj could be '__proto__';\n    return 'p_' + obj;\n  };\n\n\n  return PolyfillMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a partial internal polyfill for Object.create.\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.create() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n *\n * Does not implement the second argument.\n * @param {!Object} prototype\n * @return {!Object}\n */\n$jscomp.objectCreate =\n    ($jscomp.ASSUME_ES5 || typeof Object.create == 'function') ?\n    Object.create :\n    function(prototype) {\n      /** @constructor */\n      var ctor = function() {};\n      ctor.prototype = prototype;\n      return new ctor();\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require util/objectcreate';\n\n/**\n * Polyfill for Reflect.construct() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\n *\n * Calls a constructor as with the 'new' operator.\n * TODO(sdh): how to type 'target' with (new: TARGET) if opt_newTarget missing?\n *\n * @param {function(new: ?, ...?)} target The constructor to call.\n * @param {!Array} argList The arguments as a list.\n * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n * @return {TARGET} The result of the function call.\n * @template TARGET\n */\n$jscomp.construct = /** @type {function(): !Function} */ (function() {\n\n  // Check for https://github.com/Microsoft/ChakraCore/issues/3217\n  /** @return {boolean} */\n  function reflectConstructWorks() {\n    /** @constructor */ function Base() {}\n    /** @constructor */ function Derived() {}\n    new Base();\n    Reflect.construct(Base, [], Derived);\n    return new Base() instanceof Base;\n  }\n\n  if (typeof Reflect != 'undefined' && Reflect.construct) {\n    if (reflectConstructWorks()) return Reflect.construct;\n    var brokenConstruct = Reflect.construct;\n    /**\n     * @param {function(new: ?, ...?)} target The constructor to call.\n     * @param {!Array} argList The arguments as a list.\n     * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n     * @return {TARGET} The result of the function call.\n     * @template TARGET\n     * @suppress {reportUnknownTypes}\n     */\n    var patchedConstruct = function(target, argList, opt_newTarget) {\n      var out = brokenConstruct(target, argList);\n      if (opt_newTarget) Reflect.setPrototypeOf(out, opt_newTarget.prototype);\n      return out;\n    };\n    return patchedConstruct;\n  }\n\n  /**\n   * @param {function(new: ?, ...?)} target The constructor to call.\n   * @param {!Array} argList The arguments as a list.\n   * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n   * @return {TARGET} The result of the function call.\n   * @template TARGET\n   * @suppress {reportUnknownTypes}\n   */\n  function construct(target, argList, opt_newTarget) {\n    if (opt_newTarget === undefined) opt_newTarget = target;\n    var proto = opt_newTarget.prototype || Object.prototype;\n    var obj = $jscomp.objectCreate(proto);\n    var apply = Function.prototype.apply;\n    var out = apply.call(target, obj, argList);\n    return out || obj;\n  }\n  return construct;\n})();\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require es6/util/construct';\n'require util/polyfill';\n\n$jscomp.polyfill('Reflect.construct', function(orig) {\n  // NOTE: This is just Reflect.construct if it's present and functional.\n  return $jscomp.construct;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n/**\n * @suppress {missingProperties,reportUnknownTypes}\n * @return {boolean}\n */\n$jscomp.underscoreProtoCanBeSet = function() {\n  var x = {a: true};\n  var y = {};\n  try {\n    y.__proto__ = x;\n    return y.a;\n  } catch (e) {\n    // __proto__ property is readonly (possibly IE 10?)\n  }\n  return false;\n};\n\n/**\n * If we can implement it, this will be a function that attempts to set the\n * prototype of an object, otherwise it will be `null`.\n *\n * It returns the first argument if successful. Throws a `TypeError` if the\n * object is not extensible.\n *\n * @type {null|function(!Object, ?Object): !Object}\n */\n$jscomp.setPrototypeOf = (typeof Object.setPrototypeOf == 'function') ?\n    Object.setPrototypeOf :\n    $jscomp.underscoreProtoCanBeSet() ?\n    function(target, proto) {\n      target.__proto__ = proto;\n      if (target.__proto__ !== proto) {\n        throw new TypeError(target + ' is not extensible');\n      }\n      return target;\n    } :\n    null;\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require es6/util/setprototypeof';\n\n\n$jscomp.polyfill(\n    'Reflect.setPrototypeOf',\n    /**\n     * These annotations are intended to match the signature of\n     * $jscomp.polyfill(). Being more specific makes the compiler unhappy.\n     * @suppress {reportUnknownTypes}\n     * @param {?*} orig\n     * @return {*}\n     */\n    function(orig) {\n      if (orig) {\n        return orig;\n      } else if ($jscomp.setPrototypeOf) {\n        /** @const {!function(!Object,?Object):!Object} */\n        var setPrototypeOf = $jscomp.setPrototypeOf;\n        /**\n         * @param {!Object} target\n         * @param {?Object} proto\n         * @return {boolean}\n         */\n        var polyfill = function(target, proto) {\n          try {\n            setPrototypeOf(target, proto);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        };\n        return polyfill;\n      } else {\n        // it isn't possible to implement this method\n        return null;\n      }\n    },\n    'es6', 'es5');\n","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will write out Closure's deps file, unless the\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\n * include their own deps file(s) from different locations.\n *\n * @author arv@google.com (Erik Arvidsson)\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler when --closure_pass\n *     or --mark_as_compiled is specified.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n\n/**\n * Reference to the global context.  In most cases this will be 'window'.\n */\ngoog.global = this;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\n * {@code goog.define} will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Returns true if the specified value is not undefined.\n * WARNING: Do not use this to test if an object has a property. Use the in\n * operator instead.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef = function(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n};\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*=} opt_object the object to expose at the end of the path.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is |goog.global|.\n * @private\n */\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\n  var parts = name.split('.');\n  var cur = opt_objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  // Certain browsers cannot parse code in the form for((a in b); c;);\n  // This pattern is produced by the JSCompiler when it collapses the\n  // statement above into the conditional loop below. To prevent this from\n  // happening, use a for-loop and reserve the init logic as below.\n\n  // Parentheses added to eliminate strict JS warning in Firefox.\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(opt_object)) {\n      // last part and we have an object; use it\n      cur[part] = opt_object;\n    } else if (cur[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler\n * options or the value set in the CLOSURE_DEFINES object.\n *\n * @param {string} name The distinguished name to provide.\n * @param {string|number|boolean} defaultValue\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\n    } else if (goog.global.CLOSURE_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_DEFINES, name)) {\n      value = goog.global.CLOSURE_DEFINES[name];\n    }\n  }\n  goog.exportPath_(name, value);\n};\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production js_binary can be easily stripped\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\n * because they are generally used for debugging purposes and it is difficult\n * for the JSCompiler to statically determine whether they are used.\n */\ngoog.define('goog.DEBUG', true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\n */\ngoog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\n */\ngoog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether a project is expected to be running in strict mode.\n *\n * This define can be used to trigger alternate implementations compatible with\n * running in EcmaScript Strict mode or warn about unavailable functionality.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n *\n */\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n */\ngoog.provide = function(name) {\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * @param {Object=} opt_obj The object to embed in the namespace.\n * @private\n */\ngoog.constructNamespace_ = function(name, opt_obj) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name, opt_obj);\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \"strict\" JavaScript.\n * - the file will be marked as \"use strict\"\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\", is expected but not required.\n */\ngoog.module = function(name) {\n  if (!goog.isString(name) ||\n      !name ||\n      name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw Error('Invalid module identifier');\n  }\n  if (!goog.isInModuleLoader_()) {\n    throw Error('Module ' + name + ' has been loaded incorrectly.');\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module may only be called once per module.');\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      // goog.require only return a value with-in goog.module files.\n      return name in goog.loadedModules_ ?\n          goog.loadedModules_[name] :\n          goog.getObjectByName(name);\n    } else {\n      return null;\n    }\n  }\n};\n\n\n/**\n * @private {?{\n *   moduleName: (string|undefined),\n *   declareTestMethods: boolean\n * }}\n */\ngoog.moduleLoaderState_ = null;\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.moduleLoaderState_ != null;\n};\n\n\n/**\n * Indicate that a module's exports that are known test methods should\n * be copied to the global object.  This makes the test methods visible to\n * test runners that inspect the global object.\n *\n * TODO(johnlenz): Make the test framework aware of goog.module so\n * that this isn't necessary. Alternately combine this with goog.setTestOnly\n * to minimize boiler plate.\n * @suppress {missingProvide}\n * @deprecated This approach does not translate to ES6 module syntax, instead\n *    use goog.testing.testSuite to declare the test methods.\n */\ngoog.module.declareTestMethods = function() {\n  if (!goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareTestMethods must be called from ' +\n        'within a goog.module');\n  }\n  goog.moduleLoaderState_.declareTestMethods = true;\n};\n\n\n/**\n * Provide the module's exports as a globally accessible object under the\n * module's declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareLegacyNamespace must be called from ' +\n        'within a goog.module');\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module must be called prior to ' +\n        'goog.module.declareLegacyNamespace.');\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || '';\n    throw Error('Importing test-only code into non-debug environment' +\n                (opt_message ? ': ' + opt_message : '.'));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n */\ngoog.forwardDeclare = function(name) {};\n\n\nif (!COMPILED) {\n\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] &&\n            goog.isDefAndNotNull(goog.getObjectByName(name)));\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {!Object<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {'goog.module': true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisifies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var part; part = parts.shift(); ) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {!Object} obj The namespace to globalize.\n * @param {Object=} opt_global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, opt_global) {\n  var global = opt_global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array<string>} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array<string>} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean=} opt_isModule Whether this dependency must be loaded as\n *     a module as declared by goog.module.\n */\ngoog.addDependency = function(relPath, provides, requires, opt_isModule) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, '/');\n    var deps = goog.dependencies_;\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n      deps.pathIsModule[path] = !!opt_isModule;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n\n\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\n// http://go/genjsdeps, or, externally, DepsWriter.\n// https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work is being done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system. Note that all calls to goog.require will be\n * stripped by the JSCompiler when the --closure_pass option is used.\n * @see goog.provide\n * @param {string} name Namespace to include (as was given in goog.provide()) in\n *     the form \"goog.package.part\".\n * @return {?} If called within a goog.module file, the associated namespace or\n *     module otherwise null.\n */\ngoog.require = function(name) {\n\n  // If the object already exists we do not need do do anything.\n  if (!COMPILED) {\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\n      goog.maybeProcessDeferredDep_(name);\n    }\n\n    if (goog.isProvided_(name)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(name);\n      } else {\n        return null;\n      }\n    }\n\n    if (goog.ENABLE_DEBUG_LOADER) {\n      var path = goog.getPathFromDeps_(name);\n      if (path) {\n        goog.included_[path] = true;\n        goog.writeScripts_();\n        return null;\n      }\n    }\n\n    var errorMessage = 'goog.require could not find: ' + name;\n    goog.logToConsole_(errorMessage);\n\n    throw Error(errorMessage);\n  }\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to write out Closure's deps file. By default, the deps are written.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The function is passed the script source, which is a relative URI. It should\n * return true if the script was imported, false otherwise.\n * @type {(function(string): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\ngoog.nullFunction = function() {};\n\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * Note: This does not take the name of the function to override as an argument\n * because that would make it more difficult to obfuscate our JavaScript code.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\ngoog.abstractMethod = function() {\n  throw Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a {@code getInstance} static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n */\ngoog.addSingletonGetter = function(ctor) {\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    return ctor.instance_ = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the {@code goog.testing.singleton} module. The compiler\n * removes this variable if unused.\n * @type {!Array<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of {@code eval} is banned\n * so we provide an alternative.\n */\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * the module identifier to module exports map.\n * @private @const {!Object<string, ?>}\n */\ngoog.loadedModules_ = {};\n\n\n/**\n * True if goog.dependencies_ is available.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\nif (goog.DEPENDENCIES_ENABLED) {\n  /**\n   * Object used to keep track of urls that have already been added. This record\n   * allows the prevention of circular dependencies.\n   * @private {!Object<string, boolean>}\n   */\n  goog.included_ = {};\n\n\n  /**\n   * This object is used to keep track of dependencies and other data that is\n   * used for loading scripts.\n   * @private\n   * @type {{\n   *   pathIsModule: !Object<string, boolean>,\n   *   nameToPath: !Object<string, string>,\n   *   requires: !Object<string, !Object<string, boolean>>,\n   *   visited: !Object<string, boolean>,\n   *   written: !Object<string, boolean>,\n   *   deferred: !Object<string, string>\n   * }}\n   */\n  goog.dependencies_ = {\n    pathIsModule: {}, // 1 to 1\n\n    nameToPath: {}, // 1 to 1\n\n    requires: {}, // 1 to many\n\n    // Used when resolving dependencies to prevent us from visiting file twice.\n    visited: {},\n\n    written: {}, // Used to keep track of script files we have written.\n\n    deferred: {} // Used to track deferred module evaluations in old IEs\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    var doc = goog.global.document;\n    return typeof doc != 'undefined' &&\n           'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    var doc = goog.global.document;\n    var scripts = doc.getElementsByTagName('SCRIPT');\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n\n  /**\n   * Imports a script if, and only if, that script hasn't already been imported.\n   * (Must be called at execution time)\n   * @param {string} src Script source.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @private\n   */\n  goog.importScript_ = function(src, opt_sourceText) {\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n    if (importScript(src, opt_sourceText)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @const @private {boolean} */\n  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document &&\n      goog.global.document.all;\n\n\n  /**\n   * Given a URL initiate retrieval and execution of the module.\n   * @param {string} src Script source URL.\n   * @private\n   */\n  goog.importModule_ = function(src) {\n    // In an attempt to keep browsers from timing out loading scripts using\n    // synchronous XHRs, put each load in its own script block.\n    var bootstrap = 'goog.retrieveAndExecModule_(\"' + src + '\");';\n\n    if (goog.importScript_('', bootstrap)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @private {!Array<string>} */\n  goog.queuedModules_ = [];\n\n\n  /**\n   * Return an appropriate module text. Suitable to insert into\n   * a script tag (that is unescaped).\n   * @param {string} srcUrl\n   * @param {string} scriptText\n   * @return {string}\n   * @private\n   */\n  goog.wrapModule_ = function(srcUrl, scriptText) {\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\n      return '' +\n          'goog.loadModule(function(exports) {' +\n          '\"use strict\";' +\n          scriptText +\n          '\\n' + // terminate any trailing single line comment.\n          ';return exports' +\n          '});' +\n          '\\n//# sourceURL=' + srcUrl + '\\n';\n    } else {\n      return '' +\n          'goog.loadModule(' +\n          goog.global.JSON.stringify(\n              scriptText + '\\n//# sourceURL=' + srcUrl + '\\n') +\n          ');';\n    }\n  };\n\n  // On IE9 and earlier, it is necessary to handle\n  // deferred module loads. In later browsers, the\n  // code to be evaluated is simply inserted as a script\n  // block in the correct order. To eval deferred\n  // code at the right time, we piggy back on goog.require to call\n  // goog.maybeProcessDeferredDep_.\n  //\n  // The goog.requires are used both to bootstrap\n  // the loading process (when no deps are available) and\n  // declare that they should be available.\n  //\n  // Here we eval the sources, if all the deps are available\n  // either already eval'd or goog.require'd.  This will\n  // be the case when all the dependencies have already\n  // been loaded, and the dependent module is loaded.\n  //\n  // But this alone isn't sufficient because it is also\n  // necessary to handle the case where there is no root\n  // that is not deferred.  For that there we register for an event\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\n  // evaluations.\n\n  /**\n   * Handle any remaining deferred goog.module evals.\n   * @private\n   */\n  goog.loadQueuedModules_ = function() {\n    var count = goog.queuedModules_.length;\n    if (count > 0) {\n      var queue = goog.queuedModules_;\n      goog.queuedModules_ = [];\n      for (var i = 0; i < count; i++) {\n        var path = queue[i];\n        goog.maybeProcessDeferredPath_(path);\n      }\n    }\n  };\n\n\n  /**\n   * Eval the named module if its dependencies are\n   * available.\n   * @param {string} name The module to load.\n   * @private\n   */\n  goog.maybeProcessDeferredDep_ = function(name) {\n    if (goog.isDeferredModule_(name) &&\n        goog.allDepsAreAvailable_(name)) {\n      var path = goog.getPathFromDeps_(name);\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\n    }\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose evaluation has been deferred.\n   * @private\n   */\n  goog.isDeferredModule_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && goog.dependencies_.pathIsModule[path]) {\n      var abspath = goog.basePath + path;\n      return (abspath) in goog.dependencies_.deferred;\n    }\n    return false;\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose declared dependencies have all been loaded\n   *     (eval'd or a deferred module load)\n   * @private\n   */\n  goog.allDepsAreAvailable_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && (path in goog.dependencies_.requires)) {\n      for (var requireName in goog.dependencies_.requires[path]) {\n        if (!goog.isProvided_(requireName) &&\n            !goog.isDeferredModule_(requireName)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n\n  /**\n   * @param {string} abspath\n   * @private\n   */\n  goog.maybeProcessDeferredPath_ = function(abspath) {\n    if (abspath in goog.dependencies_.deferred) {\n      var src = goog.dependencies_.deferred[abspath];\n      delete goog.dependencies_.deferred[abspath];\n      goog.globalEval(src);\n    }\n  };\n\n\n  /**\n   * @param {function(?):?|string} moduleDef The module definition.\n   */\n  goog.loadModule = function(moduleDef) {\n    // NOTE: we allow function definitions to be either in the from\n    // of a string to eval (which keeps the original source intact) or\n    // in a eval forbidden environment (CSP) we allow a function definition\n    // which in its body must call {@code goog.module}, and return the exports\n    // of the module.\n    var previousState = goog.moduleLoaderState_;\n    try {\n      goog.moduleLoaderState_ = {\n        moduleName: undefined, declareTestMethods: false};\n      var exports;\n      if (goog.isFunction(moduleDef)) {\n        exports = moduleDef.call(goog.global, {});\n      } else if (goog.isString(moduleDef)) {\n        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);\n      } else {\n        throw Error('Invalid module definition');\n      }\n\n      var moduleName = goog.moduleLoaderState_.moduleName;\n      if (!goog.isString(moduleName) || !moduleName) {\n        throw Error('Invalid module name \\\"' + moduleName + '\\\"');\n      }\n\n      // Don't seal legacy namespaces as they may be uses as a parent of\n      // another namespace\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\n        goog.constructNamespace_(moduleName, exports);\n      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {\n        Object.seal(exports);\n      }\n\n      goog.loadedModules_[moduleName] = exports;\n      if (goog.moduleLoaderState_.declareTestMethods) {\n        for (var entry in exports) {\n          if (entry.indexOf('test', 0) === 0 ||\n              entry == 'tearDown' ||\n              entry == 'setUp' ||\n              entry == 'setUpPage' ||\n              entry == 'tearDownPage') {\n            goog.global[entry] = exports[entry];\n          }\n        }\n      }\n    } finally {\n      goog.moduleLoaderState_ = previousState;\n    }\n  };\n\n\n  /**\n   * @param {string} source\n   * @return {!Object}\n   * @private\n   */\n  goog.loadModuleFromSource_ = function(source) {\n    // NOTE: we avoid declaring parameters or local variables here to avoid\n    // masking globals or leaking values into the module definition.\n    'use strict';\n    var exports = {};\n    eval(arguments[0]);\n    return exports;\n  };\n\n\n  /**\n   * Writes a new script pointing to {@code src} directly into the DOM.\n   *\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\n   * the fallback mechanism.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.writeScriptSrcNode_ = function(src) {\n    goog.global.document.write(\n        '<script type=\"text/javascript\" src=\"' + src + '\"></' + 'script>');\n  };\n\n\n  /**\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\n   * method exists as a fallback for document.write (which is not allowed in a\n   * strict CSP context, e.g., Chrome apps).\n   *\n   * NOTE: This method is not analogous to using document.write to insert a\n   * <script> tag; specifically, the user agent will execute a script added by\n   * document.write immediately after the current script block finishes\n   * executing, whereas the DOM-appended script node will not be executed until\n   * the entire document is parsed and executed. That is to say, this script is\n   * added to the end of the script execution queue.\n   *\n   * The page must not attempt to call goog.required entities until after the\n   * document has loaded, e.g., in or after the window.onload callback.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.appendScriptSrcNode_ = function(src) {\n    var doc = goog.global.document;\n    var scriptEl = doc.createElement('script');\n    scriptEl.type = 'text/javascript';\n    scriptEl.src = src;\n    scriptEl.defer = false;\n    scriptEl.async = false;\n    doc.head.appendChild(scriptEl);\n  };\n\n\n  /**\n   * The default implementation of the import function. Writes a script tag to\n   * import the script.\n   *\n   * @param {string} src The script url.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page. This does not apply to the CSP-compliant method\n      // of writing script tags.\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n          doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      var isOldIE = goog.IS_OLD_IE_;\n\n      if (opt_sourceText === undefined) {\n        if (!isOldIE) {\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n            goog.appendScriptSrcNode_(src);\n          } else {\n            goog.writeScriptSrcNode_(src);\n          }\n        } else {\n          var state = \" onreadystatechange='goog.onScriptLoad_(this, \" +\n              ++goog.lastNonModuleScriptIndex_ + \")' \";\n          doc.write(\n              '<script type=\"text/javascript\" src=\"' +\n                  src + '\"' + state + '></' + 'script>');\n        }\n      } else {\n        doc.write(\n            '<script type=\"text/javascript\">' +\n            opt_sourceText +\n            '</' + 'script>');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /** @private {number} */\n  goog.lastNonModuleScriptIndex_ = 0;\n\n\n  /**\n   * A readystatechange handler for legacy IE\n   * @param {!HTMLScriptElement} script\n   * @param {number} scriptIndex\n   * @return {boolean}\n   * @private\n   */\n  goog.onScriptLoad_ = function(script, scriptIndex) {\n    // for now load the modules when we reach the last script,\n    // later allow more inter-mingling.\n    if (script.readyState == 'complete' &&\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\n      goog.loadQueuedModules_();\n    }\n    return true;\n  };\n\n  /**\n   * Resolves dependencies based on the dependencies added using addDependency\n   * and calls importScript_ in the correct order.\n   * @private\n   */\n  goog.writeScripts_ = function() {\n    /** @type {!Array<string>} The scripts we need to write this time. */\n    var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n\n    /** @param {string} path */\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n\n      // We have already visited this one. We can get here if we have cyclic\n      // dependencies.\n      if (path in deps.visited) {\n        if (!(path in seenScript)) {\n          seenScript[path] = true;\n          scripts.push(path);\n        }\n        return;\n      }\n\n      deps.visited[path] = true;\n\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          // If the required name is defined, we assume that it was already\n          // bootstrapped by other means.\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error('Undefined nameToPath for ' + requireName);\n            }\n          }\n        }\n      }\n\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n\n    for (var path in goog.included_) {\n      if (!deps.written[path]) {\n        visitNode(path);\n      }\n    }\n\n    // record that we are going to load all these scripts.\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      goog.dependencies_.written[path] = true;\n    }\n\n    // If a module is loaded synchronously then we need to\n    // clear the current inModuleLoader value, and restore it when we are\n    // done loading the current \"requires\".\n    var moduleState = goog.moduleLoaderState_;\n    goog.moduleLoaderState_ = null;\n\n    var loadingModule = false;\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      if (path) {\n        if (!deps.pathIsModule[path]) {\n          goog.importScript_(goog.basePath + path);\n        } else {\n          loadingModule = true;\n          goog.importModule_(goog.basePath + path);\n        }\n      } else {\n        goog.moduleLoaderState_ = moduleState;\n        throw Error('Undefined script input');\n      }\n    }\n\n    // restore the current \"module loading state\"\n    goog.moduleLoaderState_ = moduleState;\n  };\n\n\n  /**\n   * Looks at the dependency rules and tries to determine the script file that\n   * fulfills a particular rule.\n   * @param {string} rule In the form goog.namespace.Class or project.script.\n   * @return {?string} Url corresponding to the rule, or null.\n   * @private\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n\n  goog.findBasePath_();\n\n  // Allow projects to manage the deps files themselves.\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + 'deps.js');\n  }\n}\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (i && components[i] == '..' &&\n        components[i - 1] && components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n};\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {string} File contents.\n * @private\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    var xhr = new goog.global['XMLHttpRequest']();\n    xhr.open('get', src, false);\n    xhr.send();\n    return xhr.responseText;\n  }\n};\n\n\n/**\n * Retrieve and execute a module.\n * @param {string} src Script source URL.\n * @private\n */\ngoog.retrieveAndExecModule_ = function(src) {\n  if (!COMPILED) {\n    // The full but non-canonicalized URL for later use.\n    var originalPath = src;\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\n    src = goog.normalizePath_(src);\n\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n\n    var scriptText = goog.loadFileSync_(src);\n\n    if (scriptText != null) {\n      var execModuleScript = goog.wrapModule_(src, scriptText);\n      var isOldIE = goog.IS_OLD_IE_;\n      if (isOldIE) {\n        goog.dependencies_.deferred[originalPath] = execModuleScript;\n        goog.queuedModules_.push(originalPath);\n      } else {\n        importScript(src, execModuleScript);\n      }\n    } else {\n      throw new Error('load of ' + src + 'failed');\n    }\n  }\n};\n\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {*} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n  if (s == 'object') {\n    if (value) {\n      // Check these first, so we can avoid calling Object.prototype.toString if\n      // possible.\n      //\n      // IE improperly marshals tyepof across execution contexts, but a\n      // cross-context object will still return false for \"instanceof Object\".\n      if (value instanceof Array) {\n        return 'array';\n      } else if (value instanceof Object) {\n        return s;\n      }\n\n      // HACK: In order to use an Object prototype method on the arbitrary\n      //   value, the compiler requires the value be cast to type Object,\n      //   even though the ECMA spec explicitly allows it.\n      var className = Object.prototype.toString.call(\n          /** @type {Object} */ (value));\n      // In Firefox 3.6, attempting to access iframe window objects' length\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\n      // here.\n      if (className == '[object Window]') {\n        return 'object';\n      }\n\n      // We cannot always use constructor == Array or instanceof Array because\n      // different frames have different Array objects. In IE6, if the iframe\n      // where the array was created is destroyed, the array loses its\n      // prototype. Then dereferencing val.splice here throws an exception, so\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\n      // so that will work. In this case, this function will return false and\n      // most array functions will still work because the array is still\n      // array-like (supports length and []) even though it has lost its\n      // prototype.\n      // Mark Miller noticed that Object.prototype.toString\n      // allows access to the unforgeable [[Class]] property.\n      //  15.2.4.2 Object.prototype.toString ( )\n      //  When the toString method is called, the following steps are taken:\n      //      1. Get the [[Class]] property of this object.\n      //      2. Compute a string value by concatenating the three strings\n      //         \"[object \", Result(1), and \"]\".\n      //      3. Return Result(2).\n      // and this behavior survives the destruction of the execution context.\n      if ((className == '[object Array]' ||\n           // In IE all non value types are wrapped as objects across window\n           // boundaries (not iframe though) so we have to do object detection\n           // for this edge case.\n           typeof value.length == 'number' &&\n           typeof value.splice != 'undefined' &&\n           typeof value.propertyIsEnumerable != 'undefined' &&\n           !value.propertyIsEnumerable('splice')\n\n          )) {\n        return 'array';\n      }\n      // HACK: There is still an array case that fails.\n      //     function ArrayImpostor() {}\n      //     ArrayImpostor.prototype = [];\n      //     var impostor = new ArrayImpostor;\n      // this can be fixed by getting rid of the fast path\n      // (value instanceof Array) and solely relying on\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\n      // but that would require many more function calls and is not warranted\n      // unless closure code is receiving objects from untrusted sources.\n\n      // IE in cross-window calls does not correctly marshal the function type\n      // (it appears just as an object) so we cannot use just typeof val ==\n      // 'function'. However, if the object has a call property, it is a\n      // function.\n      if ((className == '[object Function]' ||\n          typeof value.call != 'undefined' &&\n          typeof value.propertyIsEnumerable != 'undefined' &&\n          !value.propertyIsEnumerable('call'))) {\n        return 'function';\n      }\n\n    } else {\n      return 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the specified value is null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\ngoog.isNull = function(val) {\n  return val === null;\n};\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull = function(val) {\n  // Note that undefined == null.\n  return val != null;\n};\n\n\n/**\n * Returns true if the specified value is an array.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArray = function(val) {\n  return goog.typeOf(val) == 'array';\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. As a special case, a function value is not array like, because its\n * length property is fixed to correspond to the number of expected arguments.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is a string.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString = function(val) {\n  return typeof val == 'string';\n};\n\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\ngoog.isBoolean = function(val) {\n  return typeof val == 'boolean';\n};\n\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\ngoog.isNumber = function(val) {\n  return typeof val == 'number';\n};\n\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.isFunction = function(val) {\n  return goog.typeOf(val) == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\n  // and SubClass.prototype will be the same.\n  return obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using {@code goog.getUid} in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if ('removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n  /** @preserveTry */\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Adds a hash code field to an object. The hash code is unique for the\n * given object.\n * @param {Object} obj The object to get the hash code for.\n * @return {number} The hash code for the object.\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode = goog.getUid;\n\n\n/**\n * Removes the hash code field from an object.\n * @param {Object} obj The object to remove the field from.\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode = goog.removeUid;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n * @suppress {deprecated} The compiler thinks that Function.prototype.bind is\n *     deprecated because some people have declared a pure-JS version.\n *     Only the pure-JS version is truly deprecated.\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this 'pre-specified'.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don't want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n * @param {Object} target Target.\n * @param {Object} source Source.\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n */\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\n  // Unary plus operator converts its operand to a number which in the case of\n  // a date is done by calling getTime().\n  return +new Date();\n});\n\n\n/**\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\n * global scope (for example, in Safari), appends a script tag instead.\n * Throws an exception if neither execScript or eval is defined.\n * @param {string} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, 'JavaScript');\n  } else if (goog.global.eval) {\n    // Test to see if eval works\n    if (goog.evalWorksForGlobals_ == null) {\n      goog.global.eval('var _et_ = 1;');\n      if (typeof goog.global['_et_'] != 'undefined') {\n        delete goog.global['_et_'];\n        goog.evalWorksForGlobals_ = true;\n      } else {\n        goog.evalWorksForGlobals_ = false;\n      }\n    }\n\n    if (goog.evalWorksForGlobals_) {\n      goog.global.eval(script);\n    } else {\n      var doc = goog.global.document;\n      var scriptElt = doc.createElement('SCRIPT');\n      scriptElt.type = 'text/javascript';\n      scriptElt.defer = false;\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\n      scriptElt.appendChild(doc.createTextNode(script));\n      doc.body.appendChild(scriptElt);\n      doc.body.removeChild(scriptElt);\n    }\n  } else {\n    throw Error('goog.globalEval not available');\n  }\n};\n\n\n/**\n * Indicates whether or not we can call 'eval' directly to eval code in the\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\n * empirically tests whether eval works for globals). @see goog.globalEval\n * @type {?boolean}\n * @private\n */\ngoog.evalWorksForGlobals_ = null;\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object<string, string>|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x= 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?\n        getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  if (opt_modifier) {\n    return className + '-' + rename(opt_modifier);\n  } else {\n    return rename(className);\n  }\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --closure_pass flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object<string, string>|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values) {\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {Function} childCtor Child class.\n * @param {Function} parentCtor Parent class.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {};\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Call up to the superclass.\n *\n * If this is called from a constructor, then this calls the superclass\n * constructor with arguments 1-N.\n *\n * If this is called from a prototype method, then you must pass the name of the\n * method as the second argument to this function. If you do not, you will get a\n * runtime error. This calls the superclass' method with arguments 2-N.\n *\n * This function only works if you use goog.inherits to express inheritance\n * relationships between your classes.\n *\n * This function is a compiler primitive. At compile-time, the compiler will do\n * macro expansion to remove a lot of the extra overhead that this function\n * introduces. The compiler will also enforce a lot of the assumptions that this\n * function makes, and treat it as a compiler error if you break them.\n *\n * @param {!Object} me Should always be \"this\".\n * @param {*=} opt_methodName The method name if calling a super method.\n * @param {...*} var_args The rest of the arguments.\n * @return {*} The return value of the superclass method.\n * @suppress {es5Strict} This method can not be used in strict mode, but\n *     all Closure Library consumers must depend on this file.\n */\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\n\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\n    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +\n                'with strict mode code. See ' +\n                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\n  }\n\n  if (caller.superClass_) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var ctorArgs = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n      ctorArgs[i - 1] = arguments[i];\n    }\n    // This is a constructor. Call the superclass constructor.\n    return caller.superClass_.constructor.apply(me, ctorArgs);\n  }\n\n  // Copying using loop to avoid deop due to passing arguments object to\n  // function. This is faster in many JS engines as of late 2014.\n  var args = new Array(arguments.length - 2);\n  for (var i = 2; i < arguments.length; i++) {\n    args[i - 2] = arguments[i];\n  }\n  var foundCaller = false;\n  for (var ctor = me.constructor;\n       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] === caller) {\n      foundCaller = true;\n    } else if (foundCaller) {\n      return ctor.prototype[opt_methodName].apply(me, args);\n    }\n  }\n\n  // If we did not find the caller in the prototype chain, then one of two\n  // things happened:\n  // 1) The caller is an instance method.\n  // 2) This method was not called by the right caller.\n  if (me[opt_methodName] === caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw Error(\n        'goog.base called from a method of one name ' +\n        'to a method of a different name');\n  }\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *     (e.g. \"var Timer = goog.Timer\").\n */\ngoog.scope = function(fn) {\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global['COMPILED'] = COMPILED;\n}\n\n\n\n//==============================================================================\n// goog.defineClass implementation\n//==============================================================================\n\n\n/**\n * Creates a restricted form of a Closure \"class\":\n *   - from the compiler's perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \"constructor\": the constructor function\n *     \"statics\": an object literal containing methods to add to the constructor\n *        as \"static\" methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n */\ngoog.defineClass = function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor = def.constructor;\n  var statics = def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw Error('cannot instantiate an interface (no constructor defined).');\n    };\n  }\n\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {\n *     !Object|\n *     {constructor:!Function}|\n *     {constructor:!Function, statics:(Object|function(Function):void)}}\n * @suppress {missingProvide}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by\n * goog.defineClass should be sealed when possible.\n */\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (goog.defineClass.SEAL_CLASS_INSTANCES &&\n      Object.seal instanceof Function) {\n    // Don't seal subclasses of unsealable-tagged legacy classes.\n    if (superClass && superClass.prototype &&\n        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {\n      return ctr;\n    }\n    /**\n     * @this {Object}\n     * @return {?}\n     */\n    var wrappedCtr = function() {\n      // Don't seal an instance of a subclass when it calls the constructor of\n      // its super class as there is most likely still setup to do.\n      var instance = ctr.apply(this, arguments) || this;\n      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n      if (this.constructor === wrappedCtr) {\n        Object.seal(instance);\n      }\n      return instance;\n    };\n    return wrappedCtr;\n  }\n  return ctr;\n};\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n\n/**\n * Sealing classes breaks the older idiom of assigning properties on the\n * prototype rather than in the constructor.  As such, goog.defineClass\n * must not seal subclasses of these old-style classes until they are fixed.\n * Until then, this marks a class as \"broken\", instructing defineClass\n * not to seal subclasses.\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\n */\ngoog.tagUnsealableClass = function(ctr) {\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\n  }\n};\n\n\n/**\n * Name for unsealable tag property.\n * @const @private {string}\n */\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\n","\"use strict\";\n\nvar\n/** @const */ LOG_ALL = -1,\n/** @const */ LOG_NONE = 0,\n\n/** @const */ LOG_OTHER =  0x000001,\n/** @const */ LOG_CPU =    0x000002,\n/** @const */ LOG_FPU =    0x000004,\n/** @const */ LOG_MEM =    0x000008,\n/** @const */ LOG_DMA =    0x000010,\n/** @const */ LOG_IO =     0x000020,\n/** @const */ LOG_PS2 =    0x000040,\n/** @const */ LOG_PIC =    0x000080,\n/** @const */ LOG_VGA =    0x000100,\n/** @const */ LOG_PIT =    0x000200,\n/** @const */ LOG_MOUSE =  0x000400,\n/** @const */ LOG_PCI =    0x000800,\n/** @const */ LOG_BIOS =   0x001000,\n/** @const */ LOG_FLOPPY = 0x002000,\n/** @const */ LOG_SERIAL = 0x004000,\n/** @const */ LOG_DISK =   0x008000,\n/** @const */ LOG_RTC =    0x010000,\n/** @const */ LOG_HPET =   0x020000,\n/** @const */ LOG_ACPI =   0x040000,\n/** @const */ LOG_APIC =   0x080000,\n/** @const */ LOG_NET =    0x100000,\n/** @const */ LOG_VIRTIO = 0x200000,\n/** @const */ LOG_9P =     0x400000,\n/** @const */ LOG_SB16 =   0x800000;\n\n\n/**\n * @const\n * @type {Array<Array<string|number>>}\n */\nvar LOG_NAMES = [\n    [1, \"\"],\n    [LOG_CPU, \"CPU\"],\n    [LOG_DISK, \"DISK\"],\n    [LOG_FPU, \"FPU\"],\n    [LOG_MEM, \"MEM\"],\n    [LOG_DMA, \"DMA\"],\n    [LOG_IO, \"IO\"],\n    [LOG_PS2, \"PS2\"],\n    [LOG_PIC, \"PIC\"],\n    [LOG_VGA, \"VGA\"],\n    [LOG_PIT, \"PIT\"],\n    [LOG_MOUSE, \"MOUS\"],\n    [LOG_PCI, \"PCI\"],\n    [LOG_BIOS, \"BIOS\"],\n    [LOG_FLOPPY, \"FLOP\"],\n    [LOG_SERIAL, \"SERI\"],\n    [LOG_RTC, \"RTC\"],\n    [LOG_HPET, \"HPET\"],\n    [LOG_ACPI, \"ACPI\"],\n    [LOG_APIC, \"APIC\"],\n    [LOG_NET, \"NET\"],\n    [LOG_VIRTIO, \"VIO\"],\n    [LOG_9P, \"9P\"],\n    [LOG_SB16, \"SB16\"]\n];\n\nvar\n/** @const */ TLB_SYSTEM_READ = 1,\n/** @const */ TLB_SYSTEM_WRITE = 2,\n/** @const */ TLB_USER_READ = 4,\n/** @const */ TLB_USER_WRITE = 8;\n\n\nvar\n\n// flags register bitflags\n/** @const */ flag_carry = 1,\n/** @const */ flag_parity = 4,\n/** @const */ flag_adjust = 16,\n/** @const */ flag_zero = 64,\n/** @const */ flag_sign = 128,\n/** @const */ flag_trap = 256,\n/** @const */ flag_interrupt = 512,\n/** @const */ flag_direction = 1024,\n/** @const */ flag_overflow = 2048,\n/** @const */ flag_iopl = 1 << 12 | 1 << 13,\n/** @const */ flag_nt = 1 << 14,\n/** @const */ flag_rf = 1 << 16,\n/** @const */ flag_vm = 1 << 17,\n/** @const */ flag_ac = 1 << 18,\n/** @const */ flag_vif = 1 << 19,\n/** @const */ flag_vip = 1 << 20,\n/** @const */ flag_id = 1 << 21,\n\n/**\n * default values of reserved flags bits\n * @const\n */\nflags_default = 1 << 1,\n\n/**\n * bitmask to select non-reserved flags bits\n * @const\n */\nflags_mask =\n    flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_trap | flag_interrupt |\n    flag_direction | flag_overflow | flag_iopl | flag_nt | flag_rf | flag_vm | flag_ac |\n    flag_vif | flag_vip | flag_id,\n\n\n/**\n * all arithmetic flags\n * @const\n */\nflags_all = flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_overflow,\n\n\n/**\n * opsizes used by get flag functions\n *\n * @const\n */\nOPSIZE_8 = 7,\n/** @const */\nOPSIZE_16 = 15,\n/** @const */\nOPSIZE_32 = 31,\n\n/** @const */\nPSE_ENABLED = 128,\n\n/** @const */ reg_eax = 0,\n/** @const */ reg_ecx = 1,\n/** @const */ reg_edx = 2,\n/** @const */ reg_ebx = 3,\n/** @const */ reg_esp = 4,\n/** @const */ reg_ebp = 5,\n/** @const */ reg_esi = 6,\n/** @const */ reg_edi = 7,\n\n/** @const */ reg_ax = 0,\n/** @const */ reg_cx = 2,\n/** @const */ reg_dx = 4,\n/** @const */ reg_bx = 6,\n/** @const */ reg_sp = 8,\n/** @const */ reg_bp = 10,\n/** @const */ reg_si = 12,\n/** @const */ reg_di = 14,\n\n/** @const */ reg_al = 0,\n/** @const */ reg_cl = 4,\n/** @const */ reg_dl = 8,\n/** @const */ reg_bl = 12,\n/** @const */ reg_ah = 1,\n/** @const */ reg_ch = 5,\n/** @const */ reg_dh = 9,\n/** @const */ reg_bh = 13,\n\n\n/** @const */ reg_es = 0,\n/** @const */ reg_cs = 1,\n/** @const */ reg_ss = 2,\n/** @const */ reg_ds = 3,\n/** @const */ reg_fs = 4,\n/** @const */ reg_gs = 5,\n\n\n/** @const */ reg_tr = 6, // task register\n/** @const */ reg_ldtr = 7; // local descriptor table register\n\nvar\n    /**\n     * The minimum number of bytes that can be memory-mapped\n     * by one device.\n     *\n     * @const\n     */\n    MMAP_BLOCK_BITS = 17,\n    /** @const */\n    MMAP_BLOCK_SIZE = 1 << MMAP_BLOCK_BITS;\n\n\n/** @const */\nvar MEM_PAGE_WRITTEN = 1;\n\n\n/** @const */\nvar MAGIC_CPU_EXCEPTION = 0xDEADBEE;\n\n\nvar\n    /** @const */\n    REPEAT_STRING_PREFIX_NONE = 0,\n    /** @const */\n    REPEAT_STRING_PREFIX_NZ = 1,\n    /** @const */\n    REPEAT_STRING_PREFIX_Z = 2;\n\nvar\n    /** @const */\n    CR0_PE = 1,\n    /** @const */\n    CR0_MP = 1 << 1,\n    /** @const */\n    CR0_EM = 1 << 2,\n    /** @const */\n    CR0_TS = 1 << 3,\n    /** @const */\n    CR0_ET = 1 << 4,\n    /** @const */\n    CR0_WP = 1 << 16,\n    /** @const */\n    CR0_NW = 1 << 29,\n    /** @const */\n    CR0_CD = 1 << 30,\n    /** @const */\n    CR0_PG = 1 << 31;\n\nvar\n    /** @const */\n    CR4_VME = 1,\n    /** @const */\n    CR4_PVI = 1 << 1,\n    /** @const */\n    CR4_TSD = 1 << 2,\n    /** @const */\n    CR4_PSE = 1 << 4,\n    /** @const */\n    CR4_DE = 1 << 3,\n    /** @const */\n    CR4_PAE = 1 << 5,\n    /** @const */\n    CR4_PGE = 1 << 7,\n    /** @const */\n    CR4_OSFXSR = 1 << 9,\n    /** @const */\n    CR4_OSXMMEXCPT = 1 << 10;\n\n\n// Segment prefixes must not collide with reg_*s variables\n// _ZERO is a special zero offset segment\nvar\n    /** @const */\n    SEG_PREFIX_NONE = -1,\n\n    /** @const */\n    SEG_PREFIX_ZERO = 7;\n\n\nvar\n    /** @const */\n    IA32_SYSENTER_CS = 0x174,\n\n    // Note: These are wrong in Intel's manuals. Fuck Intel\n    /** @const */\n    IA32_SYSENTER_ESP = 0x175,\n\n    /** @const */\n    IA32_SYSENTER_EIP = 0x176;\n\n/** @const */\nvar IA32_TIME_STAMP_COUNTER = 0x10;\n\n/** @const */\nvar IA32_PLATFORM_ID = 0x17;\n\n/** @const */\nvar MSR_EBC_FREQUENCY_ID = 0x2C;\n\n/** @const */\nvar IA32_APIC_BASE_MSR = 0x1B;\n\n/** @const */\nvar IA32_BIOS_SIGN_ID = 0x8B;\n\n/** @const */\nvar IA32_MISC_ENABLE = 0x1A0;\n\n/** @const */\nvar IA32_RTIT_CTL = 0x570;\n\n/** @const */\nvar MSR_SMI_COUNT = 0x34;\n\n/** @const */\nvar IA32_MCG_CAP = 0x179;\n\n/** @const */\nvar IA32_KERNEL_GS_BASE = 0xC0000101 | 0;\n\n/** @const */\nvar MSR_PKG_C2_RESIDENCY = 0x60D;\n\n\n/** @const */\nvar IA32_APIC_BASE_BSP = 1 << 8;\n/** @const */\nvar IA32_APIC_BASE_EXTD = 1 << 10;\n/** @const */\nvar IA32_APIC_BASE_EN = 1 << 11;\n\n\n/** @const */ var TSR_BACKLINK = 0x00;\n/** @const */ var TSR_CR3 = 0x1C;\n/** @const */ var TSR_EIP = 0x20;\n/** @const */ var TSR_EFLAGS = 0x24;\n\n/** @const */ var TSR_EAX = 0x28;\n/** @const */ var TSR_ECX = 0x2c;\n/** @const */ var TSR_EDX = 0x30;\n/** @const */ var TSR_EBX = 0x34;\n/** @const */ var TSR_ESP = 0x38;\n/** @const */ var TSR_EBP = 0x3c;\n/** @const */ var TSR_ESI = 0x40;\n/** @const */ var TSR_EDI = 0x44;\n\n/** @const */ var TSR_ES = 0x48;\n/** @const */ var TSR_CS = 0x4c;\n/** @const */ var TSR_SS = 0x50;\n/** @const */ var TSR_DS = 0x54;\n/** @const */ var TSR_FS = 0x58;\n/** @const */ var TSR_GS = 0x5c;\n/** @const */ var TSR_LDT = 0x60;\n\n\n/** @const */ var FW_CFG_SIGNATURE = 0x00;\n/** @const */ var FW_CFG_RAM_SIZE = 0x03;\n/** @const */ var FW_CFG_NB_CPUS = 0x05;\n\n\n/** @const */\nvar PREFIX_MASK_REP = 0b11000;\n/** @const */\nvar PREFIX_REPZ = 0b01000;\n/** @const */\nvar PREFIX_REPNZ = 0b10000;\n\n/** @const */\nvar PREFIX_MASK_SEGMENT = 0b111;\n\n/** @const */\nvar PREFIX_MASK_OPSIZE = 0b100000;\n/** @const */\nvar PREFIX_MASK_ADDRSIZE = 0b1000000;\n\n/** @const */\nvar PREFIX_F2 = PREFIX_REPNZ; // alias\n/** @const */\nvar PREFIX_F3 = PREFIX_REPZ; // alias\n/** @const */\nvar PREFIX_66 = PREFIX_MASK_OPSIZE; // alias\n\n/** @const */\nvar MXCSR_MASK = (0xFFFF & ~(1 << 6));\n\n\n/** @const */\nvar MIXER_CHANNEL_LEFT = 0;\n/** @const */\nvar MIXER_CHANNEL_RIGHT = 1;\n/** @const */\nvar MIXER_CHANNEL_BOTH = 2;\n/** @const */\nvar MIXER_SRC_MASTER = 0;\n/** @const */\nvar MIXER_SRC_PCSPEAKER = 1;\n/** @const */\nvar MIXER_SRC_DAC = 2;\n","\"use strict\";\n\nif(typeof window !== \"undefined\" && !window.requestAnimationFrame)\n{\n    window.requestAnimationFrame =\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame;\n}\n\n\n/**\n * Adapter to use visual screen in browsers (in contrast to node)\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction ScreenAdapter(screen_container, bus)\n{\n    console.assert(screen_container, \"1st argument must be a DOM container\");\n\n    var\n        graphic_screen = screen_container.getElementsByTagName(\"canvas\")[0],\n        graphic_context = graphic_screen.getContext(\"2d\"),\n\n        text_screen = screen_container.getElementsByTagName(\"div\")[0],\n        cursor_element = document.createElement(\"div\");\n\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        /** @type {number} */\n        scale_x = 1,\n\n        /** @type {number} */\n        scale_y = 1,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        modified_pixel_min = 0,\n        modified_pixel_max = 0,\n\n        changed_rows,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    var stopped = false;\n\n    var screen = this;\n\n    // 0x12345 -> \"#012345\"\n    function number_as_color(n)\n    {\n        n = n.toString(16);\n\n        return \"#\" + Array(7 - n.length).join(\"0\") + n;\n    }\n\n\n    /**\n     * Charmaps that constraint unicode sequences for the default dospage\n     * @const\n     */\n    var charmap_high = new Uint16Array([\n        0xC7, 0xFC, 0xE9, 0xE2, 0xE4, 0xE0, 0xE5, 0xE7,\n        0xEA, 0xEB, 0xE8, 0xEF, 0xEE, 0xEC, 0xC4, 0xC5,\n        0xC9, 0xE6, 0xC6, 0xF4, 0xF6, 0xF2, 0xFB, 0xF9,\n        0xFF, 0xD6, 0xDC, 0xA2, 0xA3, 0xA5, 0x20A7, 0x192,\n        0xE1, 0xED, 0xF3, 0xFA, 0xF1, 0xD1, 0xAA, 0xBA,\n        0xBF, 0x2310, 0xAC, 0xBD, 0xBC, 0xA1, 0xAB, 0xBB,\n        0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,\n        0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,\n        0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,\n        0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,\n        0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,\n        0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,\n        0x3B1, 0xDF, 0x393, 0x3C0, 0x3A3, 0x3C3, 0xB5, 0x3C4,\n        0x3A6, 0x398, 0x3A9, 0x3B4, 0x221E, 0x3C6, 0x3B5, 0x2229,\n        0x2261, 0xB1, 0x2265, 0x2264, 0x2320, 0x2321, 0xF7,\n        0x2248, 0xB0, 0x2219, 0xB7, 0x221A, 0x207F, 0xB2, 0x25A0, 0xA0\n    ]);\n\n    /** @const */\n    var charmap_low = new Uint16Array([\n        0x20,   0x263A, 0x263B, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022,\n        0x25D8, 0x25CB, 0x25D9, 0x2642, 0x2640, 0x266A, 0x266B, 0x263C,\n        0x25BA, 0x25C4, 0x2195, 0x203C, 0xB6,   0xA7,   0x25AC, 0x21A8,\n        0x2191, 0x2193, 0x2192, 0x2190, 0x221F, 0x2194, 0x25B2, 0x25BC\n    ]);\n\n    var charmap = [],\n        chr;\n\n    for(var i = 0; i < 256; i++)\n    {\n        if(i > 127)\n        {\n            chr = charmap_high[i - 0x80];\n        }\n        else if(i < 32)\n        {\n            chr = charmap_low[i];\n        }\n        else\n        {\n            chr = i;\n        }\n\n        charmap[i] = String.fromCharCode(chr);\n    }\n\n    graphic_context[\"imageSmoothingEnabled\"] = false;\n\n    cursor_element.style.position = \"absolute\";\n    cursor_element.style.backgroundColor = \"#ccc\";\n    cursor_element.style.width = \"7px\";\n    cursor_element.style.display = \"inline-block\";\n\n    text_screen.style.display = \"block\";\n    graphic_screen.style.display = \"none\";\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        this.update_buffer(data);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-clear\", function()\n    {\n        this.clear_screen();\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1], data[2], data[3]);\n    }, this);\n\n\n    this.init = function()\n    {\n        // not necessary, because this gets initialized by the bios early,\n        // but nicer to look at\n        this.set_size_text(80, 25);\n\n        this.timer();\n    };\n\n    this.make_screenshot = function()\n    {\n        try {\n            window.open(graphic_screen.toDataURL());\n        }\n        catch(e) {}\n    };\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n\n            changed_rows[row] = 1;\n        }\n    };\n\n    this.timer = function()\n    {\n        if(!stopped)\n        {\n            requestAnimationFrame(is_graphical ? update_graphical : update_text);\n        }\n    };\n\n    var update_text = function()\n    {\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            if(changed_rows[i])\n            {\n                screen.text_update_row(i);\n                changed_rows[i] = 0;\n            }\n        }\n\n        this.timer();\n    }.bind(this);\n\n    var update_graphical = function()\n    {\n        this.bus.send(\"screen-fill-buffer\");\n        this.timer();\n    }.bind(this);\n\n    this.destroy = function()\n    {\n        stopped = true;\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n\n        if(graphical)\n        {\n            text_screen.style.display = \"none\";\n            graphic_screen.style.display = \"block\";\n        }\n        else\n        {\n            text_screen.style.display = \"block\";\n            graphic_screen.style.display = \"none\";\n        }\n    };\n\n    this.clear_screen = function()\n    {\n        graphic_context.fillStyle = \"#000\";\n        graphic_context.fillRect(0, 0, graphic_screen.width, graphic_screen.height);\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        changed_rows = new Int8Array(rows);\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n\n        while(text_screen.childNodes.length > rows)\n        {\n            text_screen.removeChild(text_screen.firstChild);\n        }\n\n        while(text_screen.childNodes.length < rows)\n        {\n            text_screen.appendChild(document.createElement(\"div\"));\n        }\n\n        for(var i = 0; i < rows; i++)\n        {\n            this.text_update_row(i);\n        }\n\n        update_scale_text();\n    };\n\n    this.set_size_graphical = function(width, height, buffer_width, buffer_height)\n    {\n        if(DEBUG_SCREEN_LAYERS)\n        {\n            // Draw the entire buffer. Useful for debugging\n            // panning / page flipping / screen splitting code for both\n            // v86 developers and os developers\n            width = buffer_width;\n            height = buffer_height;\n        }\n\n        graphic_screen.style.display = \"block\";\n\n        graphic_screen.width = width;\n        graphic_screen.height = height;\n\n        //graphic_screen.style.width = width * scale_x + \"px\";\n        //graphic_screen.style.height = height * scale_y + \"px\";\n\n        // Make sure to call this here, because pixels are transparent otherwise\n        //screen.clear_screen();\n\n        graphic_image_data = graphic_context.createImageData(buffer_width, buffer_height);\n        graphic_buffer = new Uint8Array(graphic_image_data.data.buffer);\n        graphic_buffer32 = new Int32Array(graphic_image_data.data.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n        update_scale_graphic();\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n        scale_x = s_x;\n        scale_y = s_y;\n\n        update_scale_text();\n        update_scale_graphic();\n    };\n    this.set_scale(scale_x, scale_y);\n\n    function update_scale_text()\n    {\n        elem_set_scale(text_screen, scale_x, scale_y, true);\n    }\n\n    function update_scale_graphic()\n    {\n        elem_set_scale(graphic_screen, scale_x, scale_y, false);\n    }\n\n    function elem_set_scale(elem, scale_x, scale_y, use_scale)\n    {\n        elem.style.width = \"\";\n        elem.style.height = \"\";\n\n        if(use_scale)\n        {\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = \"\";\n        }\n\n        var rectangle = elem.getBoundingClientRect();\n\n        if(use_scale)\n        {\n            var scale_str = \"\";\n\n            scale_str += scale_x === 1 ? \"\" : \" scaleX(\" + scale_x + \")\";\n            scale_str += scale_y === 1 ? \"\" : \" scaleY(\" + scale_y + \")\";\n\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = scale_str;\n        }\n        else\n        {\n            // unblur non-fractional scales\n            if(scale_x % 1 === 0 && scale_y % 1 === 0)\n            {\n                graphic_screen.style.imageRendering = \"-moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"webkit-optimize-contrast\";\n                graphic_screen.style.imageRendering = \"o-crisp-edges\";\n                graphic_screen.style.imageRendering = \"pixelated\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"nearest-neighbor\";\n            }\n            else\n            {\n                graphic_screen.style.imageRendering = \"\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"\";\n            }\n\n            // undo fractional css-to-device pixel ratios\n            var device_pixel_ratio = window.devicePixelRatio || 1;\n            if(device_pixel_ratio % 1 !== 0)\n            {\n                scale_x /= device_pixel_ratio;\n                scale_y /= device_pixel_ratio;\n            }\n        }\n\n        if(scale_x !== 1)\n        {\n            elem.style.width = rectangle.width * scale_x + \"px\";\n        }\n        if(scale_y !== 1)\n        {\n            elem.style.height = rectangle.height * scale_y + \"px\";\n        }\n    }\n\n    this.update_cursor_scanline = function(start, end)\n    {\n        if(start & 0x20)\n        {\n            cursor_element.style.display = \"none\";\n        }\n        else\n        {\n            cursor_element.style.display = \"inline\";\n\n            cursor_element.style.height = Math.min(15, end - start) + \"px\";\n            cursor_element.style.marginTop = Math.min(15, start) + \"px\";\n        }\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            changed_rows[row] = 1;\n            changed_rows[cursor_row] = 1;\n\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.text_update_row = function(row)\n    {\n        var offset = 3 * row * text_mode_width,\n            row_element,\n            color_element,\n            fragment;\n\n        var bg_color,\n            fg_color,\n            text;\n\n        row_element = text_screen.childNodes[row];\n        fragment = document.createElement(\"div\");\n\n        for(var i = 0; i < text_mode_width; )\n        {\n            color_element = document.createElement(\"span\");\n\n            bg_color = text_mode_data[offset + 1];\n            fg_color = text_mode_data[offset + 2];\n\n            color_element.style.backgroundColor = number_as_color(bg_color);\n            color_element.style.color = number_as_color(fg_color);\n\n            text = \"\";\n\n            // put characters of the same color in one element\n            while(i < text_mode_width &&\n                text_mode_data[offset + 1] === bg_color &&\n                text_mode_data[offset + 2] === fg_color)\n            {\n                var ascii = text_mode_data[offset];\n\n                text += charmap[ascii];\n\n                i++;\n                offset += 3;\n\n                if(row === cursor_row)\n                {\n                    if(i === cursor_col)\n                    {\n                        // next row will be cursor\n                        // create new element\n                        break;\n                    }\n                    else if(i === cursor_col + 1)\n                    {\n                        // found the cursor\n                        fragment.appendChild(cursor_element);\n                        break;\n                    }\n                }\n            }\n\n            color_element.textContent = text;\n            fragment.appendChild(color_element);\n        }\n\n        row_element.parentNode.replaceChild(fragment, row_element);\n    };\n\n    this.update_buffer = function(layers)\n    {\n        if(DEBUG_SCREEN_LAYERS)\n        {\n            // Draw the entire buffer. Useful for debugging\n            // panning / page flipping / screen splitting code for both\n            // v86 developers and os developers\n            graphic_context.putImageData(\n                graphic_image_data,\n                0, 0\n            );\n\n            // For each visible layer that would've been drawn, draw a\n            // rectangle to visualise the layer instead.\n            graphic_context.strokeStyle = \"#0F0\";\n            graphic_context.lineWidth = 4;\n            layers.forEach((layer) =>\n            {\n                graphic_context.strokeRect(\n                    layer.buffer_x,\n                    layer.buffer_y,\n                    layer.buffer_width,\n                    layer.buffer_height\n                );\n            });\n            graphic_context.lineWidth = 1;\n            return;\n        }\n\n        layers.forEach((layer) =>\n        {\n            graphic_context.putImageData(\n                graphic_image_data,\n                layer.screen_x - layer.buffer_x,\n                layer.screen_y - layer.buffer_y,\n                layer.buffer_x,\n                layer.buffer_y,\n                layer.buffer_width,\n                layer.buffer_height\n            );\n        });\n    };\n\n    this.init();\n}\n\n\n","// -------------------------------------------------\n// --------------------- 9P ------------------------\n// -------------------------------------------------\n// Implementation of the 9p filesystem device following the \n// 9P2000.L protocol ( https://code.google.com/p/diod/wiki/protocol )\n\n\"use strict\";\n\n// TODO\n// flush\n// lock?\n// correct hard links\n\nvar EPERM = 1;       /* Operation not permitted */\nvar ENOENT = 2;      /* No such file or directory */\nvar EINVAL = 22;     /* Invalid argument */\nvar ENOTSUPP = 524;  /* Operation is not supported */\nvar ENOTEMPTY = 39;  /* Directory not empty */\nvar EPROTO    = 71   /* Protocol error */\n\nvar P9_SETATTR_MODE = 0x00000001;\nvar P9_SETATTR_UID = 0x00000002;\nvar P9_SETATTR_GID = 0x00000004;\nvar P9_SETATTR_SIZE = 0x00000008;\nvar P9_SETATTR_ATIME = 0x00000010;\nvar P9_SETATTR_MTIME = 0x00000020;\nvar P9_SETATTR_CTIME = 0x00000040;\nvar P9_SETATTR_ATIME_SET = 0x00000080;\nvar P9_SETATTR_MTIME_SET = 0x00000100;\n\nvar P9_STAT_MODE_DIR = 0x80000000;\nvar P9_STAT_MODE_APPEND = 0x40000000;\nvar P9_STAT_MODE_EXCL = 0x20000000;\nvar P9_STAT_MODE_MOUNT = 0x10000000;\nvar P9_STAT_MODE_AUTH = 0x08000000;\nvar P9_STAT_MODE_TMP = 0x04000000;\nvar P9_STAT_MODE_SYMLINK = 0x02000000;\nvar P9_STAT_MODE_LINK = 0x01000000;\nvar P9_STAT_MODE_DEVICE = 0x00800000;\nvar P9_STAT_MODE_NAMED_PIPE = 0x00200000;\nvar P9_STAT_MODE_SOCKET = 0x00100000;\nvar P9_STAT_MODE_SETUID = 0x00080000;\nvar P9_STAT_MODE_SETGID = 0x00040000;\nvar P9_STAT_MODE_SETVTX = 0x00010000;\n\nvar FID_NONE = -1;\nvar FID_INODE = 1;\nvar FID_XATTR = 2;\n\n/** \n * @constructor \n *\n * @param {FS} filesystem\n */\nfunction Virtio9p(filesystem, bus) {\n    /** @const @type {FS} */\n    this.fs = filesystem;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.SendReply = function(x, y) {};\n    this.deviceid = 0x9; // 9p filesystem\n    this.hostfeature = 0x1; // mountpoint\n    //this.configspace = [0x0, 0x4, 0x68, 0x6F, 0x73, 0x74]; // length of string and \"host\" string\n    //this.configspace = [0x0, 0x9, 0x2F, 0x64, 0x65, 0x76, 0x2F, 0x72, 0x6F, 0x6F, 0x74 ]; // length of string and \"/dev/root\" string\n\n    this.configspace = new Uint8Array([0x6, 0x0, 0x68, 0x6F, 0x73, 0x74, 0x39, 0x70]); // length of string and \"host9p\" string\n    this.VERSION = \"9P2000.L\";\n    this.BLOCKSIZE = 8192; // Let's define one page.\n    this.msize = 8192; // maximum message size\n    this.replybuffer = new Uint8Array(this.msize*2); // Twice the msize to stay on the safe site\n    this.replybuffersize = 0;\n\n    this.fids = [];\n}\n\nVirtio9p.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.deviceid;\n    state[1] = this.hostfeature;\n    state[2] = this.configspace;\n    state[3] = this.VERSION;\n    state[4] = this.BLOCKSIZE;\n    state[5] = this.msize;\n    state[6] = this.replybuffer;\n    state[7] = this.replybuffersize;\n    state[8] = this.fids.map(function(f) { return [f.inodeid, f.type, f.uid] });\n\n    return state;\n};\n\nVirtio9p.prototype.set_state = function(state)\n{\n    this.deviceid = state[0];\n    this.hostfeature = state[1];\n    this.configspace = state[2];\n    this.VERSION = state[3];\n    this.BLOCKSIZE = state[4];\n    this.msize = state[5];\n    this.replybuffer = state[6];\n    this.replybuffersize = state[7];\n    this.fids = state[8].map(function(f) { return { inodeid: f[0], type: f[1], uid: f[2] } });\n};\n\nVirtio9p.prototype.Createfid = function(inode, type, uid) {\n    return {inodeid: inode, type: type, uid: uid};\n}\n\nVirtio9p.prototype.Reset = function() {\n    this.fids = [];\n}\n\n\nVirtio9p.prototype.BuildReply = function(id, tag, payloadsize) {\n    marshall.Marshall([\"w\", \"b\", \"h\"], [payloadsize+7, id+1, tag], this.replybuffer, 0);\n    if ((payloadsize+7) >= this.replybuffer.length) {\n        message.Debug(\"Error in 9p: payloadsize exceeds maximum length\");\n    }\n    //for(var i=0; i<payload.length; i++)\n    //    this.replybuffer[7+i] = payload[i];\n    this.replybuffersize = payloadsize+7;\n    return;\n}\n\nVirtio9p.prototype.SendError = function (tag, errormsg, errorcode) {\n    //var size = marshall.Marshall([\"s\", \"w\"], [errormsg, errorcode], this.replybuffer, 7);\n    var size = marshall.Marshall([\"w\"], [errorcode], this.replybuffer, 7);\n    this.BuildReply(6, tag, size);\n}\n\nVirtio9p.prototype.ReceiveRequest = function (index, GetByte) {\n    var header = marshall.Unmarshall2([\"w\", \"b\", \"h\"], GetByte);\n    var size = header[0];\n    var id = header[1];\n    var tag = header[2];\n    //message.Debug(\"size:\" + size + \" id:\" + id + \" tag:\" + tag);\n\n    switch(id)\n    {\n        case 8: // statfs\n            size = this.fs.GetTotalSize(); // size used by all files\n            var space = this.fs.GetSpace();\n            var req = [];\n            req[0] = 0x01021997;\n            req[1] = this.BLOCKSIZE; // optimal transfer block size\n            req[2] = Math.floor(space/req[1]); // free blocks\n            req[3] = req[2] - Math.floor(size/req[1]); // free blocks in fs\n            req[4] = req[2] - Math.floor(size/req[1]); // free blocks avail to non-superuser\n            req[5] = this.fs.inodes.length; // total number of inodes\n            req[6] = 1024*1024;\n            req[7] = 0; // file system id?\n            req[8] = 256; // maximum length of filenames\n\n            size = marshall.Marshall([\"w\", \"w\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"w\"], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 112: // topen\n        case 12: // tlopen\n            var req = marshall.Unmarshall2([\"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var mode = req[1];\n            message.Debug(\"[open] fid=\" + fid + \", mode=\" + mode);\n            var idx = this.fids[fid].inodeid;\n            var inode = this.fs.GetInode(idx);\n            message.Debug(\"file open \" + inode.name);\n            //if (inode.status == STATUS_LOADING) return;\n            var ret = this.fs.OpenInode(idx, mode);\n\n            this.fs.AddEvent(this.fids[fid].inodeid,\n                function() {\n                    message.Debug(\"file opened \" + inode.name + \" tag:\"+tag);\n                    req[0] = inode.qid;\n                    req[1] = this.msize - 24;\n                    marshall.Marshall([\"Q\", \"w\"], req, this.replybuffer, 7);\n                    this.BuildReply(id, tag, 13+4);\n                    this.SendReply(0, index);\n                }.bind(this)\n            );\n            break;\n\n        case 70: // link (just copying)\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var dfid = req[0];\n            var fid = req[1];\n            var name = req[2];\n            message.Debug(\"[link] dfid=\" + dfid + \", name=\" + name);\n            var inode = this.fs.CreateInode();\n            var inodetarget = this.fs.GetInode(this.fids[fid].inodeid);\n            var targetdata = this.fs.inodedata[this.fids[fid].inodeid];\n            //inode = inodetarget;\n            inode.mode = inodetarget.mode;\n            inode.size = inodetarget.size;\n            inode.symlink = inodetarget.symlink;\n            var data = this.fs.inodedata[this.fs.inodes.length] = new Uint8Array(inode.size);\n            for(var i=0; i<inode.size; i++) {\n                data[i] = targetdata[i];\n            }\n            inode.name = name;\n            inode.parentid = this.fids[dfid].inodeid;\n            this.fs.PushInode(inode);\n            \n            //inode.uid = inodetarget.uid;\n            //inode.gid = inodetarget.gid;\n            //inode.mode = inodetarget.mode | S_IFLNK;\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);       \n            break;\n\n        case 16: // symlink\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var symgt = req[2];\n            var gid = req[3];\n            message.Debug(\"[symlink] fid=\" + fid + \", name=\" + name + \", symgt=\" + symgt + \", gid=\" + gid); \n            var idx = this.fs.CreateSymlink(name, this.fids[fid].inodeid, symgt);\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 18: // mknod\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var major = req[3];\n            var minor = req[4];\n            var gid = req[5];\n            message.Debug(\"[mknod] fid=\" + fid + \", name=\" + name + \", major=\" + major + \", minor=\" + minor+ \"\");\n            var idx = this.fs.CreateNode(name, this.fids[fid].inodeid, major, minor);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n\n        case 22: // TREADLINK\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            var fid = req[0];\n            message.Debug(\"[readlink] fid=\" + fid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            size = marshall.Marshall([\"s\"], [inode.symlink], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n\n        case 72: // tmkdir\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var gid = req[3];\n            message.Debug(\"[mkdir] fid=\" + fid + \", name=\" + name + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateDirectory(name, this.fids[fid].inodeid);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode | S_IFDIR;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 14: // tlcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var flags = req[2];\n            var mode = req[3];\n            var gid = req[4];\n            message.Debug(\"[create] fid=\" + fid + \", name=\" + name + \", flags=\" + flags + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateFile(name, this.fids[fid].inodeid);\n            this.fids[fid].inodeid = idx;\n            this.fids[fid].type = FID_INODE;\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            inode.mode = mode;\n            marshall.Marshall([\"Q\", \"w\"], [inode.qid, this.msize - 24], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13+4);\n            this.SendReply(0, index);\n            break;\n\n        case 52: // lock always suceed\n            message.Debug(\"lock file\\n\");\n            marshall.Marshall([\"w\"], [0], this.replybuffer, 7);\n            this.BuildReply(id, tag, 1);\n            this.SendReply(0, index);\n            break;\n\n        /*\n        case 54: // getlock\n            break;        \n        */\n\n        case 24: // getattr\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[getattr]: fid=\" + fid + \" name=\" + inode.name + \" request mask=\" + req[1]);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"getattr: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            req[0] |= 0x1000; // P9_STATS_GEN\n\n            req[0] = req[1]; // request mask\n            req[1] = inode.qid;\n\n            req[2] = inode.mode; \n            req[3] = inode.uid; // user id\n            req[4] = inode.gid; // group id\n            \n            req[5] = inode.nlinks; // number of hard links\n            req[6] = (inode.major<<8) | (inode.minor); // device id low\n            req[7] = inode.size; // size low\n            req[8] = this.BLOCKSIZE;\n            req[9] = Math.floor(inode.size/512+1);; // blk size low\n            req[10] = inode.atime; // atime\n            req[11] = 0x0;\n            req[12] = inode.mtime; // mtime\n            req[13] = 0x0;\n            req[14] = inode.ctime; // ctime\n            req[15] = 0x0;\n            req[16] = 0x0; // btime\n            req[17] = 0x0; \n            req[18] = 0x0; // st_gen\n            req[19] = 0x0; // data_version\n            marshall.Marshall([\n            \"d\", \"Q\", \n            \"w\",  \n            \"w\", \"w\", \n            \"d\", \"d\", \n            \"d\", \"d\", \"d\",\n            \"d\", \"d\", // atime\n            \"d\", \"d\", // mtime\n            \"d\", \"d\", // ctime\n            \"d\", \"d\", // btime\n            \"d\", \"d\",\n            ], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, 8 + 13 + 4 + 4+ 4 + 8*15);\n            this.SendReply(0, index);\n            break;\n\n        case 26: // setattr\n            var req = marshall.Unmarshall2([\"w\", \"w\", \n                \"w\", // mode \n                \"w\", \"w\", // uid, gid\n                \"d\", // size\n                \"d\", \"d\", // atime\n                \"d\", \"d\"] // mtime\n            , GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[setattr]: fid=\" + fid + \" request mask=\" + req[1] + \" name=\" +inode.name);\n            if (req[1] & P9_SETATTR_MODE) {\n                inode.mode = req[2];\n            }\n            if (req[1] & P9_SETATTR_UID) {\n                inode.uid = req[3];\n            }\n            if (req[1] & P9_SETATTR_GID) {\n                inode.gid = req[4];\n            }\n            if (req[1] & P9_SETATTR_ATIME) {\n                inode.atime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_MTIME) {\n                inode.mtime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_CTIME) {\n                inode.ctime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_ATIME_SET) {\n                inode.atime = req[6];\n            }\n            if (req[1] & P9_SETATTR_MTIME_SET) {\n                inode.mtime = req[8];\n            }\n            if (req[1] & P9_SETATTR_SIZE) {\n                this.fs.ChangeSize(this.fids[fid].inodeid, req[5]);\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 50: // fsync\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 40: // TREADDIR\n        case 116: // read\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            if (id == 40) message.Debug(\"[treaddir]: fid=\" + fid + \" offset=\" + offset + \" count=\" + count);\n            if (id == 116) message.Debug(\"[read]: fid=\" + fid + \" (\" + inode.name + \") offset=\" + offset + \" count=\" + count + \" fidtype=\" + this.fids[fid].type);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"read/treaddir: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            if (this.fids[fid].type == FID_XATTR) {\n                if (inode.caps.length < offset+count) count = inode.caps.length - offset;\n                for(var i=0; i<count; i++)\n                    this.replybuffer[7+4+i] = inode.caps[offset+i];\n                marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                this.BuildReply(id, tag, 4 + count);\n                this.SendReply(0, index);\n            } else {\n                var file = this.fs.inodes[this.fids[fid].inodeid];\n                this.bus.send(\"9p-read-start\");\n\n                this.fs.OpenInode(this.fids[fid].inodeid, undefined);\n                this.fs.AddEvent(this.fids[fid].inodeid,\n                    function() {\n                        this.bus.send(\"9p-read-end\", [file.name, count]);\n\n                        if (inode.size < offset+count) count = inode.size - offset;\n                        var data = this.fs.inodedata[this.fids[fid].inodeid];\n                        if(data) {\n                            for(var i=0; i<count; i++)\n                                this.replybuffer[7+4+i] = data[offset+i];\n                        }\n                        marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                        this.BuildReply(id, tag, 4 + count);\n                        this.SendReply(0, index);\n                    }.bind(this)\n                );\n            }\n            break;\n\n        case 118: // write\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            message.Debug(\"[write]: fid=\" + fid + \" (\" + this.fs.inodes[this.fids[fid].inodeid].name + \") offset=\" + offset + \" count=\" + count);\n            this.fs.Write(this.fids[fid].inodeid, offset, count, GetByte);\n\n            var file = this.fs.inodes[this.fids[fid].inodeid];\n            this.bus.send(\"9p-write-end\", [file.name, count]);\n\n            marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n            this.BuildReply(id, tag, 4);\n            this.SendReply(0, index);\n            break;\n\n        case 74: // RENAMEAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"s\"], GetByte);\n            var olddirfid = req[0];\n            var oldname = req[1];\n            var newdirfid = req[2];\n            var newname = req[3];\n            message.Debug(\"[renameat]: oldname=\" + oldname + \" newname=\" + newname);\n            var ret = this.fs.Rename(this.fids[olddirfid].inodeid, oldname, this.fids[newdirfid].inodeid, newname);\n            if (ret == false) {\n                this.SendError(tag, \"No such file or directory\", ENOENT);                   \n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 76: // TUNLINKAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\"], GetByte);\n            var dirfd = req[0];\n            var name = req[1];\n            var flags = req[2];\n            message.Debug(\"[unlink]: dirfd=\" + dirfd + \" name=\" + name + \" flags=\" + flags);\n            var fid = this.fs.Search(this.fids[dirfd].inodeid, name);\n            if (fid == -1) {\n                   this.SendError(tag, \"No such file or directory\", ENOENT);\n                   this.SendReply(0, index);\n                   break;\n            }\n            var ret = this.fs.Unlink(fid);\n            if (!ret) {\n                this.SendError(tag, \"Directory not empty\", ENOTEMPTY);\n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 100: // version\n            var version = marshall.Unmarshall2([\"w\", \"s\"], GetByte);\n            message.Debug(\"[version]: msize=\" + version[0] + \" version=\" + version[1]);\n            this.msize = version[0];\n            size = marshall.Marshall([\"w\", \"s\"], [this.msize, this.VERSION], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 104: // attach\n            // return root directorie's QID\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var uid = req[4];\n            message.Debug(\"[attach]: fid=\" + fid + \" afid=\" + hex8(req[1]) + \" uname=\" + req[2] + \" aname=\" + req[3]);\n            this.fids[fid] = this.Createfid(0, FID_INODE, uid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 108: // tflush\n            var req = marshall.Unmarshall2([\"h\"], GetByte);\n            var oldtag = req[0];\n            message.Debug(\"[flush] \" + tag);\n            //marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n\n        case 110: // walk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"h\"], GetByte);\n            var fid = req[0];\n            var nwfid = req[1];\n            var nwname = req[2];\n            message.Debug(\"[walk]: fid=\" + req[0] + \" nwfid=\" + req[1] + \" nwname=\" + nwname);\n            if (nwname == 0) {\n                this.fids[nwfid] = this.Createfid(this.fids[fid].inodeid, FID_INODE, this.fids[fid].uid);\n                //this.fids[nwfid].inodeid = this.fids[fid].inodeid;\n                marshall.Marshall([\"h\"], [0], this.replybuffer, 7);\n                this.BuildReply(id, tag, 2);\n                this.SendReply(0, index);\n                break;\n            }\n            var wnames = [];\n            for(var i=0; i<nwname; i++) {\n                wnames.push(\"s\");\n            }\n            var walk = marshall.Unmarshall2(wnames, GetByte);\n            var idx = this.fids[fid].inodeid;\n            var offset = 7+2;\n            var nwidx = 0;\n            //console.log(idx, this.fs.inodes[idx]);\n            message.Debug(\"walk in dir \" + this.fs.inodes[idx].name  + \" to: \" + walk.toString());\n            for(var i=0; i<nwname; i++) {\n                idx = this.fs.Search(idx, walk[i]);\n\n                if (idx == -1) {\n                   message.Debug(\"Could not find: \" + walk[i]);\n                   break;\n                }\n                offset += marshall.Marshall([\"Q\"], [this.fs.inodes[idx].qid], this.replybuffer, offset);\n                nwidx++;\n                //message.Debug(this.fids[nwfid].inodeid);\n                //this.fids[nwfid].inodeid = idx;\n                //this.fids[nwfid].type = FID_INODE;\n                this.fids[nwfid] = this.Createfid(idx, FID_INODE, this.fids[fid].uid);\n            }\n            marshall.Marshall([\"h\"], [nwidx], this.replybuffer, 7);\n            this.BuildReply(id, tag, offset-7);\n            this.SendReply(0, index);\n            break;\n\n        case 120: // clunk\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            message.Debug(\"[clunk]: fid=\" + req[0]);\n            if (this.fids[req[0]] && this.fids[req[0]].inodeid >=  0) {\n                this.fs.CloseInode(this.fids[req[0]].inodeid);\n                this.fids[req[0]].inodeid = -1;\n                this.fids[req[0]].type = FID_NONE;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 32: // txattrcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var attr_size = req[2];\n            var flags = req[3];\n            message.Debug(\"[txattrcreate]: fid=\" + fid + \" name=\" + name + \" attr_size=\" + attr_size + \" flags=\" + flags);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            //this.SendError(tag, \"Operation i not supported\",  EINVAL);\n            //this.SendReply(0, index);\n            break;\n\n        case 30: // xattrwalk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var fid = req[0];\n            var newfid = req[1];\n            var name = req[2];\n            message.Debug(\"[xattrwalk]: fid=\" + req[0] + \" newfid=\" + req[1] + \" name=\" + req[2]);\n            this.fids[newfid] = this.Createfid(this.fids[fid].inodeid, FID_NONE, this.fids[fid].uid);\n            //this.fids[newfid].inodeid = this.fids[fid].inodeid;\n            //this.fids[newfid].type = FID_NONE;\n            var length = 0;\n            if (name == \"security.capability\") {\n                length = this.fs.PrepareCAPs(this.fids[fid].inodeid);\n                this.fids[newfid].type = FID_XATTR;\n            }\n            marshall.Marshall([\"d\"], [length], this.replybuffer, 7);\n            this.BuildReply(id, tag, 8);\n            this.SendReply(0, index);\n            break;\n\n        default:\n            message.Debug(\"Error in Virtio9p: Unknown id \" + id + \" received\");\n            message.Abort();\n            //this.SendError(tag, \"Operation i not supported\",  ENOTSUPP);\n            //this.SendReply(0, index);\n            break;\n    }\n\n    //consistency checks if there are problems with the filesystem\n    //this.fs.Check();\n}\n","\"use strict\";\n/*\n * Compile time configuration, some only relevant for debug mode\n */\n\n/**\n * @define {boolean}\n * Overridden for production by closure compiler\n */\nvar DEBUG = true;\n\n/** @const */\nvar LOG_TO_FILE = false;\n\n/**\n * @const\n * Enables logging all IO port reads and writes. Very verbose\n */\nvar LOG_ALL_IO = false;\n\n/**\n * @const\n * Enables logging of page faults, quite verbose\n */\nvar LOG_PAGE_FAULTS = false;\n\n\nvar LOG_LEVEL = LOG_ALL & ~LOG_PS2 & ~LOG_PIT & ~LOG_VIRTIO & ~LOG_9P & ~LOG_PIC &\n                          ~LOG_DMA & ~LOG_SERIAL & ~LOG_NET & ~LOG_FLOPPY & ~LOG_DISK;\n\n/**\n * @const\n * Draws entire buffer and visualizes the layers that would be drawn\n */\nvar DEBUG_SCREEN_LAYERS = DEBUG && false;\n\n\n/** @const */\nvar ENABLE_HPET = DEBUG && false;\n\n/**\n * @define {boolean}\n * Overridden by closure compiler\n */\nvar ENABLE_ACPI = false;\n\n\n/**\n * @const\n * How many cycles the CPU does at a time before running hardware timers\n */\nvar LOOP_COUNTER = 11001;\n\n/**\n * @const\n * How often, in milliseconds, to yield to the browser for rendering and\n * running events\n */\nvar TIME_PER_FRAME = 1;\n\n/**\n * @const\n * How many ticks the TSC does per millisecond\n */\nvar TSC_RATE = 8 * 1024;\n\n\n/** @const */\nvar APIC_TIMER_FREQ = TSC_RATE;\n\n\n/** @const */\nvar VMWARE_HYPERVISOR_PORT = true;\n","\"use strict\";\n\n/**\n * The ISA IO bus\n * Devices register their ports here\n *\n * @constructor\n * @param {CPU} cpu\n */\nfunction IO(cpu)\n{\n    /** @const */\n    this.ports = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 0x10000; i++)\n    {\n        this.ports[i] = this.create_empty_entry();\n    }\n\n    var memory_size = cpu.memory_size;\n\n    for(var i = 0; (i << MMAP_BLOCK_BITS) < memory_size; i++)\n    {\n        // avoid sparse arrays\n        cpu.memory_map_read8[i] = cpu.memory_map_write8[i] = undefined;\n        cpu.memory_map_read32[i] = cpu.memory_map_write32[i] = undefined;\n    }\n\n    this.mmap_register(memory_size, 0x100000000 - memory_size,\n        function(addr) {\n            // read outside of the memory size\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return 0xFF;\n        },\n        function(addr, value) {\n            // write outside of the memory size\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value, 2), LOG_IO);\n        },\n        function(addr) {\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return -1;\n        },\n        function(addr, value) {\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value >>> 0, 8), LOG_IO);\n        }\n    );\n}\n\nIO.prototype.create_empty_entry = function()\n{\n    return {\n        read8: this.empty_port_read8,\n        read16: this.empty_port_read16,\n        read32: this.empty_port_read32,\n\n        write8: this.empty_port_write,\n        write16: this.empty_port_write,\n        write32: this.empty_port_write,\n\n        device: undefined,\n    };\n};\n\nIO.prototype.empty_port_read8 = function()\n{\n    return 0xFF;\n};\n\nIO.prototype.empty_port_read16 = function()\n{\n    return 0xFFFF;\n};\n\nIO.prototype.empty_port_read32 = function()\n{\n    return -1;\n};\n\nIO.prototype.empty_port_write = function(x)\n{\n};\n\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function():number=} r8\n * @param {function():number=} r16\n * @param {function():number=} r32\n */\nIO.prototype.register_read = function(port_addr, device, r8, r16, r32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!r8 || typeof r8 === \"function\");\n    dbg_assert(!r16 || typeof r16 === \"function\");\n    dbg_assert(!r32 || typeof r32 === \"function\");\n    dbg_assert(r8 || r16 || r32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped read\" + n + \" \" + h(port_addr, 4) + \" (\" + device.name + \")\");\n            return -1 >>> (32 - n) | 0;\n        };\n        if(!r8) r8 = fail.bind(this, 8);\n        if(!r16) r16 = fail.bind(this, 16);\n        if(!r32) r32 = fail.bind(this, 32);\n    }\n\n    if(r8) this.ports[port_addr].read8 = r8;\n    if(r16) this.ports[port_addr].read16 = r16;\n    if(r32) this.ports[port_addr].read32 = r32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function(number)=} w8\n * @param {function(number)=} w16\n * @param {function(number)=} w32\n */\nIO.prototype.register_write = function(port_addr, device, w8, w16, w32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!w8 || typeof w8 === \"function\");\n    dbg_assert(!w16 || typeof w16 === \"function\");\n    dbg_assert(!w32 || typeof w32 === \"function\");\n    dbg_assert(w8 || w16 || w32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped write\" + n + \" \" + h(port_addr) + \" (\" + device.name + \")\");\n        };\n        if(!w8) w8 = fail.bind(this, 8);\n        if(!w16) w16 = fail.bind(this, 16);\n        if(!w32) w32 = fail.bind(this, 32);\n    }\n\n    if(w8) this.ports[port_addr].write8 = w8;\n    if(w16) this.ports[port_addr].write16 = w16;\n    if(w32) this.ports[port_addr].write32 = w32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * > Any two consecutive 8-bit ports can be treated as a 16-bit port;\n * > and four consecutive 8-bit ports can be treated as a 32-bit port\n * > http://css.csail.mit.edu/6.858/2012/readings/i386/s08_01.htm\n *\n * This info is not correct for all ports, but handled by the following functions\n *\n * Register the write of 2 or 4 consecutive 8-bit ports, 1 or 2 16-bit\n * ports and 0 or 1 32-bit ports\n *\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function():number} r8_1\n * @param {function():number} r8_2\n * @param {function():number=} r8_3\n * @param {function():number=} r8_4\n */\nIO.prototype.register_read_consecutive = function(port_addr, device, r8_1, r8_2, r8_3, r8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function r16_1()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8;\n    }\n    function r16_2()\n    {\n        return r8_3.call(this) |\n                r8_4.call(this) << 8;\n    }\n    function r32()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8 |\n                r8_3.call(this) << 16 |\n                r8_4.call(this) << 24;\n    }\n\n    if(r8_3 && r8_4)\n    {\n        this.register_read(port_addr, device, r8_1, r16_1, r32);\n        this.register_read(port_addr + 1, device, r8_2);\n        this.register_read(port_addr + 2, device, r8_3, r16_2);\n        this.register_read(port_addr + 3, device, r8_4);\n    }\n    else\n    {\n        this.register_read(port_addr, device, r8_1, r16_1);\n        this.register_read(port_addr + 1, device, r8_2);\n    }\n};\n\n/**\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function(number)} w8_1\n * @param {function(number)} w8_2\n * @param {function(number)=} w8_3\n * @param {function(number)=} w8_4\n */\nIO.prototype.register_write_consecutive = function(port_addr, device, w8_1, w8_2, w8_3, w8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function w16_1(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n    }\n    function w16_2(data)\n    {\n        w8_3.call(this, data & 0xFF);\n        w8_4.call(this, data >> 8 & 0xFF);\n    }\n    function w32(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n        w8_3.call(this, data >> 16 & 0xFF);\n        w8_4.call(this, data >>> 24);\n    }\n\n    if(w8_3 && w8_4)\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1, w32);\n        this.register_write(port_addr + 1, device, w8_2);\n        this.register_write(port_addr + 2, device, w8_3, w16_2);\n        this.register_write(port_addr + 3, device, w8_4);\n    }\n    else\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1);\n        this.register_write(port_addr + 1, device, w8_2);\n    }\n};\n\nIO.prototype.in_mmap_range = function(start, count)\n{\n    start >>>= 0;\n    count >>>= 0;\n\n    var end = start + count;\n\n    if(end >= this.cpu.memory_size)\n    {\n        return true;\n    }\n\n    //dbg_log(\"in_mmap_range start=\" + start + \" count=\" + count);\n    start &= ~(MMAP_BLOCK_SIZE - 1);\n\n    while(start < end)\n    {\n        if(this.cpu.in_mapped_range(start))\n        {\n            return true;\n        }\n\n        start += MMAP_BLOCK_SIZE;\n    }\n\n    return false;\n};\n\nIO.prototype.mmap_read32_shim = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_read8[aligned_addr];\n\n    return fn(addr) | fn(addr + 1) << 8 |\n            fn(addr + 2) << 16 | fn(addr + 3) << 24;\n};\n\nIO.prototype.mmap_write32_shim = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_write8[aligned_addr];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1, value >> 8 & 0xFF);\n    fn(addr + 2, value >> 16 & 0xFF);\n    fn(addr + 3, value >>> 24);\n};\n\n/**\n * @param {number} addr\n * @param {number} size\n * @param {*} read_func8\n * @param {*} write_func8\n * @param {*=} read_func32\n * @param {*=} write_func32\n */\nIO.prototype.mmap_register = function(addr, size, read_func8, write_func8, read_func32, write_func32)\n{\n    dbg_log(\"mmap_register addr=\" + h(addr >>> 0, 8) + \" size=\" + h(size, 8), LOG_IO);\n\n    dbg_assert((addr & MMAP_BLOCK_SIZE - 1) === 0);\n    dbg_assert(size && (size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    if(!read_func32)\n        read_func32 = this.mmap_read32_shim.bind(this);\n\n    if(!write_func32)\n        write_func32 = this.mmap_write32_shim.bind(this);\n\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    for(; size > 0; aligned_addr++)\n    {\n        this.cpu.memory_map_read8[aligned_addr] = read_func8;\n        this.cpu.memory_map_write8[aligned_addr] = write_func8;\n        this.cpu.memory_map_read32[aligned_addr] = read_func32;\n        this.cpu.memory_map_write32[aligned_addr] = write_func32;\n\n        size -= MMAP_BLOCK_SIZE;\n    }\n};\n\n\nIO.prototype.port_write8 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write8 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write8 port #\" + h(port_addr, 4) + \" <- \" + h(data, 2) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write8.call(entry.device, data);\n};\n\nIO.prototype.port_write16 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write16 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write16 port #\" + h(port_addr, 4) + \" <- \" + h(data, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write16.call(entry.device, data);\n};\n\nIO.prototype.port_write32 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write32 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write32 port #\" + h(port_addr, 4) + \" <- \" + h(data >>> 0, 8) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write32.call(entry.device, data);\n};\n\nIO.prototype.port_read8 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read8 === this.empty_port_read8 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read8 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read8.call(entry.device);\n    dbg_assert(value < 0x100, \"8 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read16 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read16 === this.empty_port_read16 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read16 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read16.call(entry.device);\n    dbg_assert(value < 0x10000 && value >= 0, \"16 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read32 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read32 === this.empty_port_read32 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read32 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read32.call(entry.device);\n    dbg_assert((value | 0) === value);\n    return value;\n};\n\n// via seabios ioport.h\nvar debug_port_list = {\n    0x0004: \"PORT_DMA_ADDR_2\",\n    0x0005: \"PORT_DMA_CNT_2\",\n    0x000a: \"PORT_DMA1_MASK_REG\",\n    0x000b: \"PORT_DMA1_MODE_REG\",\n    0x000c: \"PORT_DMA1_CLEAR_FF_REG\",\n    0x000d: \"PORT_DMA1_MASTER_CLEAR\",\n    0x0020: \"PORT_PIC1_CMD\",\n    0x0021: \"PORT_PIC1_DATA\",\n    0x0040: \"PORT_PIT_COUNTER0\",\n    0x0041: \"PORT_PIT_COUNTER1\",\n    0x0042: \"PORT_PIT_COUNTER2\",\n    0x0043: \"PORT_PIT_MODE\",\n    0x0060: \"PORT_PS2_DATA\",\n    0x0061: \"PORT_PS2_CTRLB\",\n    0x0064: \"PORT_PS2_STATUS\",\n    0x0070: \"PORT_CMOS_INDEX\",\n    0x0071: \"PORT_CMOS_DATA\",\n    0x0080: \"PORT_DIAG\",\n    0x0081: \"PORT_DMA_PAGE_2\",\n    0x0092: \"PORT_A20\",\n    0x00a0: \"PORT_PIC2_CMD\",\n    0x00a1: \"PORT_PIC2_DATA\",\n    0x00b2: \"PORT_SMI_CMD\",\n    0x00b3: \"PORT_SMI_STATUS\",\n    0x00d4: \"PORT_DMA2_MASK_REG\",\n    0x00d6: \"PORT_DMA2_MODE_REG\",\n    0x00da: \"PORT_DMA2_MASTER_CLEAR\",\n    0x00f0: \"PORT_MATH_CLEAR\",\n    0x0170: \"PORT_ATA2_CMD_BASE\",\n    0x01f0: \"PORT_ATA1_CMD_BASE\",\n    0x0278: \"PORT_LPT2\",\n    0x02e8: \"PORT_SERIAL4\",\n    0x02f8: \"PORT_SERIAL2\",\n    0x0374: \"PORT_ATA2_CTRL_BASE\",\n    0x0378: \"PORT_LPT1\",\n    0x03e8: \"PORT_SERIAL3\",\n    //0x03f4: \"PORT_ATA1_CTRL_BASE\",\n    0x03f0: \"PORT_FD_BASE\",\n    0x03f2: \"PORT_FD_DOR\",\n    0x03f4: \"PORT_FD_STATUS\",\n    0x03f5: \"PORT_FD_DATA\",\n    0x03f6: \"PORT_HD_DATA\",\n    0x03f7: \"PORT_FD_DIR\",\n    0x03f8: \"PORT_SERIAL1\",\n    0x0cf8: \"PORT_PCI_CMD\",\n    0x0cf9: \"PORT_PCI_REBOOT\",\n    0x0cfc: \"PORT_PCI_DATA\",\n    0x0402: \"PORT_BIOS_DEBUG\",\n    0x0510: \"PORT_QEMU_CFG_CTL\",\n    0x0511: \"PORT_QEMU_CFG_DATA\",\n    0xb000: \"PORT_ACPI_PM_BASE\",\n    0xb100: \"PORT_SMB_BASE\",\n    0x8900: \"PORT_BIOS_APM\"\n};\n\nIO.prototype.get_port_description = function(addr)\n{\n    if(debug_port_list[addr])\n    {\n        return \"  (\" + debug_port_list[addr] + \")\";\n    }\n    else\n    {\n        return \"\";\n    }\n};\n\n\n","\"use strict\";\n\n/** @constructor */\nfunction v86(bus)\n{\n    /** @type {boolean} */\n    this.running = false;\n\n    /** @type {boolean} */\n    this.stopped = false;\n\n    /** @type {CPU} */\n    this.cpu = new CPU(bus);\n\n    this.bus = bus;\n    bus.register(\"cpu-init\", this.init, this);\n    bus.register(\"cpu-run\", this.run, this);\n    bus.register(\"cpu-stop\", this.stop, this);\n    bus.register(\"cpu-restart\", this.restart, this);\n\n    this.register_tick();\n}\n\nv86.prototype.run = function()\n{\n    if(!this.running)\n    {\n        this.bus.send(\"emulator-started\");\n        this.fast_next_tick();\n    }\n};\n\nv86.prototype.do_tick = function()\n{\n    if(this.stopped)\n    {\n        this.stopped = this.running = false;\n        this.bus.send(\"emulator-stopped\");\n        return;\n    }\n\n    this.running = true;\n    var dt = this.cpu.main_run();\n\n    if(dt <= 0)\n    {\n        this.fast_next_tick();\n    }\n    else\n    {\n        this.next_tick(dt);\n    }\n};\n\nv86.prototype.stop = function()\n{\n    if(this.running)\n    {\n        this.stopped = true;\n    }\n};\n\nv86.prototype.destroy = function()\n{\n    this.unregister_tick();\n};\n\nv86.prototype.restart = function()\n{\n    this.cpu.reset();\n    this.cpu.load_bios();\n};\n\nv86.prototype.init = function(settings)\n{\n    this.cpu.init(settings, this.bus);\n    this.bus.send(\"emulator-ready\");\n};\n\nif(typeof setImmediate !== \"undefined\")\n{\n    /** @this {v86} */\n    var fast_next_tick = function()\n    {\n        setImmediate(() => { this.do_tick(); });\n    };\n\n    /** @this {v86} */\n    var register_tick = function() {};\n\n    /** @this {v86} */\n    var unregister_tick = function() {};\n}\nelse if(typeof window !== \"undefined\" && typeof postMessage !== \"undefined\")\n{\n    // setImmediate shim for the browser.\n    // TODO: Make this deactivatable, for other applications\n    //       using postMessage\n\n    /** @const */\n    let MAGIC_POST_MESSAGE = 0xAA55;\n\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        window.postMessage(MAGIC_POST_MESSAGE, \"*\");\n    };\n\n    let tick;\n\n    /** @this {v86} */\n    register_tick = function()\n    {\n        tick = e =>\n        {\n            if(e.source === window && e.data === MAGIC_POST_MESSAGE)\n            {\n                this.do_tick();\n            }\n        };\n\n        window.addEventListener(\"message\", tick, false);\n    };\n\n    /** @this {v86} */\n    unregister_tick = function()\n    {\n        window.removeEventListener(\"message\", tick);\n        tick = null;\n    };\n}\nelse\n{\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        setTimeout(() => { this.do_tick(); }, 0);\n    };\n\n    /** @this {v86} */\n    register_tick = function() {};\n\n    /** @this {v86} */\n    unregister_tick = function() {};\n}\n\nv86.prototype.fast_next_tick = fast_next_tick;\nv86.prototype.register_tick = register_tick;\nv86.prototype.unregister_tick = unregister_tick;\n\nif(typeof document !== \"undefined\" && typeof document.hidden === \"boolean\")\n{\n    /** @this {v86} */\n    var next_tick = function(t)\n    {\n        if(t < 4 || document.hidden)\n        {\n            // Avoid sleeping for 1 second (happens if page is not\n            // visible), it can break boot processes. Also don't try to\n            // sleep for less than 4ms, since the value is clamped up\n            this.fast_next_tick();\n        }\n        else\n        {\n            setTimeout(() => { this.do_tick(); }, t);\n        }\n    };\n}\nelse\n{\n    // In environments that aren't browsers, we might as well use setTimeout\n    /** @this {v86} */\n    next_tick = function(t)\n    {\n        setTimeout(() => { this.do_tick(); }, t);\n    };\n}\n\nv86.prototype.next_tick = next_tick;\n\nv86.prototype.save_state = function()\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.save_state();\n};\n\nv86.prototype.restore_state = function(state)\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.restore_state(state);\n};\n\n\nif(typeof performance === \"object\" && performance.now)\n{\n    v86.microtick = function()\n    {\n        return performance.now();\n    };\n}\n//else if(typeof process === \"object\" && process.hrtime)\n//{\n//    v86.microtick = function()\n//    {\n//        var t = process.hrtime();\n//        return t[0] * 1000 + t[1] / 1e6;\n//    };\n//}\nelse\n{\n    v86.microtick = Date.now;\n}\n","\"use strict\";\n\nvar v86util = v86util || {};\n\n// pad string with spaces on the right\nv86util.pads = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = str + \" \";\n    }\n\n    return str;\n};\n\n// pad string with zeros on the left\nv86util.pad0 = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = \"0\" + str;\n    }\n\n    return str;\n};\n\n/**\n * number to hex\n * @param {number} n\n * @param {number=} len\n * @return {string}\n */\nfunction h(n, len)\n{\n    if(!n)\n    {\n        var str = \"\";\n    }\n    else\n    {\n        var str = n.toString(16);\n    }\n\n    return \"0x\" + v86util.pad0(str.toUpperCase(), len || 1);\n}\n\n\nif(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues)\n{\n    let rand_data = new Int32Array(1);\n\n    v86util.has_rand_int = function()\n    {\n        return true;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        window.crypto.getRandomValues(rand_data);\n        return rand_data[0];\n    };\n}\nelse\n{\n    v86util.has_rand_int = function()\n    {\n        return false;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        console.assert(false);\n    };\n}\n\n\n/**\n * Synchronous access to ArrayBuffer\n * @constructor\n */\nfunction SyncBuffer(buffer)\n{\n    this.buffer = buffer;\n    this.byteLength = buffer.byteLength;\n    this.onload = undefined;\n    this.onprogress = undefined;\n}\n\nSyncBuffer.prototype.load = function()\n{\n    this.onload && this.onload({ buffer: this.buffer });\n};\n\n/**\n * @param {number} start\n * @param {number} len\n * @param {function(!Uint8Array)} fn\n */\nSyncBuffer.prototype.get = function(start, len, fn)\n{\n    dbg_assert(start + len <= this.byteLength);\n    fn(new Uint8Array(this.buffer, start, len));\n};\n\n/**\n * @param {number} start\n * @param {!Uint8Array} slice\n * @param {function()} fn\n */\nSyncBuffer.prototype.set = function(start, slice, fn)\n{\n    dbg_assert(start + slice.byteLength <= this.byteLength);\n\n    new Uint8Array(this.buffer, start, slice.byteLength).set(slice);\n    fn();\n};\n\n/**\n * @param {function(!ArrayBuffer)} fn\n */\nSyncBuffer.prototype.get_buffer = function(fn)\n{\n    fn(this.buffer);\n};\n\n\n\n(function()\n{\n    if(typeof Math.clz32 === \"function\" && Math.clz32(0) === 32 &&\n       Math.clz32(0x12345) === 15 && Math.clz32(-1) === 0)\n    {\n        /**\n         * calculate the integer logarithm base 2 of a byte\n         * @param {number} x\n         * @return {number}\n         */\n        v86util.int_log2_byte = function(x)\n        {\n            dbg_assert(x > 0);\n            dbg_assert(x < 0x100);\n\n            return 31 - Math.clz32(x);\n        };\n\n        /**\n         * calculate the integer logarithm base 2\n         * @param {number} x\n         * @return {number}\n         */\n        v86util.int_log2 = function(x)\n        {\n            dbg_assert(x > 0);\n\n            return 31 - Math.clz32(x);\n        };\n\n        return;\n    }\n\n    var int_log2_table = new Int8Array(256);\n\n    for(var i = 0, b = -2; i < 256; i++)\n    {\n        if(!(i & i - 1))\n            b++;\n\n        int_log2_table[i] = b;\n    }\n\n    /**\n     * calculate the integer logarithm base 2 of a byte\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2_byte = function(x)\n    {\n        dbg_assert(x > 0);\n        dbg_assert(x < 0x100);\n\n        return int_log2_table[x];\n    };\n\n    /**\n     * calculate the integer logarithm base 2\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2 = function(x)\n    {\n        dbg_assert(x > 0);\n\n        // http://jsperf.com/integer-log2/6\n        var tt = x >>> 16;\n\n        if(tt)\n        {\n            var t = tt >>> 8;\n            if(t)\n            {\n                return 24 + int_log2_table[t];\n            }\n            else\n            {\n                return 16 + int_log2_table[tt];\n            }\n        }\n        else\n        {\n            var t = x >>> 8;\n            if(t)\n            {\n                return 8 + int_log2_table[t];\n            }\n            else\n            {\n                return int_log2_table[x];\n            }\n        }\n    };\n})();\n\n\nv86util.mul_low = v86util.imul_low =\n    typeof Math.imul === \"function\" &&\n    Math.imul(0x01234567, 0x89abcdef) === -0x36b1b9d7 ? Math.imul : function(a, b) {\n        b |= 0;\n        return (a & 0x003fffff) * b + ((a & 0xffc00000) * b | 0) | 0;\n    };\n\n\nv86util.imul_high = function(a, b) {\n    return Math.floor(a * b / 0x100000000) | 0;\n};\n\nv86util.mul_high = function(a, b) {\n    return Math.floor((a >>> 0) * (b >>> 0) / 0x100000000) | 0;\n};\n\n/**\n * @constructor\n *\n * Queue wrapper around Uint8Array\n * Used by devices such as the PS2 controller\n */\nfunction ByteQueue(size)\n{\n    var data = new Uint8Array(size),\n        start,\n        end;\n\n    dbg_assert((size & size - 1) === 0);\n\n    this.length = 0;\n\n    this.push = function(item)\n    {\n        if(this.length === size)\n        {\n            // intentional overwrite\n        }\n        else\n        {\n            this.length++;\n        }\n\n        data[end] = item;\n        end = end + 1 & size - 1;\n    };\n\n    this.shift = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            var item = data[start];\n\n            start = start + 1 & size - 1;\n            this.length--;\n\n            return item;\n        }\n    };\n\n    this.peek = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            return data[start];\n        }\n    };\n\n    this.clear = function()\n    {\n        start = 0;\n        end = 0;\n        this.length = 0;\n    };\n\n    this.clear();\n}\n\n\n/**\n * @constructor\n *\n * Queue wrapper around Float32Array\n * Used by devices such as the sound blaster sound card\n */\nfunction FloatQueue(size)\n{\n    this.size = size;\n    this.data = new Float32Array(size);\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n\n    dbg_assert((size & size - 1) === 0);\n}\n\nFloatQueue.prototype.push = function(item)\n{\n    if(this.length === this.size)\n    {\n        // intentional overwrite\n        this.start = this.start + 1 & this.size - 1;\n    }\n    else\n    {\n        this.length++;\n    }\n\n    this.data[this.end] = item;\n    this.end = this.end + 1 & this.size - 1;\n};\n\nFloatQueue.prototype.shift = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        var item = this.data[this.start];\n\n        this.start = this.start + 1 & this.size - 1;\n        this.length--;\n\n        return item;\n    }\n};\n\nFloatQueue.prototype.shift_block = function(count)\n{\n    var slice = new Float32Array(count);\n\n    if(count > this.length)\n    {\n        count = this.length;\n    }\n    var slice_end = this.start + count;\n\n    var partial = this.data.subarray(this.start, slice_end);\n\n    slice.set(partial);\n    if(slice_end >= this.size)\n    {\n        slice_end -= this.size;\n        slice.set(this.data.subarray(0, slice_end), partial.length);\n    }\n    this.start = slice_end;\n\n    this.length -= count;\n\n    return slice;\n};\n\nFloatQueue.prototype.peek = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        return this.data[this.start];\n    }\n};\n\nFloatQueue.prototype.clear = function()\n{\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n};\n\n\n/**\n * Simple circular queue for logs\n *\n * @param {number} size\n * @constructor\n */\nfunction CircularQueue(size)\n{\n    this.data = [];\n    this.index = 0;\n    this.size = size;\n}\n\nCircularQueue.prototype.add = function(item)\n{\n    this.data[this.index] = item;\n    this.index = (this.index + 1) % this.size;\n};\n\nCircularQueue.prototype.toArray = function()\n{\n    return [].slice.call(this.data, this.index).concat([].slice.call(this.data, 0, this.index));\n};\n\nCircularQueue.prototype.clear = function()\n{\n    this.data = [];\n    this.index = 0;\n};\n\n/**\n * @param {Array} new_data\n */\nCircularQueue.prototype.set = function(new_data)\n{\n    this.data = new_data;\n    this.index = 0;\n};\n\nfunction dump_file(ab, name)\n{\n    if(!(ab instanceof Array))\n    {\n        ab = [ab];\n    }\n\n    var blob = new Blob(ab);\n    download(blob, name);\n}\n\nfunction download(file_or_blob, name)\n{\n    var a = document.createElement(\"a\");\n    a[\"download\"] = name;\n    a.href = window.URL.createObjectURL(file_or_blob);\n    a.dataset[\"downloadurl\"] = [\"application/octet-stream\", a[\"download\"], a.href].join(\":\");\n\n    if(document.createEvent)\n    {\n        var ev = document.createEvent(\"MouseEvent\");\n        ev.initMouseEvent(\"click\", true, true, window,\n                          0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        a.dispatchEvent(ev);\n    }\n    else\n    {\n        a.click();\n    }\n\n    window.URL.revokeObjectURL(a.href);\n}\n","\"use strict\";\n\n/** @const */\nvar FPU_LOG_OP = false;\n\nvar\n    /** @const */\n    FPU_C0 = 0x100,\n    /** @const */\n    FPU_C1 = 0x200,\n    /** @const */\n    FPU_C2 = 0x400,\n    /** @const */\n    FPU_C3 = 0x4000,\n    /** @const */\n    FPU_RESULT_FLAGS = FPU_C0 | FPU_C1 | FPU_C2 | FPU_C3,\n    /** @const */\n    FPU_STACK_TOP = 0x3800;\n\nvar\n    // precision, round & infinity control\n    /** @const */\n    FPU_PC = 3 << 8,\n    /** @const */\n    FPU_RC = 3 << 10,\n    /** @const */\n    FPU_IF = 1 << 12;\n\n// exception bits in the status word\nvar\n    /** @const */\n    FPU_EX_SF = 1 << 6,\n    /** @const */\n    FPU_EX_P = 1 << 5,\n    /** @const */\n    FPU_EX_U = 1 << 4,\n    /** @const */\n    FPU_EX_O = 1 << 3,\n    /** @const */\n    FPU_EX_Z = 1 << 2,\n    /** @const */\n    FPU_EX_D = 1 << 1,\n    /** @const */\n    FPU_EX_I = 1 << 0;\n\nvar\n    /** @const */\n    TWO_POW_63 =  0x8000000000000000;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction FPU(cpu)\n{\n    // TODO:\n    // - Precision Control\n    // - QNaN, unordered comparison\n    // - Exceptions\n\n    this.cpu = cpu;\n\n    // Why no Float80Array :-(\n    this.st = new Float64Array(8);\n\n    // used for conversion\n    /** @const */ this.float32 = new Float32Array(1);\n    /** @const */ this.float32_byte = new Uint8Array(this.float32.buffer);\n    /** @const */ this.float32_int = new Int32Array(this.float32.buffer);\n    /** @const */ this.float64 = new Float64Array(1);\n    /** @const */ this.float64_byte = new Uint8Array(this.float64.buffer);\n    /** @const */ this.float64_int = new Int32Array(this.float64.buffer);\n\n    /** @const */ this.st8 = new Uint8Array(this.st.buffer);\n    /** @const */ this.st32 = new Int32Array(this.st.buffer);\n\n\n    // bitmap of which stack registers are empty\n    this.stack_empty = 0xff;\n    this.stack_ptr = 0;\n\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_ip_selector = 0;\n    this.fpu_opcode = 0;\n    this.fpu_dp = 0;\n    this.fpu_dp_selector = 0;\n\n    /** @const */\n    this.indefinite_nan = NaN;\n\n    /** @const */\n    this.constants = new Float64Array([\n        1, Math.log(10) / Math.LN2, Math.LOG2E, Math.PI,\n        Math.log(2) / Math.LN10, Math.LN2, 0\n    ]);\n\n}\n\nFPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.st;\n    state[1] = this.stack_empty;\n    state[2] = this.stack_ptr;\n    state[3] = this.control_word;\n    state[4] = this.fpu_dp_selector;\n    state[5] = this.fpu_ip;\n    state[6] = this.fpu_ip_selector;\n    state[7] = this.fpu_dp;\n    state[8] = this.fpu_dp_selector;\n    state[9] = this.fpu_opcode;\n\n    return state;\n};\n\nFPU.prototype.set_state = function(state)\n{\n    this.st.set(state[0]);\n    this.stack_empty = state[1];\n    this.stack_ptr = state[2];\n    this.control_word = state[3];\n    this.fpu_dp_selector = state[4];\n    this.fpu_ip = state[5];\n    this.fpu_ip_selector = state[6];\n    this.fpu_dp = state[7];\n    this.fpu_dp_selector = state[8];\n    this.fpu_opcode = state[9];\n};\n\nFPU.prototype.fpu_unimpl = function()\n{\n    dbg_trace();\n    if(DEBUG) throw \"fpu: unimplemented\";\n    else this.cpu.trigger_ud();\n}\n\nFPU.prototype.stack_fault = function()\n{\n    // TODO: Interrupt\n    this.status_word |= FPU_EX_SF | FPU_EX_I;\n}\n\nFPU.prototype.invalid_arithmatic = function()\n{\n    this.status_word |= FPU_EX_I;\n}\n\nFPU.prototype.fcom = function(y)\n{\n    var x = this.get_st0();\n\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === y)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else\n    {\n        this.status_word |= FPU_C0 | FPU_C2 | FPU_C3;\n    }\n}\n\nFPU.prototype.fucom = function(y)\n{\n    // TODO\n    this.fcom(y);\n}\n\n\nFPU.prototype.fcomi = function(y)\n{\n    var x = this.st[this.stack_ptr];\n\n    this.cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    this.cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        this.cpu.flags |= flag_zero;\n    }\n    else\n    {\n        this.cpu.flags |= 1 | flag_parity | flag_zero;\n    }\n}\n\nFPU.prototype.fucomi = function(y)\n{\n    // TODO\n    this.fcomi(y);\n}\n\nFPU.prototype.ftst = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(isNaN(x))\n    {\n        this.status_word |= FPU_C3 | FPU_C2 | FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x < 0)\n    {\n        this.status_word |= FPU_C0;\n    }\n\n    // TODO: unordered (x is nan, etc)\n}\n\nFPU.prototype.fxam = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n    this.status_word |= this.sign(0) << 9;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word |= FPU_C3 | FPU_C0;\n    }\n    else if(isNaN(x))\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x === Infinity || x === -Infinity)\n    {\n        this.status_word |= FPU_C2 | FPU_C0;\n    }\n    else\n    {\n        this.status_word |= FPU_C2;\n    }\n    // TODO:\n    // Unsupported, Denormal\n}\n\nFPU.prototype.finit = function()\n{\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_dp = 0;\n    this.fpu_opcode = 0;\n\n    this.stack_empty = 0xFF;\n    this.stack_ptr = 0;\n}\n\nFPU.prototype.load_status_word = function()\n{\n    return this.status_word & ~(7 << 11) | this.stack_ptr << 11;\n}\n\nFPU.prototype.set_status_word = function(sw)\n{\n    this.status_word = sw & ~(7 << 11);\n    this.stack_ptr = sw >> 11 & 7;\n}\n\nFPU.prototype.load_tag_word = function()\n{\n    var tag_word = 0,\n        value;\n\n    for(var i = 0; i < 8; i++)\n    {\n        value = this.st[i];\n\n        if(this.stack_empty >> i & 1)\n        {\n            tag_word |= 3 << (i << 1);\n        }\n        else if(value === 0)\n        {\n            tag_word |= 1 << (i << 1);\n        }\n        else if(!isFinite(value))\n        {\n            tag_word |= 2 << (i << 1);\n        }\n    }\n\n    //dbg_log(\"load  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty) + \" sp=\" + this.stack_ptr, LOG_FPU);\n\n    return tag_word;\n}\n\nFPU.prototype.set_tag_word = function(tag_word)\n{\n    this.stack_empty = 0;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.stack_empty |= (tag_word >> i) & (tag_word >> i + 1) & 1 << i;\n    }\n\n    //dbg_log(\"set_tag_word  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty), LOG_FPU);\n}\n\nFPU.prototype.fstenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.cpu.writable_or_pagefault(addr, 26);\n\n        this.cpu.safe_write16(addr, this.control_word);\n\n        this.cpu.safe_write16(addr + 4, this.load_status_word());\n        this.cpu.safe_write16(addr + 8, this.load_tag_word());\n\n        this.cpu.safe_write32(addr + 12, this.fpu_ip);\n        this.cpu.safe_write16(addr + 16, this.fpu_ip_selector);\n        this.cpu.safe_write16(addr + 18, this.fpu_opcode);\n        this.cpu.safe_write32(addr + 20, this.fpu_dp);\n        this.cpu.safe_write16(addr + 24, this.fpu_dp_selector);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fldenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.control_word = this.cpu.safe_read16(addr);\n\n        this.set_status_word(this.cpu.safe_read16(addr + 4));\n        this.set_tag_word(this.cpu.safe_read16(addr + 8));\n\n        this.fpu_ip = this.cpu.safe_read32s(addr + 12);\n        this.fpu_ip_selector = this.cpu.safe_read16(addr + 16);\n        this.fpu_opcode = this.cpu.safe_read16(addr + 18);\n        this.fpu_dp = this.cpu.safe_read32s(addr + 20);\n        this.fpu_dp_selector = this.cpu.safe_read16(addr + 24);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fsave = function(addr)\n{\n    this.cpu.writable_or_pagefault(addr, 108);\n\n    this.fstenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.store_m80(addr, this.st[this.stack_ptr + i & 7]);\n        addr += 10;\n    }\n\n    //dbg_log(\"save st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n\n    this.finit();\n}\n\nFPU.prototype.frstor = function(addr)\n{\n    this.fldenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.st[(i + this.stack_ptr) & 7] = this.load_m80(addr);\n        addr += 10;\n    }\n\n    //dbg_log(\"rstor st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n}\n\nFPU.prototype.fxtract = function()\n{\n    this.float64[0] = this.get_st0();\n\n    var exponent = ((this.float64_byte[7] & 0x7F) << 4 | this.float64_byte[6] >> 4) - 0x3FF;\n\n    this.float64_byte[7] = 0x3F | (this.float64_byte[7] & 0x80);\n    this.float64_byte[6] |= 0xF0;\n\n    this.st[this.stack_ptr] = exponent;\n    this.push(this.float64[0]);\n};\n\nFPU.prototype.integer_round = function(f)\n{\n    var rc = this.control_word >> 10 & 3;\n    return this.cpu.integer_round(f, rc);\n}\n\nFPU.prototype.truncate = function(x)\n{\n    return x > 0 ? Math.floor(x) : Math.ceil(x);\n}\n\nFPU.prototype.push = function(x)\n{\n    this.stack_ptr = this.stack_ptr - 1 & 7;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_empty &= ~(1 << this.stack_ptr);\n        this.st[this.stack_ptr] = x;\n    }\n    else\n    {\n        this.status_word |= FPU_C1;\n        this.stack_fault();\n        this.st[this.stack_ptr] = this.indefinite_nan;\n    }\n}\n\nFPU.prototype.pop = function()\n{\n    this.stack_empty |= 1 << this.stack_ptr;\n    this.stack_ptr = this.stack_ptr + 1 & 7;\n}\n\nFPU.prototype.get_sti = function(i)\n{\n    dbg_assert(typeof i === \"number\" && i >= 0 && i < 8);\n\n    i = i + this.stack_ptr & 7;\n\n    if(this.stack_empty >> i & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[i];\n    }\n}\n\nFPU.prototype.get_st0 = function()\n{\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[this.stack_ptr];\n    }\n}\n\nFPU.prototype.load_m80 = function(addr)\n{\n    var exponent = this.cpu.safe_read16(addr + 8),\n        sign,\n        low = this.cpu.safe_read32s(addr) >>> 0,\n        high = this.cpu.safe_read32s(addr + 4) >>> 0;\n\n    sign = exponent >> 15;\n    exponent &= ~0x8000;\n\n    if(exponent === 0)\n    {\n        // TODO: denormal numbers\n        return 0;\n    }\n\n    if(exponent < 0x7FFF)\n    {\n        exponent -= 0x3FFF;\n    }\n    else\n    {\n        // TODO: NaN, Infinity\n        //dbg_log(\"Load m80 TODO\", LOG_FPU);\n        this.float64_byte[7] = 0x7F | sign << 7;\n        this.float64_byte[6] = 0xF0 | high >> 30 << 3 & 0x08;\n\n        this.float64_byte[5] = 0;\n        this.float64_byte[4] = 0;\n\n        this.float64_int[0] = 0;\n\n        return this.float64[0];\n    }\n\n    // Note: some bits might be lost at this point\n    var mantissa = low + 0x100000000 * high;\n\n    if(sign)\n    {\n        mantissa = -mantissa;\n    }\n\n    //console.log(\"m: \" + mantissa);\n    //console.log(\"e: \" + exponent);\n    //console.log(\"s: \" + this.sign);\n    //console.log(\"f: \" + mantissa * Math.pow(2, exponent - 63));\n\n    // Simply compute the 64 bit floating point number.\n    // An alternative write the mantissa, sign and exponent in the\n    // float64_byte and return float64[0]\n\n    return mantissa * Math.pow(2, exponent - 63);\n}\n\nFPU.prototype.store_m80 = function(addr, n)\n{\n    this.float64[0] = n;\n\n    var sign = this.float64_byte[7] & 0x80,\n        exponent = (this.float64_byte[7] & 0x7f) << 4 | this.float64_byte[6] >> 4,\n        low,\n        high;\n\n    if(exponent === 0x7FF)\n    {\n        // all bits set (NaN and infinity)\n        exponent = 0x7FFF;\n        low = 0;\n        high = 0x80000000 | (this.float64_int[1] & 0x80000) << 11;\n    }\n    else if(exponent === 0)\n    {\n        // zero and denormal numbers\n        // Just assume zero for now\n        low = 0;\n        high = 0;\n    }\n    else\n    {\n        exponent += 0x3FFF - 0x3FF;\n\n        // does the mantissa need to be adjusted?\n        low = this.float64_int[0] << 11;\n        high = 0x80000000 | (this.float64_int[1] & 0xFFFFF) << 11 | (this.float64_int[0] >>> 21);\n    }\n\n    dbg_assert(exponent >= 0 && exponent < 0x8000);\n\n    this.cpu.safe_write32(addr, low);\n    this.cpu.safe_write32(addr + 4, high);\n\n    this.cpu.safe_write16(addr + 8, sign << 8 | exponent);\n}\n\nFPU.prototype.load_m64 = function(addr)\n{\n    var low = this.cpu.safe_read32s(addr),\n        high = this.cpu.safe_read32s(addr + 4);\n\n    this.float64_int[0] = low;\n    this.float64_int[1] = high;\n\n    return this.float64[0];\n};\n\nFPU.prototype.store_m64 = function(addr, i)\n{\n    this.cpu.writable_or_pagefault(addr, 8);\n\n    this.float64[0] = this.get_sti(i);\n\n    this.cpu.safe_write32(addr, this.float64_int[0]);\n    this.cpu.safe_write32(addr + 4, this.float64_int[1]);\n};\n\nFPU.prototype.load_m32 = function(addr)\n{\n    this.float32_int[0] = this.cpu.safe_read32s(addr);\n\n    return this.float32[0];\n};\n\nFPU.prototype.store_m32 = function(addr, x)\n{\n    this.float32[0] = x;\n\n    this.cpu.safe_write32(addr, this.float32_int[0]);\n};\n\n// sign of a number on the stack\nFPU.prototype.sign = function(i)\n{\n    return this.st8[(this.stack_ptr + i & 7) << 3 | 7] >> 7;\n};\n\n\nFPU.prototype.dbg_log_fpu_op = function(op, imm8)\n{\n    if(!FPU_LOG_OP)\n    {\n        return;\n    }\n\n    if(imm8 >= 0xC0)\n    {\n        dbg_log(h(op, 2) + \" \" + h(imm8, 2) + \"/\" + (imm8 >> 3 & 7) + \"/\" + (imm8 & 7) +\n                \" @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n    else\n    {\n        dbg_log(h(op, 2) + \" /\" + (imm8 >> 3 & 7) +\n                \"     @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n}\n\n\nFPU.prototype.fwait = function()\n{\n    // NOP unless FPU instructions run in parallel with CPU instructions\n};\n\n\nFPU.prototype.op_D8_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + sti;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * sti;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D8_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.load_m32(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var sti = this.get_sti(low);\n            this.push(sti);\n            break;\n        case 1:\n            // fxch\n            var sti = this.get_sti(low);\n\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            this.st[this.stack_ptr] = sti;\n            break;\n        case 2:\n            switch(low)\n            {\n                case 0:\n                    // fnop\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 3:\n            // fstp1\n            this.fpu_unimpl();\n            break;\n        case 4:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fchs\n                    this.st[this.stack_ptr] = -st0;\n                    break;\n                case 1:\n                    // fabs\n                    this.st[this.stack_ptr] = Math.abs(st0);\n                    break;\n                case 4:\n                    this.ftst(st0);\n                    break;\n                case 5:\n                    this.fxam(st0);\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.push(this.constants[low]);\n            break;\n        case 6:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // f2xm1\n                    this.st[this.stack_ptr] = Math.pow(2, st0) - 1;\n                    break;\n                case 1:\n                    // fyl2x\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    // fptan\n                    this.st[this.stack_ptr] = Math.tan(st0);\n                    this.push(1); // no bug: push constant 1\n                    break;\n                case 3:\n                    // fpatan\n                    this.st[this.stack_ptr + 1 & 7] = Math.atan2(this.get_sti(1), st0);\n                    this.pop();\n                    break;\n                case 4:\n                    this.fxtract();\n                    break;\n                case 5:\n                    // fprem1\n                    this.st[this.stack_ptr] = st0 % this.get_sti(1);\n                    break;\n                case 6:\n                    // fdecstp\n                    this.stack_ptr = this.stack_ptr - 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                case 7:\n                    // fincstp\n                    this.stack_ptr = this.stack_ptr + 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        case 7:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fprem\n                    var st1 = this.get_sti(1);\n                    var fprem_quotient = Math.trunc(st0 / st1);\n                    this.st[this.stack_ptr] = st0 % st1;\n\n                    this.status_word &= ~(FPU_C0 | FPU_C1 | FPU_C3);\n                    if (fprem_quotient & 1) {\n                        this.status_word |= FPU_C1;\n                    }\n                    if (fprem_quotient & (1 << 1)) {\n                        this.status_word |= FPU_C3;\n                    }\n                    if (fprem_quotient & (1 << 2)) {\n                        this.status_word |= FPU_C0;\n                    }\n\n                    this.status_word &= ~FPU_C2;\n                    break;\n                case 1:\n                    // fyl2xp1: y * log2(x+1) and pop\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0 + 1) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    this.st[this.stack_ptr] = Math.sqrt(st0);\n                    break;\n                case 3:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    this.push(Math.cos(st0));\n                    break;\n                case 4:\n                    // frndint\n                    this.st[this.stack_ptr] = this.integer_round(st0);\n                    break;\n                case 5:\n                    // fscale\n                    this.st[this.stack_ptr] = st0 * Math.pow(2, this.truncate(this.get_sti(1)));\n                    break;\n                case 6:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    break;\n                case 7:\n                    this.st[this.stack_ptr] = Math.cos(st0);\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m32(addr);\n            this.push(data);\n            break;\n        case 1:\n            // not defined\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m32(addr, this.get_st0());\n            break;\n        case 3:\n            // fstp\n            this.store_m32(addr, this.get_st0());\n            this.pop();\n            break;\n        case 4:\n            this.fldenv(addr);\n            break;\n        case 5:\n            // fldcw\n            var word = this.cpu.safe_read16(addr);\n            this.control_word = word;\n            break;\n        case 6:\n            this.fstenv(addr);\n            break;\n        case 7:\n            // fstcw\n            this.cpu.safe_write16(addr, this.control_word);\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DA_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovb\n            if(this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmove\n            if(this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovbe\n            if(this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovu\n            if(this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 5:\n            if(low === 1)\n            {\n                // fucompp\n                this.fucom(this.get_sti(1));\n                this.pop();\n                this.pop();\n            }\n            else\n            {\n                dbg_log(mod); this.fpu_unimpl();\n            }\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DA_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.cpu.safe_read32s(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DB_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovnb\n            if(!this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmovne\n            if(!this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovnbe\n            if(!this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovnu\n            if(!this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 4:\n            if(imm8 === 0xE3)\n            {\n                this.finit();\n            }\n            else if(imm8 === 0xE4)\n            {\n                // fsetpm\n                // treat as nop\n            }\n            else if(imm8 === 0xE1)\n            {\n                // fdisi\n                // also treat as nop\n            }\n            else if(imm8 === 0xE2)\n            {\n                // fclex\n                this.status_word = 0;\n            }\n            else\n            {\n                dbg_log(h(imm8));\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.fucomi(this.get_sti(low));\n            break;\n        case 6:\n            this.fcomi(this.get_sti(low));\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DB_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fild\n            var int32 = this.cpu.safe_read32s(addr);\n            this.push(int32);\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                // TODO: Invalid operation\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            this.pop();\n            break;\n        case 5:\n            // fld\n            this.push(this.load_m80(addr));\n            break;\n        case 7:\n            // fstp\n            this.cpu.writable_or_pagefault(addr, 10);\n            this.store_m80(addr, this.get_st0());\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DC_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmul\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsubr\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsub\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivr\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdiv\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DC_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var\n        mod = imm8 >> 3 & 7,\n        m64 = this.load_m64(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m64;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m64;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m64);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m64);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m64;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m64 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m64;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m64 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DD_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // ffree\n            this.stack_empty |= 1 << (this.stack_ptr + low & 7);\n            break;\n        case 2:\n            // fst\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            break;\n        case 3:\n            // fstp\n            if(low === 0)\n            {\n                this.pop();\n            }\n            else\n            {\n                this.st[this.stack_ptr + low & 7] = this.get_st0();\n                this.pop();\n            }\n            break;\n        case 4:\n            this.fucom(this.get_sti(low));\n            break;\n        case 5:\n            // fucomp\n            this.fucom(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DD_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m64(addr);\n            this.push(data);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m64(addr, 0);\n            break;\n        case 3:\n            // fstp\n            this.store_m64(addr, 0);\n            this.pop();\n            break;\n        case 4:\n            this.frstor(addr);\n            break;\n        case 5:\n            // nothing\n            this.fpu_unimpl();\n            break;\n        case 6:\n            // fsave\n            this.fsave(addr);\n            break;\n        case 7:\n            // fnstsw / store status word\n            this.cpu.safe_write16(addr, this.load_status_word());\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\n\nFPU.prototype.op_DE_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // faddp\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmulp\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcomp\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcompp\n            if(low === 1)\n            {\n                this.fcom(this.st[low_ptr]);\n                this.pop();\n            }\n            else\n            {\n                // not a valid encoding\n                dbg_log(mod);\n                this.fpu_unimpl();\n            }\n            break;\n        case 4:\n            // fsubrp\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubp\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivrp\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivp\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n\n    this.pop();\n};\n\nFPU.prototype.op_DE_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m16;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m16;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m16);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m16);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m16;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m16 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m16;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m16 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DF_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 4:\n            if(imm8 === 0xE0)\n            {\n                // fnstsw\n                this.cpu.reg16[reg_ax] = this.load_status_word();\n            }\n            else\n            {\n                dbg_log(imm8);\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            // fucomip\n            this.fucomi(this.get_sti(low));\n            this.pop();\n            break;\n        case 6:\n            // fcomip\n            this.fcomi(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DF_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            var m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n            this.push(m16);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            this.pop();\n            break;\n        case 4:\n            // fbld\n            this.fpu_unimpl();\n            break;\n        case 5:\n            // fild\n            var low = this.cpu.safe_read32s(addr) >>> 0,\n                high = this.cpu.safe_read32s(addr + 4);\n\n            var m64 = low + 0x100000000 * high;\n\n            this.push(m64);\n            break;\n        case 6:\n            // fbstp\n            this.fpu_unimpl();\n            break;\n        case 7:\n            this.cpu.writable_or_pagefault(addr, 8);\n\n            // fistp\n            var st0 = this.integer_round(this.get_st0()),\n                st0_low,\n                st0_high;\n\n            if(st0 < TWO_POW_63 && st0 >= -TWO_POW_63)\n            {\n                st0_low = st0 | 0;\n                st0_high = st0 / 0x100000000 | 0;\n\n                if(st0_high === 0 && st0 < 0)\n                    st0_high = -1;\n            }\n            else\n            {\n                // write 0x8000000000000000\n                st0_low  = 0;\n                st0_high = 0x80000000 | 0;\n                this.invalid_arithmatic();\n            }\n\n            this.cpu.safe_write32(addr, st0_low);\n            this.cpu.safe_write32(addr + 4, st0_high);\n\n            this.pop();\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n","\"use strict\";\n\n/** @param {number=} length */\nfunction hex_dump(buffer, length)\n{\n    var result = [];\n    length = length || buffer.byteLength;\n    var addr = 0;\n    var line, byt;\n\n    for(var i = 0; i < length >> 4; i++)\n    {\n        line = h(addr + (i << 4), 5) + \"   \";\n\n        for(var j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += h(byt, 2) + \" \";\n        }\n\n        line += \"  \";\n\n        for(j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n        }\n\n        result.push(line);\n    }\n\n    return \"\\n\" + result.join(\"\\n\");\n}\n\n/** @const */\nvar CDROM_SECTOR_SIZE = 2048;\n/** @const */\nvar HD_SECTOR_SIZE = 512;\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {boolean} is_cd\n * @param {number} nr\n * @param {BusConnector} bus\n * */\nfunction IDEDevice(cpu, master_buffer, slave_buffer, is_cd, nr, bus)\n{\n    this.master = new IDEInterface(this, cpu, master_buffer, is_cd, nr, 0, bus);\n    this.slave = new IDEInterface(this, cpu, slave_buffer, is_cd, nr, 1, bus);\n\n    this.current_interface = this.master;\n\n    this.cpu = cpu;\n\n    // gets set via PCI in seabios, likely doesn't matter\n    if(nr === 0)\n    {\n        this.ata_port = 0x1F0;\n        this.irq = 14;\n\n        this.pci_id = 0x1E << 3;\n    }\n    else if(nr === 1)\n    {\n        this.ata_port = 0x170;\n        this.irq = 15;\n\n        this.pci_id = 0x1F << 3;\n    }\n    else\n    {\n        dbg_assert(false, \"IDE device with nr \" + nr + \" ignored\", LOG_DISK);\n    }\n\n    // alternate status, starting at 3f4/374\n    /** @type {number} */\n    this.ata_port_high = this.ata_port | 0x204;\n\n    /** @type {number} */\n    this.master_port = 0xB400;\n\n    this.pci_space = [\n        0x86, 0x80, 0x10, 0x70, 0x05, 0x00, 0xA0, 0x02,\n        0x00, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,\n        this.ata_port & 0xFF | 1,      this.ata_port >> 8, 0x00, 0x00,\n        this.ata_port_high & 0xFF | 1, this.ata_port_high >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, // second device\n        0x00, 0x00, 0x00, 0x00, // second device\n        this.master_port & 0xFF | 1,   this.master_port >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x43, 0x10, 0xD4, 0x82,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, this.irq, 0x01, 0x00, 0x00,\n\n        // 0x40\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        // 0x80\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    this.pci_bars = [\n        {\n            size: 8,\n        },\n        {\n            size: 4,\n        },\n        undefined,\n        undefined,\n        {\n            size: 0x10,\n        },\n    ];\n    this.name = \"ide\" + nr;\n\n    /** @type {number} */\n    this.device_control = 2;\n\n    // status\n    cpu.io.register_read(this.ata_port | 7, this, function() {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        return this.read_status();\n    });\n    cpu.io.register_read(this.ata_port_high | 2, this, this.read_status);\n\n    cpu.io.register_write(this.ata_port_high | 2, this, this.write_control);\n    cpu.io.register_read(this.ata_port | 0, this, function()\n    {\n        return this.current_interface.read_data(1);\n    }, function()\n    {\n        return this.current_interface.read_data(2);\n    }, function()\n    {\n        return this.current_interface.read_data(4);\n    });\n\n    cpu.io.register_read(this.ata_port | 1, this, function()\n    {\n        dbg_log(\"Read error: \" + h(this.current_interface.error & 0xFF) +\n                \" slave=\" + (this.current_interface === this.slave), LOG_DISK);\n        return this.current_interface.error;\n    });\n    cpu.io.register_read(this.ata_port | 2, this, function()\n    {\n        dbg_log(\"Read bytecount: \" + h(this.current_interface.bytecount & 0xFF), LOG_DISK);\n        return this.current_interface.bytecount & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 3, this, function()\n    {\n        dbg_log(\"Read sector: \" + h(this.current_interface.sector & 0xFF), LOG_DISK);\n        return this.current_interface.sector & 0xFF;\n    });\n\n    cpu.io.register_read(this.ata_port | 4, this, function()\n    {\n        dbg_log(\"Read 1F4: \" + h(this.current_interface.cylinder_low & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_low & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 5, this, function()\n    {\n        dbg_log(\"Read 1F5: \" + h(this.current_interface.cylinder_high & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_high & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 6, this, function()\n    {\n        dbg_log(\"Read 1F6\", LOG_DISK);\n        return this.current_interface.drive_head;\n    });\n\n    cpu.io.register_write(this.ata_port | 0, this, function(data)\n    {\n        this.current_interface.write_data_port8(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port16(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port32(data);\n    });\n\n    cpu.io.register_write(this.ata_port | 1, this, function(data)\n    {\n        dbg_log(\"1F1/lba_count: \" + h(data), LOG_DISK);\n        this.master.lba_count = (this.master.lba_count << 8 | data) & 0xFFFF;\n        this.slave.lba_count = (this.slave.lba_count << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 2, this, function(data)\n    {\n        dbg_log(\"1F2/bytecount: \" + h(data), LOG_DISK);\n        this.master.bytecount = (this.master.bytecount << 8 | data) & 0xFFFF;\n        this.slave.bytecount = (this.slave.bytecount << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 3, this, function(data)\n    {\n        dbg_log(\"1F3/sector: \" + h(data), LOG_DISK);\n        this.master.sector = (this.master.sector << 8 | data) & 0xFFFF;\n        this.slave.sector = (this.slave.sector << 8 | data) & 0xFFFF;\n    });\n\n    cpu.io.register_write(this.ata_port | 4, this, function(data)\n    {\n        dbg_log(\"1F4/sector low: \" + h(data), LOG_DISK);\n        this.master.cylinder_low = (this.master.cylinder_low << 8 | data) & 0xFFFF;\n        this.slave.cylinder_low = (this.slave.cylinder_low << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 5, this, function(data)\n    {\n        dbg_log(\"1F5/sector high: \" + h(data), LOG_DISK);\n        this.master.cylinder_high = (this.master.cylinder_high << 8 | data) & 0xFFFF;\n        this.slave.cylinder_high = (this.slave.cylinder_high << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 6, this, function(data)\n    {\n        var slave = data & 0x10;\n        var mode = data & 0xE0;\n\n        dbg_log(\"1F6/drive: \" + h(data, 2), LOG_DISK);\n\n        if(slave)\n        {\n            dbg_log(\"Slave\", LOG_DISK);\n            this.current_interface = this.slave;\n        }\n        else\n        {\n            this.current_interface = this.master;\n        }\n\n        this.master.drive_head = data;\n        this.slave.drive_head = data;\n        this.master.is_lba = this.slave.is_lba = data >> 6 & 1;\n        this.master.head = this.slave.head = data & 0xF;\n    });\n\n    /** @type {number} */\n    this.prdt_addr = 0;\n\n    /** @type {number} */\n    this.dma_status = 0;\n\n    /** @type {number} */\n    this.dma_command = 0;\n\n    cpu.io.register_write(this.ata_port | 7, this, function(data)\n    {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        this.current_interface.ata_command(data);\n    });\n\n    cpu.io.register_read(this.master_port | 4, this, undefined, undefined, this.dma_read_addr);\n    cpu.io.register_write(this.master_port | 4, this, undefined, undefined, this.dma_set_addr);\n\n    cpu.io.register_read(this.master_port, this,\n                         this.dma_read_command8, undefined, this.dma_read_command);\n    cpu.io.register_write(this.master_port, this,\n                          this.dma_write_command8, undefined, this.dma_write_command);\n\n    cpu.io.register_read(this.master_port | 2, this, this.dma_read_status);\n    cpu.io.register_write(this.master_port | 2, this, this.dma_write_status);\n\n    cpu.io.register_read(this.master_port | 0x8, this, function() {\n        dbg_log(\"DMA read 0x8\", LOG_DISK); return 0;\n    });\n    cpu.io.register_read(this.master_port | 0xA, this, function() {\n        dbg_log(\"DMA read 0xA\", LOG_DISK); return 0;\n    });\n\n    cpu.devices.pci.register_device(this);\n\n    DEBUG && Object.seal(this);\n}\n\nIDEDevice.prototype.read_status = function()\n{\n    if(this.current_interface.buffer)\n    {\n        var ret = this.current_interface.status;\n        dbg_log(\"ATA read status: \" + h(ret, 2), LOG_DISK);\n        return ret;\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nIDEDevice.prototype.write_control = function(data)\n{\n    dbg_log(\"set device control: \" + h(data, 2) + \" interrupts \" +\n            ((data & 2) ? \"disabled\" : \"enabled\"), LOG_DISK);\n\n    if(data & 4)\n    {\n        dbg_log(\"Reset via control port\", LOG_DISK);\n\n        this.cpu.device_lower_irq(this.irq);\n\n        this.master.device_reset();\n        this.slave.device_reset();\n    }\n\n    this.device_control = data;\n};\n\nIDEDevice.prototype.dma_read_addr = function()\n{\n    dbg_log(\"dma get address: \" + h(this.prdt_addr, 8), LOG_DISK);\n    return this.prdt_addr;\n};\n\nIDEDevice.prototype.dma_set_addr = function(data)\n{\n    dbg_log(\"dma set address: \" + h(data, 8), LOG_DISK);\n    this.prdt_addr = data;\n};\n\nIDEDevice.prototype.dma_read_status = function()\n{\n    dbg_log(\"DMA read status: \" + h(this.dma_status), LOG_DISK);\n    return this.dma_status;\n};\n\nIDEDevice.prototype.dma_write_status = function(value)\n{\n    dbg_log(\"DMA set status: \" + h(value), LOG_DISK);\n    this.dma_status &= ~(value & 6);\n};\n\nIDEDevice.prototype.dma_read_command = function()\n{\n    return this.dma_read_command8() | this.dma_read_status() << 16;\n};\n\nIDEDevice.prototype.dma_read_command8 = function()\n{\n    dbg_log(\"DMA read command: \" + h(this.dma_command), LOG_DISK);\n    return this.dma_command;\n};\n\nIDEDevice.prototype.dma_write_command = function(value)\n{\n    dbg_log(\"DMA write command: \" + h(value), LOG_DISK);\n\n    this.dma_write_command8(value & 0xFF);\n    this.dma_write_status(value >> 16 & 0xFF);\n};\n\nIDEDevice.prototype.dma_write_command8 = function(value)\n{\n    dbg_log(\"DMA write command8: \" + h(value), LOG_DISK);\n\n    let old_command = this.dma_command;\n    this.dma_command = value & 0x9;\n\n    if((old_command & 1) === (value & 1))\n    {\n        return;\n    }\n\n    if((value & 1) === 0)\n    {\n        this.dma_status &= ~1;\n        return;\n    }\n\n    this.dma_status |= 1;\n\n    switch(this.current_interface.current_command)\n    {\n        case 0x25:\n        case 0xC8:\n            this.current_interface.do_ata_read_sectors_dma();\n            break;\n\n        case 0xCA:\n        case 0x35:\n            this.current_interface.do_ata_write_sectors_dma();\n            break;\n\n        case 0xA0:\n            this.current_interface.do_atapi_dma();\n            break;\n\n        default:\n            dbg_log(\"Spurious dma command write, current command: \" +\n                    h(this.current_interface.current_command), LOG_DISK);\n            dbg_assert(false);\n    }\n};\n\nIDEDevice.prototype.push_irq = function()\n{\n    if((this.device_control & 2) === 0)\n    {\n        dbg_log(\"push irq\", LOG_DISK);\n        this.dma_status |= 4;\n        this.cpu.device_raise_irq(this.irq);\n    }\n};\n\nIDEDevice.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.master;\n    state[1] = this.slave;\n    state[2] = this.ata_port;\n    state[3] = this.irq;\n    state[4] = this.pci_id;\n    state[5] = this.ata_port_high;\n    state[6] = this.master_port;\n    state[7] = this.name;\n    state[8] = this.device_control;\n    state[9] = this.prdt_addr;\n    state[10] = this.dma_status;\n    state[11] = this.current_interface === this.master;\n    state[12] = this.dma_command;\n    return state;\n};\n\nIDEDevice.prototype.set_state = function(state)\n{\n    this.master = state[0];\n    this.slave = state[1];\n    this.ata_port = state[2];\n    this.irq = state[3];\n    this.pci_id = state[4];\n    this.ata_port_high = state[5];\n    this.master_port = state[6];\n    this.name = state[7];\n    this.device_control = state[8];\n    this.prdt_addr = state[9];\n    this.dma_status = state[10];\n    this.current_interface = state[11] ? this.master : this.slave;\n    this.dma_command = state[12];\n};\n\n\n/**\n * @constructor\n */\nfunction IDEInterface(device, cpu, buffer, is_cd, device_nr, interface_nr, bus)\n{\n    this.device = device;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    this.nr = device_nr;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.sector_size = is_cd ? CDROM_SECTOR_SIZE : HD_SECTOR_SIZE;\n\n    /** @type {boolean} */\n    this.is_atapi = is_cd;\n\n    /** @type {number} */\n    this.sector_count = 0;\n\n    /** @type {number} */\n    this.head_count = 0;\n\n    /** @type {number} */\n    this.sectors_per_track = 0;\n\n    /** @type {number} */\n    this.cylinder_count = 0;\n\n    if(this.buffer)\n    {\n        this.sector_count = this.buffer.byteLength / this.sector_size;\n\n        if(this.sector_count !== (this.sector_count | 0))\n        {\n            dbg_log(\"Warning: Disk size not aligned with sector size\", LOG_DISK);\n            this.sector_count = Math.ceil(this.sector_count);\n        }\n\n        if(is_cd)\n        {\n            this.head_count = 1;\n            this.sectors_per_track = 0;\n        }\n        else\n        {\n            // \"default\" values: 16/63\n            // common: 255, 63\n            this.head_count = 16;\n            this.sectors_per_track = 63;\n        }\n\n\n        this.cylinder_count = this.sector_count / this.head_count / this.sectors_per_track;\n\n        if(this.cylinder_count !== (this.cylinder_count | 0))\n        {\n            dbg_log(\"Warning: Rounding up cylinder count. Choose different head number\", LOG_DISK);\n            this.cylinder_count = Math.floor(this.cylinder_count);\n            //this.sector_count = this.cylinder_count * this.head_count *\n            //                        this.sectors_per_track * this.sector_size;\n        }\n\n        //if(this.cylinder_count > 16383)\n        //{\n        //    this.cylinder_count = 16383;\n        //}\n\n        // disk translation: lba\n        var rtc = cpu.devices.rtc;\n\n        // master\n        rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n            rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << this.nr * 4);\n        rtc.cmos_write(CMOS_DISK_DATA, rtc.cmos_read(CMOS_DISK_DATA) & 0x0F | 0xF0);\n\n        var reg = CMOS_DISK_DRIVE1_CYL;\n        rtc.cmos_write(reg + 0, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 1, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 2, this.head_count & 0xFF);\n        rtc.cmos_write(reg + 3, 0xFF);\n        rtc.cmos_write(reg + 4, 0xFF);\n        rtc.cmos_write(reg + 5, 0xC8);\n        rtc.cmos_write(reg + 6, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 7, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 8, this.sectors_per_track & 0xFF);\n\n        //rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n        //    rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << (nr * 4 + 2)); // slave\n    }\n\n    /** @const */\n    this.stats = {\n        sectors_read: 0,\n        sectors_written: 0,\n        bytes_read: 0,\n        bytes_written: 0,\n        loading: false,\n    };\n\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.is_lba = 0;\n\n    /** @type {number} */\n    this.bytecount = 0;\n\n    /** @type {number} */\n    this.sector = 0;\n\n    /** @type {number} */\n    this.lba_count = 0;\n\n    /** @type {number} */\n    this.cylinder_low = 0;\n\n    /** @type {number} */\n    this.cylinder_high = 0;\n\n    /** @type {number} */\n    this.head = 0;\n\n    /** @type {number} */\n    this.drive_head = 0;\n\n    /** @type {number} */\n    this.status = 0x50;\n\n    /** @type {number} */\n    this.sectors_per_drq = 0x80;\n\n    /** @type {number} */\n    this.error = 0;\n\n    /** @type {number} */\n    this.data_pointer = 0;\n\n    this.data = new Uint8Array(64 * 1024);\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n\n    /** @type {number} */\n    this.data_length = 0;\n\n    /** @type {number} */\n    this.data_end = 0;\n\n    /** @type {number} */\n    this.current_command = -1;\n\n    /** @type {number} */\n    this.current_atapi_command = -1;\n\n    /** @type {number} */\n    this.write_dest = 0;\n\n    Object.seal(this);\n}\n\nIDEInterface.prototype.device_reset = function()\n{\n    if(this.is_atapi)\n    {\n        this.status = 0;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n        this.cylinder_low = 0x14; // lba_mid\n        this.cylinder_high = 0xEB; // lba_high\n    }\n    else\n    {\n        this.status = 0x50 | 1;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n\n        // 0, 0 needed by bochs bios\n        this.cylinder_low = 0; // lba_mid\n        this.cylinder_high = 0; // lba_high\n    }\n};\n\nIDEInterface.prototype.push_irq = function()\n{\n    this.device.push_irq();\n};\n\nIDEInterface.prototype.ata_command = function(cmd)\n{\n    dbg_log(\"ATA Command: \" + h(cmd) + \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    if(!this.buffer)\n    {\n        dbg_log(\"abort: No buffer\", LOG_DISK);\n        this.error = 4;\n        this.status = 0x41;\n        this.push_irq();\n        return;\n    }\n\n    this.current_command = cmd;\n    this.error = 0;\n\n    switch(cmd)\n    {\n        case 0x08:\n            dbg_log(\"ATA device reset\", LOG_DISK);\n            this.data_pointer = 0;\n            this.data_end = 0;\n            this.data_length = 0;\n            this.device_reset();\n            this.push_irq();\n            break;\n\n        case 0x10:\n            // calibrate drive\n            this.status = 0x50;\n            this.cylinder_low = 0;\n            this.push_irq();\n            break;\n\n        case 0xF8:\n            // read native max address\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.drive_head = this.drive_head & 0xF0 | last_sector >> 24 & 0x0F;\n            this.push_irq();\n            break;\n\n        case 0x27:\n            // read native max address ext\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.sector |= last_sector >> 24 << 8 & 0xFF00;\n            this.push_irq();\n            break;\n\n        case 0x20:\n        case 0x24:\n        case 0x29:\n        case 0xC4:\n            // 0x20 read sectors\n            // 0x24 read sectors ext\n            // 0xC4 read multiple\n            // 0x29 read multiple ext\n            this.ata_read_sectors(cmd);\n            break;\n\n        case 0x30:\n        case 0x34:\n        case 0x39:\n        case 0xC5:\n            // 0x30 write sectors\n            // 0x34 write sectors ext\n            // 0xC5 write multiple\n            // 0x39 write multiple ext\n            this.ata_write_sectors(cmd);\n            break;\n\n        case 0x90:\n            // execute device diagnostic\n            this.push_irq();\n            this.error = 0x101;\n            this.status = 0x50;\n            break;\n\n        case 0x91:\n            // initialize device parameters\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xA0:\n            // ATA packet\n            if(this.is_atapi)\n            {\n                this.status = 0x58;\n                this.data_allocate(12);\n                this.data_end = 12;\n                this.bytecount = 1;\n                this.push_irq();\n            }\n            break;\n\n        case 0xA1:\n            dbg_log(\"ATA identify packet device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.create_identify_packet();\n                this.status = 0x58;\n\n                this.cylinder_low = 0x14;\n                this.cylinder_high = 0xEB;\n\n                this.push_irq();\n            }\n            else\n            {\n                this.status = 0x41;\n                this.push_irq();\n            }\n            break;\n\n        case 0xC6:\n            // set multiple mode\n            // Logical sectors per DRQ Block in word 1\n            dbg_log(\"Logical sectors per DRQ Block: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.sectors_per_drq = this.bytecount & 0xFF;\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0x25: // read dma ext\n        case 0xC8: // read dma\n            this.ata_read_sectors_dma(cmd);\n            break;\n\n        case 0x35: // write dma ext\n        case 0xCA: // write dma\n            this.ata_write_sectors_dma(cmd);\n            break;\n\n        case 0x40:\n            dbg_log(\"read verify sectors\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xDA:\n            dbg_log(\"Unimplemented: get media status\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            this.push_irq();\n            break;\n\n        case 0xE0:\n            dbg_log(\"ATA standby immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE1:\n            dbg_log(\"ATA idle immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE7:\n            dbg_log(\"ATA flush cache\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEC:\n            dbg_log(\"ATA identify device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.status = 0x41;\n                this.error = 4;\n                this.push_irq();\n                return;\n            }\n\n            this.create_identify_packet();\n            this.status = 0x58;\n\n            this.push_irq();\n            break;\n\n        case 0xEA:\n            dbg_log(\"flush cache ext\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEF:\n            dbg_log(\"set features: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF5:\n            dbg_log(\"security freeze lock\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF9:\n            dbg_log(\"Unimplemented: set max address\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            break;\n\n        default:\n            dbg_assert(false, \"New ATA cmd on 1F7: \" + h(cmd), LOG_DISK);\n\n            this.status = 0x41;\n            // abort bit set\n            this.error = 4;\n    }\n};\n\nIDEInterface.prototype.atapi_handle = function()\n{\n    dbg_log(\"ATAPI Command: \" + h(this.data[0]) +\n            \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    this.data_pointer = 0;\n    this.current_atapi_command = this.data[0];\n\n    switch(this.current_atapi_command)\n    {\n        case 0x00:\n            dbg_log(\"test unit ready\", LOG_DISK);\n            // test unit ready\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x03:\n            // request sense\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n\n            this.data[0] = 0x80 | 0x70;\n            this.data[2] = 5; // illegal request\n            this.data[7] = 8;\n            break;\n\n        case 0x12:\n            // inquiry\n            var length = this.data[4];\n            this.status = 0x58;\n\n            dbg_log(\"inquiry: \" + h(this.data[1], 2) + \" length=\" + length, LOG_DISK);\n\n            // http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt\n            //this.data_allocate(36);\n            this.data.set([\n                0x05, 0x80, 0x01, 0x31,\n                // additional length\n                31,\n                0, 0, 0,\n\n                // 8\n                0x53, 0x4F, 0x4E, 0x59,\n                0x20, 0x20, 0x20, 0x20,\n\n                // 16\n                0x43, 0x44, 0x2D, 0x52,\n                0x4F, 0x4D, 0x20, 0x43,\n                0x44, 0x55, 0x2D, 0x31,\n                0x30, 0x30, 0x30, 0x20,\n\n                // 32\n                0x31, 0x2E, 0x31, 0x61,\n            ]);\n            this.data_end = this.data_length = Math.min(36, length);\n            break;\n\n        case 0x1A:\n            // mode sense (6)\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x1E:\n            // prevent/allow medium removal\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x25:\n            // read capacity\n            var count = this.sector_count - 1;\n            this.data_set(new Uint8Array([\n                count >> 24 & 0xFF,\n                count >> 16 & 0xFF,\n                count >> 8 & 0xFF,\n                count & 0xFF,\n                0,\n                0,\n                this.sector_size >> 8 & 0xFF,\n                this.sector_size & 0xFF,\n            ]));\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x28:\n            // read\n            if(this.lba_count & 1)\n            {\n                this.atapi_read_dma(this.data);\n            }\n            else\n            {\n                this.atapi_read(this.data);\n            }\n            break;\n\n        case 0x42:\n            var length = this.data[8];\n            this.data_allocate(Math.min(8, length));\n            this.data_end = this.data_length;\n            dbg_log(\"read q subcode: length=\" + length, LOG_DISK);\n            this.status = 0x58;\n            break;\n\n        case 0x43:\n            // read toc\n            var length = this.data[8] | this.data[7] << 8;\n            var format = this.data[9] >> 6;\n\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            dbg_log(\"read toc: \" + h(format, 2) +\n                    \" length=\" + length +\n                    \" \" + (this.data[1] & 2) +\n                    \" \" + h(this.data[6]), LOG_DISK);\n\n            if(format === 0)\n            {\n                var sector_count = this.sector_count;\n                this.data.set(new Uint8Array([\n                    0, 18, // length\n                    1, 1, // first and last session\n\n                    0,\n                    0x14,\n                    1, // track number\n                    0,\n                    0, 0, 0, 0,\n\n                    0,\n                    0x16,\n                    0xAA, // track number\n                    0,\n                    sector_count >> 24,\n                    sector_count >> 16 & 0xFF,\n                    sector_count >> 8 & 0xFF,\n                    sector_count & 0xFF,\n                ]));\n            }\n            else if(format === 1)\n            {\n                this.data.set(new Uint8Array([\n                    0, 10, // length\n                    1, 1, // first and last session\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                ]));\n            }\n            else\n            {\n                dbg_assert(false, \"Unimplemented format: \" + format);\n            }\n\n            this.status = 0x58;\n            break;\n\n        case 0x46:\n            // get configuration\n            var length = this.data[8] | this.data[7] << 8;\n            length = Math.min(length, 32);\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            this.data[0] = length - 4 >> 24 & 0xFF;\n            this.data[1] = length - 4 >> 16 & 0xFF;\n            this.data[2] = length - 4 >> 8 & 0xFF;\n            this.data[3] = length - 4 & 0xFF;\n            this.data[6] = 0x08;\n            this.data[10] = 3;\n            this.status = 0x58;\n            break;\n\n        case 0x51:\n            // read disk information\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x52:\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            break;\n\n        case 0x5A:\n            // mode sense\n            var length = this.data[8] | this.data[7] << 8;\n            var page_code = this.data[2];\n            dbg_log(\"mode sense: \" + h(page_code) + \" length=\" + length, LOG_DISK);\n            if(page_code === 0x2A)\n            {\n                this.data_allocate(Math.min(30, length));\n            }\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0xBD:\n            // mechanism status\n            this.data_allocate(this.data[9] | this.data[8] << 8);\n            this.data_end = this.data_length;\n            this.data[5] = 1;\n            this.status = 0x58;\n            break;\n\n        case 0x4A:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            break;\n\n        default:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            dbg_assert(false);\n    }\n\n    this.bytecount = this.bytecount & ~7 | 2;\n\n    if((this.status & 0x80) === 0)\n    {\n        this.push_irq();\n    }\n\n    if((this.status & 0x80) === 0 && this.data_length === 0)\n    {\n        this.bytecount |= 1;\n        this.status &= ~8;\n    }\n};\n\nIDEInterface.prototype.do_write = function()\n{\n    this.status = 0x50;\n\n    dbg_assert(this.data_length <= this.data.length);\n    var data = this.data.subarray(0, this.data_length);\n\n    //dbg_log(hex_dump(data), LOG_DISK);\n    dbg_assert(this.data_length % 512 === 0);\n    this.ata_advance(this.current_command, this.data_length / 512);\n    this.push_irq();\n\n    this.buffer.set(this.write_dest, data, function()\n    {\n    });\n\n    this.report_write(this.data_length);\n};\n\nIDEInterface.prototype.atapi_read = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    this.data_length = 0;\n    var req_length = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n    dbg_log(h(this.cylinder_high, 2) + \" \" + h(this.cylinder_low, 2), LOG_DISK);\n    this.cylinder_low = this.cylinder_high = 0; // oak technology driver (windows 3.0)\n\n    if(req_length === 0xFFFF)\n        req_length--;\n\n    if(req_length > byte_count)\n    {\n        req_length = byte_count;\n    }\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else if(byte_count === 0)\n    {\n        this.status = 0x50;\n\n        this.data_pointer = 0;\n        //this.push_irq();\n    }\n    else\n    {\n        byte_count = Math.min(byte_count, this.buffer.byteLength - start);\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"cd read: data arrived\", LOG_DISK);\n            this.data_set(data);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n\n            this.push_irq();\n\n            req_length &= ~3;\n\n            this.data_end = req_length;\n            if(this.data_end > this.data_length)\n            {\n                this.data_end = this.data_length;\n            }\n            this.cylinder_low = this.data_end & 0xFF;\n            this.cylinder_high = this.data_end >> 8 & 0xFF;\n\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.atapi_read_dma = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read DMA lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            dbg_log(\"atapi_read_dma: Data arrived\");\n            this.report_read_end(byte_count);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.data_set(data);\n\n            this.do_atapi_dma();\n        });\n    }\n};\n\nIDEInterface.prototype.do_atapi_dma = function()\n{\n    if((this.device.dma_status & 1) === 0)\n    {\n        dbg_log(\"do_atapi_dma: Status not set\", LOG_DISK);\n        return;\n    }\n\n    if((this.status & 0x8) === 0)\n    {\n        dbg_log(\"do_atapi_dma: DRQ not set\", LOG_DISK);\n        return;\n    }\n\n    dbg_log(\"atapi dma transfer len=\" + this.data_length, LOG_DISK);\n\n    var prdt_start = this.device.prdt_addr;\n    var offset = 0;\n\n    var data = this.data;\n\n    do {\n        var addr = this.cpu.read32s(prdt_start);\n        var count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!count)\n        {\n            count = 0x10000;\n        }\n\n        dbg_log(\"dma read dest=\" + h(addr) + \" count=\" + h(count) + \" datalen=\" + h(this.data_length), LOG_DISK);\n        this.cpu.write_blob(data.subarray(offset,\n            Math.min(offset + count, this.data_length)), addr);\n\n        offset += count;\n        prdt_start += 8;\n\n        if(offset >= this.data_length && !end)\n        {\n            dbg_log(\"leave early end=\" + (+end) +\n                    \" offset=\" + h(offset) +\n                    \" data_length=\" + h(this.data_length) +\n                    \" cmd=\" + h(this.current_command), LOG_DISK);\n            break;\n        }\n    }\n    while(!end);\n\n    dbg_log(\"end offset=\" + offset, LOG_DISK);\n\n    this.status = 0x50;\n    this.device.dma_status &= ~1;\n    this.bytecount = this.bytecount & ~7 | 3;\n    this.push_irq();\n};\n\nIDEInterface.prototype.read_data = function(length)\n{\n    if(this.data_pointer < this.data_end)\n    {\n        dbg_assert(this.data_pointer + length - 1 < this.data_end);\n        dbg_assert(this.data_pointer % length === 0, h(this.data_pointer) + \" \" + length);\n\n        if(length === 1)\n        {\n            var result = this.data[this.data_pointer];\n        }\n        else if(length === 2)\n        {\n            var result = this.data16[this.data_pointer >>> 1];\n        }\n        else\n        {\n            var result = this.data32[this.data_pointer >>> 2];\n        }\n\n        this.data_pointer += length;\n\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer & align) === 0)\n        {\n            dbg_log(\"Read 1F0: \" + h(this.data[this.data_pointer], 2) +\n                        \" cur=\" + h(this.data_pointer) +\n                        \" cnt=\" + h(this.data_length), LOG_DISK);\n        }\n\n        if(this.data_pointer >= this.data_end)\n        {\n            this.read_end();\n        }\n\n        return result;\n    }\n    else\n    {\n        dbg_log(\"Read 1F0: empty\", LOG_DISK);\n\n        this.data_pointer += length;\n        return 0;\n    }\n};\n\nIDEInterface.prototype.read_end = function()\n{\n    dbg_log(\"read_end cmd=\" + h(this.current_command) + \" data_pointer=\" + h(this.data_pointer) +\n            \" end=\" + h(this.data_end) + \" length=\" + h(this.data_length), LOG_DISK);\n\n    if(this.current_command === 0xA0)\n    {\n        if(this.data_end === this.data_length)\n        {\n            this.status = 0x50;\n            this.bytecount = this.bytecount & ~7 | 3;\n            this.push_irq();\n        }\n        else\n        {\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.push_irq();\n            var byte_count = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n\n            if(this.data_end + byte_count > this.data_length)\n            {\n                this.cylinder_low = (this.data_length - this.data_end) & 0xFF;\n                this.cylinder_high = (this.data_length - this.data_end) >> 8 & 0xFF;\n                this.data_end = this.data_length;\n            }\n            else\n            {\n                this.data_end += byte_count;\n            }\n            dbg_log(\"data_end=\" + h(this.data_end), LOG_DISK);\n        }\n    }\n    else\n    {\n        this.error = 0;\n        if(this.data_pointer >= this.data_length)\n        {\n            this.status = 0x50;\n            this.push_irq();\n        }\n        else\n        {\n            if(this.current_command === 0xC4 || this.current_command === 0x29)\n            {\n                var sector_count = Math.min(this.sectors_per_drq,\n                    (this.data_length - this.data_end) / 512);\n                dbg_assert(sector_count % 1 === 0);\n            }\n            else\n            {\n                dbg_assert(this.current_command === 0x20 || this.current_command === 0x24);\n                var sector_count = 1;\n            }\n            this.ata_advance(this.current_command, sector_count);\n            this.data_end += 512 * sector_count;\n            this.status = 0x58;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port = function(data, length)\n{\n    dbg_assert(this.data_pointer % length === 0);\n\n    if(this.data_pointer >= this.data_end)\n    {\n        dbg_log(\"Redundant write to data port: \" + h(data) + \" count=\" + h(this.data_end) +\n                \" cur=\" + h(this.data_pointer), LOG_DISK);\n    }\n    else\n    {\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer + length & align) === 0 || this.data_end < 20)\n        {\n            dbg_log(\"Data port: \" + h(data >>> 0) + \" count=\" + h(this.data_end) +\n                    \" cur=\" + h(this.data_pointer), LOG_DISK);\n        }\n\n        if(length === 1)\n        {\n            this.data[this.data_pointer++] = data;\n        }\n        else if(length === 2)\n        {\n            this.data16[this.data_pointer >>> 1] = data;\n            this.data_pointer += 2;\n        }\n        else\n        {\n            this.data32[this.data_pointer >>> 2] = data;\n            this.data_pointer += 4;\n        }\n\n        dbg_assert(this.data_pointer <= this.data_end);\n        if(this.data_pointer === this.data_end)\n        {\n            this.write_end();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port8 = function(data)\n{\n    this.write_data_port(data, 1);\n};\n\nIDEInterface.prototype.write_data_port16 = function(data)\n{\n    this.write_data_port(data, 2);\n};\n\nIDEInterface.prototype.write_data_port32 = function(data)\n{\n    this.write_data_port(data, 4);\n};\n\nIDEInterface.prototype.write_end = function()\n{\n    if(this.current_command === 0xA0)\n    {\n        this.atapi_handle();\n    }\n    else\n    {\n        dbg_log(\"write_end data_pointer=\" + h(this.data_pointer) +\n                \" data_length=\" + h(this.data_length), LOG_DISK);\n\n        if(this.data_pointer >= this.data_length)\n        {\n            this.do_write();\n        }\n        else\n        {\n            dbg_assert(this.current_command === 0x30 || this.current_command === 0x34);\n            // XXX: Should advance here, but do_write does all the advancing\n            //this.ata_advance(this.current_command, 1);\n            this.status = 0x58;\n            this.data_end += 512;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.ata_advance = function(cmd, sectors)\n{\n    dbg_log(\"Advance sectors=\" + sectors + \" old_bytecount=\" + this.bytecount, LOG_DISK);\n    this.bytecount -= sectors;\n\n    if(cmd === 0x24 || cmd === 0x29 || cmd === 0x34 || cmd === 0x39 ||\n       cmd === 0x25 || cmd === 0x35)\n    {\n        var new_sector = sectors + this.get_lba48();\n        this.sector = new_sector & 0xFF | new_sector >> 16 & 0xFF00;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n    }\n    else if(this.is_lba)\n    {\n        var new_sector = sectors + this.get_lba28();\n        this.sector = new_sector & 0xFF;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n        this.head = this.head & ~0xF | new_sector & 0xF;\n    }\n    else // chs\n    {\n        var new_sector = sectors + this.get_chs();\n\n        var c = new_sector / (this.head_count * this.sectors_per_track) | 0;\n        this.cylinder_low = c & 0xFF;\n        this.cylinder_high = c >> 8 & 0xFF;\n        this.head = (new_sector / this.sectors_per_track | 0) % this.head_count & 0xF;\n        this.sector = (new_sector % this.sectors_per_track + 1) & 0xFF;\n\n        dbg_assert(new_sector === this.get_chs());\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x24 || cmd === 0x29;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x20 || cmd === 0x24;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA read cmd=\" + h(cmd) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x80 | 0x40;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"ata_read: Data arrived\", LOG_DISK);\n\n            this.data_set(data);\n            this.status = 0x58;\n            this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n            this.ata_advance(cmd, is_single ? 1 : Math.min(count, this.sectors_per_track));\n\n            this.push_irq();\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_read_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_assert(lba < this.buffer.byteLength);\n\n    this.report_read_start();\n\n    var orig_prdt_start = this.device.prdt_addr;\n\n    this.buffer.get(start, byte_count, (data) =>\n    {\n        //setTimeout(function() {\n        dbg_log(\"do_ata_read_sectors_dma: Data arrived\", LOG_DISK);\n        var prdt_start = this.device.prdt_addr;\n        var offset = 0;\n\n        dbg_assert(orig_prdt_start === prdt_start);\n\n        do {\n            var prd_addr = this.cpu.read32s(prdt_start);\n            var prd_count = this.cpu.read16(prdt_start + 4);\n            var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n            if(!prd_count)\n            {\n                prd_count = 0x10000;\n                dbg_log(\"dma: prd count was 0\", LOG_DISK);\n            }\n\n            dbg_log(\"dma read transfer dest=\" + h(prd_addr) +\n                    \" prd_count=\" + h(prd_count), LOG_DISK);\n            this.cpu.write_blob(data.subarray(offset, offset + prd_count), prd_addr);\n\n            offset += prd_count;\n            prdt_start += 8;\n        }\n        while(!end);\n\n        dbg_assert(offset === byte_count);\n\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n\n        this.push_irq();\n\n        this.report_read_end(byte_count);\n        //}.bind(this), 10);\n    });\n};\n\nIDEInterface.prototype.ata_write_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x34 || cmd === 0x39;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x30 || cmd === 0x34;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA write lba=\" + h(lba) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x58;\n        this.data_allocate_noclear(byte_count);\n        this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n        this.write_dest = start;\n    }\n};\n\nIDEInterface.prototype.ata_write_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA write lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA DMA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_write_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    var prdt_start = this.device.prdt_addr;\n    var prdt_count = 0;\n    var prdt_write_count = 0;\n    var offset = 0;\n\n    dbg_log(\"prdt addr: \" + h(prdt_start, 8), LOG_DISK);\n\n    do {\n        var prd_addr = this.cpu.read32s(prdt_start);\n        var prd_count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!prd_count)\n        {\n            prd_count = 0x10000;\n            dbg_log(\"dma: prd count was 0\", LOG_DISK);\n        }\n\n        dbg_log(\"dma write transfer dest=\" + h(prd_addr) + \" prd_count=\" + h(prd_count), LOG_DISK);\n\n        var slice = this.cpu.mem8.subarray(prd_addr, prd_addr + prd_count);\n        dbg_assert(slice.length === prd_count);\n\n        //if(DEBUG)\n        //{\n        //    dbg_log(hex_dump(slice), LOG_DISK);\n        //}\n\n        this.buffer.set(start + offset, slice, function()\n        {\n            prdt_write_count++;\n        });\n\n        offset += prd_count;\n        prdt_start += 8;\n        prdt_count++;\n    }\n    while(!end);\n\n    if(prdt_write_count === prdt_count)\n    {\n        //setTimeout(function() {\n        dbg_log(\"dma write completed\", LOG_DISK);\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.push_irq();\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n        //}, 10);\n    }\n    else\n    {\n        // fails when writes don't happen synchronously, which isn't currently\n        // the case, but might be in the future\n        dbg_assert(false, \"dma write not completed\", LOG_DISK);\n    }\n\n    this.report_write(byte_count);\n};\n\nIDEInterface.prototype.get_chs = function()\n{\n    var c = this.cylinder_low & 0xFF | this.cylinder_high << 8 & 0xFF00;\n    var h = this.head;\n    var s = this.sector & 0xFF;\n\n    dbg_log(\"get_chs: c=\" + c + \" h=\" + h + \" s=\" + s, LOG_DISK);\n\n    return (c * this.head_count + h) * this.sectors_per_track + s - 1;\n};\n\nIDEInterface.prototype.get_lba28 = function()\n{\n    return this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.head & 0xF) << 24;\n};\n\nIDEInterface.prototype.get_lba48 = function()\n{\n    // Note: Bits over 32 missing\n    return (this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.sector >> 8) << 24 & 0xFF000000) >>> 0;\n};\n\nIDEInterface.prototype.get_lba = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        return this.get_lba48();\n    }\n    else if(this.is_lba)\n    {\n        return this.get_lba28();\n    }\n    else\n    {\n        return this.get_chs();\n    }\n};\n\nIDEInterface.prototype.get_count = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        var count = this.bytecount;\n        if(count === 0) count = 0x10000;\n        return count;\n    }\n    else\n    {\n        var count = this.bytecount & 0xFF;\n        if(count === 0) count = 0x100;\n        return count;\n    }\n};\n\nIDEInterface.prototype.create_identify_packet = function()\n{\n    // http://bochs.sourceforge.net/cgi-bin/lxr/source/iodev/harddrv.cc#L2821\n\n    if(this.drive_head & 0x10)\n    {\n        // slave\n        this.data_allocate(0);\n        return;\n    }\n\n    for(var i = 0; i < 512; i++)\n    {\n        this.data[i] = 0;\n    }\n\n    var cylinder_count = Math.min(16383, this.cylinder_count);\n\n    this.data_set([\n        0x40, this.is_atapi ? 0x85 : 0,\n        // 1 cylinders\n        cylinder_count, cylinder_count >> 8,\n        0, 0,\n\n        // 3 heads\n        this.head_count, this.head_count >> 8,\n        this.sectors_per_track / 512, this.sectors_per_track / 512 >> 8,\n        // 5\n        0, 512 >> 8,\n        // sectors per track\n        this.sectors_per_track, this.sectors_per_track >> 8,\n        0, 0, 0, 0, 0, 0,\n        // 10-19 serial number\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 15\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 20\n        3, 0,\n        0, 2,\n        4, 0,\n        // 23-26 firmware revision\n        0, 0, 0, 0, 0, 0, 0, 0,\n\n        // 27 model number\n        56, 118, 32, 54, 68, 72, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n\n        // 47 max value for set multiple mode\n        0x80, 0,\n        1, 0,\n        //0, 3,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        0, 2,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        // 50\n        0, 0,\n        0, 2,\n        0, 2,\n        7, 0,\n\n        // 54 cylinders\n        cylinder_count, cylinder_count >> 8,\n        // 55 heads\n        this.head_count, this.head_count >> 8,\n        // 56 sectors per track\n        this.sectors_per_track, 0,\n        // capacity in sectors\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 60\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 63, dma supported mode, dma selected mode\n        this.current_command === 0xA0 ? 0 : 7, this.current_command === 0xA0 ? 0 : 4,\n        //0, 0, // no DMA\n\n        0, 0,\n        // 65\n        30, 0, 30, 0, 30, 0, 30, 0, 0, 0,\n        // 70\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 75\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 80\n        0x7E, 0, 0, 0, 0, 0, 0, 0x74, 0, 0x40,\n        // 85\n        0, 0x40, 0, 0x74, 0, 0x40, 0, 0, 0, 0,\n        // 90\n        0, 0, 0, 0, 0, 0, 1, 0x60, 0, 0,\n        // 95\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 100\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n    ]);\n\n    this.data_length = 512;\n    this.data_end = 512;\n};\n\nIDEInterface.prototype.data_allocate = function(len)\n{\n    this.data_allocate_noclear(len);\n\n    for(var i = 0; i < (len + 3 >> 2); i++)\n    {\n        this.data32[i] = 0;\n    }\n};\n\nIDEInterface.prototype.data_allocate_noclear = function(len)\n{\n    if(this.data.length < len)\n    {\n        this.data = new Uint8Array(len + 3 & ~3);\n        this.data16 = new Uint16Array(this.data.buffer);\n        this.data32 = new Int32Array(this.data.buffer);\n    }\n\n    this.data_length = len;\n    this.data_pointer = 0;\n};\n\nIDEInterface.prototype.data_set = function(data)\n{\n    this.data_allocate_noclear(data.length);\n    this.data.set(data);\n};\n\nIDEInterface.prototype.report_read_start = function()\n{\n    this.stats.loading = true;\n    this.bus.send(\"ide-read-start\");\n};\n\nIDEInterface.prototype.report_read_end = function(byte_count)\n{\n    this.stats.loading = false;\n\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_read += sector_count;\n    this.stats.bytes_read += byte_count;\n\n    this.bus.send(\"ide-read-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.report_write = function(byte_count)\n{\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_written += sector_count;\n    this.stats.bytes_written += byte_count;\n\n    this.bus.send(\"ide-write-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.bytecount;\n    state[1] = this.cylinder_count;\n    state[2] = this.cylinder_high;\n    state[3] = this.cylinder_low;\n    state[4] = this.data_pointer;\n    state[5] = 0;\n    state[6] = 0;\n    state[7] = 0;\n    state[8] = 0;\n    state[9] = this.drive_head;\n    state[10] = this.error;\n    state[11] = this.head;\n    state[12] = this.head_count;\n    state[13] = this.is_atapi;\n    state[14] = this.is_lba;\n    state[15] = this.lba_count;\n    state[16] = this.data;\n    state[17] = this.data_length;\n    state[18] = this.sector;\n    state[19] = this.sector_count;\n    state[20] = this.sector_size;\n    state[21] = this.sectors_per_drq;\n    state[22] = this.sectors_per_track;\n    state[23] = this.status;\n    state[24] = this.write_dest;\n    state[25] = this.current_command;\n    state[26] = this.data_end;\n    state[27] = this.current_atapi_command;\n    return state;\n};\n\nIDEInterface.prototype.set_state = function(state)\n{\n    this.bytecount = state[0];\n    this.cylinder_count = state[1];\n    this.cylinder_high = state[2];\n    this.cylinder_low = state[3];\n    this.data_pointer = state[4];\n\n    this.drive_head = state[9];\n    this.error = state[10];\n    this.head = state[11];\n    this.head_count = state[12];\n    this.is_atapi = state[13];\n    this.is_lba = state[14];\n    this.lba_count = state[15];\n    this.data = state[16];\n    this.data_length = state[17];\n    this.sector = state[18];\n    this.sector_count = state[19];\n    this.sector_size = state[20];\n    this.sectors_per_drq = state[21];\n    this.sectors_per_track = state[22];\n    this.status = state[23];\n    this.write_dest = state[24];\n    this.current_command = state[25];\n\n    this.data_end = state[26];\n    this.current_atapi_command = state[27];\n\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n};\n","\"use strict\";\n\n// http://wiki.osdev.org/PCI\n\nvar\n/** @const */ PCI_CONFIG_ADDRESS = 0xCF8,\n/** @const */ PCI_CONFIG_DATA = 0xCFC;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction PCI(cpu)\n{\n    this.pci_addr = new Uint8Array(4);\n    this.pci_value = new Uint8Array(4);\n    this.pci_response = new Uint8Array(4);\n    this.pci_status = new Uint8Array(4);\n\n    this.pci_addr32 = new Int32Array(this.pci_addr.buffer);\n    this.pci_value32 = new Int32Array(this.pci_value.buffer);\n    this.pci_response32 = new Int32Array(this.pci_response.buffer);\n    this.pci_status32 = new Int32Array(this.pci_status.buffer);\n\n    this.device_spaces = [];\n    this.devices = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 256; i++)\n    {\n        this.device_spaces[i] = undefined;\n        this.devices[i] = undefined;\n    }\n\n    this.io = cpu.io;\n\n    cpu.io.register_write(PCI_CONFIG_DATA, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write32(this.pci_addr32[0], value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 1, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 1 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 2, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 2 | 0, value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0] + 2 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 3, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 3 | 0, value);\n        });\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_DATA, this,\n        function()\n        {\n            return this.pci_response[0];\n        },\n        function()\n        {\n            return this.pci_response[1];\n        },\n        function()\n        {\n            return this.pci_response[2];\n        },\n        function()\n        {\n            return this.pci_response[3];\n        }\n    );\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_ADDRESS, this,\n        function()\n        {\n            return this.pci_status[0];\n        },\n        function()\n        {\n            return this.pci_status[1];\n        },\n        function()\n        {\n            return this.pci_status[2];\n        },\n        function()\n        {\n            return this.pci_status[3];\n        }\n    );\n\n    cpu.io.register_write_consecutive(PCI_CONFIG_ADDRESS, this,\n        function(out_byte)\n        {\n            this.pci_addr[0] = out_byte & 0xFC;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[1] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[2] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[3] = out_byte;\n            this.pci_query();\n        }\n    );\n\n\n    // Some experimental PCI devices taken from my PC:\n\n    // 00:00.0 Host bridge: Intel Corporation 4 Series Chipset DRAM Controller (rev 02)\n    //var host_bridge = {\n    //    pci_id: 0,\n    //    pci_space: [\n    //        0x86, 0x80, 0x20, 0x2e, 0x06, 0x00, 0x90, 0x20, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x10, 0xd3, 0x82,\n    //        0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    ],\n    //    pci_bars: [],\n    //};\n\n    var host_bridge = {\n        pci_id: 0,\n        pci_space: [\n            // 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)\n            0x86, 0x80, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82441FX PMC\",\n    };\n    this.register_device(host_bridge);\n\n    this.isa_bridge = {\n        pci_id: 1 << 3,\n        pci_space: [\n            // 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]\n            0x86, 0x80, 0x00, 0x70, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82371SB PIIX3 ISA\",\n    };\n    this.isa_bridge_space = this.register_device(this.isa_bridge);\n    this.isa_bridge_space8 = new Uint8Array(this.isa_bridge_space.buffer);\n\n    // 00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 90)\n    //this.register_device([\n    //    0x86, 0x80, 0x4e, 0x24, 0x07, 0x01, 0x10, 0x00, 0x90, 0x01, 0x04, 0x06, 0x00, 0x00, 0x01, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x20, 0xe0, 0xe0, 0x80, 0x22,\n    //    0xb0, 0xfe, 0xb0, 0xfe, 0xf1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x02, 0x00,\n    //], 0x1e << 3);\n}\n\nPCI.prototype.get_state = function()\n{\n    var state = [];\n\n    for(var i = 0; i < 256; i++)\n    {\n        state[i] = this.device_spaces[i];\n    }\n\n    state[256] = this.pci_addr;\n    state[257] = this.pci_value;\n    state[258] = this.pci_response;\n    state[259] = this.pci_status;\n\n    return state;\n};\n\nPCI.prototype.set_state = function(state)\n{\n    for(var i = 0; i < 256; i++)\n    {\n        var device = this.devices[i];\n        var space = state[i];\n\n        if(!device || !space)\n        {\n            if(device)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device exists in current \" +\n                        \"configuration but not in snapshot (\" + device.name + \")\");\n            }\n            if(space)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device doesn't exist in current \" +\n                        \"configuration but does in snapshot (device \" + h(i, 2) + \")\");\n            }\n            continue;\n        }\n\n        for(var bar_nr = 0; bar_nr < device.pci_bars.length; bar_nr++)\n        {\n            var value = space[(0x10 >> 2) + bar_nr];\n\n            if(value & 1)\n            {\n                var bar = device.pci_bars[bar_nr];\n                var from = bar.original_bar & ~1 & 0xFFFF;\n                var to = value & ~1 & 0xFFFF;\n                this.set_io_bars(bar, from, to);\n            }\n            else\n            {\n                // memory, cannot be changed\n            }\n        }\n\n        this.device_spaces[i].set(space);\n    }\n\n    this.pci_addr.set(state[256]);\n    this.pci_value.set(state[257]);\n    this.pci_response.set(state[258]);\n    this.pci_status.set(state[259]);\n};\n\nPCI.prototype.pci_query = function()\n{\n    var dbg_line = \"query\";\n\n    // Bit | .31                     .0\n    // Fmt | EBBBBBBBBDDDDDFFFRRRRRR00\n\n    var bdf = this.pci_addr[2] << 8 | this.pci_addr[1],\n        addr = this.pci_addr[0] & 0xFC,\n        //devfn = bdf & 0xFF,\n        //bus = bdf >> 8,\n        dev = bdf >> 3 & 0x1F,\n        //fn = bdf & 7,\n        enabled = this.pci_addr[3] >> 7;\n\n    dbg_line += \" enabled=\" + enabled;\n    dbg_line += \" bdf=\" + h(bdf, 4);\n    dbg_line += \" dev=\" + h(dev, 2);\n    dbg_line += \" addr=\" + h(addr, 2);\n\n    var device = this.device_spaces[bdf];\n\n    if(device !== undefined)\n    {\n        this.pci_status32[0] = 0x80000000 | 0;\n\n        if(addr < device.byteLength)\n        {\n            this.pci_response32[0] = device[addr >> 2];\n        }\n        else\n        {\n            // required by freebsd-9.1\n            this.pci_response32[0] = 0;\n        }\n\n        dbg_line += \" \" + h(this.pci_addr32[0] >>> 0, 8) + \" -> \" + h(this.pci_response32[0] >>> 0, 8);\n\n        if(addr >= device.byteLength)\n        {\n            dbg_line += \" (undef)\";\n        }\n\n        dbg_line += \" (\" + this.devices[bdf].name + \")\";\n\n        dbg_log(dbg_line, LOG_PCI);\n    }\n    else\n    {\n        this.pci_response32[0] = -1;\n        this.pci_status32[0] = 0;\n    }\n};\n\nPCI.prototype.pci_write8 = function(address, written)\n{\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint8Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI write8 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 2), LOG_PCI);\n\n    space[addr] = written;\n};\n\nPCI.prototype.pci_write16 = function(address, written)\n{\n    dbg_assert((address & 1) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint16Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI writ16 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 4), LOG_PCI);\n\n    space[addr >>> 1] = written;\n};\n\nPCI.prototype.pci_write32 = function(address, written)\n{\n    dbg_assert((address & 3) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = this.device_spaces[bdf];\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    if(addr >= 0x10 && addr < 0x28)\n    {\n        var bar_nr = addr - 0x10 >> 2;\n        var bar = device.pci_bars[bar_nr];\n\n        dbg_log(\"BAR\" + bar_nr + \" exists=\" + (bar ? \"y\" : \"n\") + \" changed to \" +\n                h(written >>> 0) + \" dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") \", LOG_PCI);\n\n        if(bar)\n        {\n            dbg_assert(!(bar.size & bar.size - 1), \"bar size should be power of 2\");\n\n            var space_addr = addr >> 2;\n            var type = space[space_addr] & 1;\n\n            if((written | 3 | bar.size - 1)  === -1) // size check\n            {\n                written = ~(bar.size - 1) | type;\n\n                if(type === 0)\n                {\n                    space[space_addr] = written;\n                }\n            }\n            else\n            {\n                if(type === 0)\n                {\n                    // memory\n                    var original_bar = bar.original_bar;\n\n                    if((written & ~0xF) !== (original_bar & ~0xF))\n                    {\n                        // seabios\n                        dbg_log(\"Warning: Changing memory bar not supported, ignored\", LOG_PCI);\n                    }\n\n                    // changing isn't supported yet, reset to default\n                    space[space_addr] = original_bar;\n                }\n            }\n\n            if(type === 1)\n            {\n                // io\n                dbg_assert(type === 1);\n\n                var from = space[space_addr] & ~1 & 0xFFFF;\n                var to = written & ~1 & 0xFFFF;\n                dbg_log(\"io bar changed from \" + h(from >>> 0, 8) +\n                        \" to \" + h(to >>> 0, 8) + \" size=\" + bar.size, LOG_PCI);\n                this.set_io_bars(bar, from, to);\n                space[space_addr] = written | 1;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n\n        dbg_log(\"BAR effective value: \" + h(space[addr >> 2] >>> 0), LOG_PCI);\n    }\n    else if(addr === 0x30)\n    {\n        dbg_log(\"PCI write rom address dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \")\" +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n\n        if(device.pci_rom_size)\n        {\n            if((written | 0x7FF) === (0xFFFFFFFF|0))\n            {\n                space[addr >> 2] = -device.pci_rom_size | 0;\n            }\n            else\n            {\n                space[addr >> 2] = device.pci_rom_address | 0;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n    }\n    else\n    {\n        dbg_log(\"PCI write dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n        space[addr >>> 2] = written;\n    }\n};\n\nPCI.prototype.register_device = function(device)\n{\n    dbg_assert(device.pci_id !== undefined);\n    dbg_assert(device.pci_space !== undefined);\n    dbg_assert(device.pci_bars !== undefined);\n\n    var device_id = device.pci_id;\n\n    dbg_log(\"PCI register bdf=\" + h(device_id) + \" (\" + device.name + \")\", LOG_PCI);\n\n    dbg_assert(!this.devices[device_id]);\n    dbg_assert(device.pci_space.length >= 64);\n    dbg_assert(device_id < this.devices.length);\n\n    // convert bytewise notation from lspci to double words\n    var space = new Int32Array(64);\n    space.set(new Int32Array(new Uint8Array(device.pci_space).buffer));\n    this.device_spaces[device_id] = space;\n    this.devices[device_id] = device;\n\n    var bar_space = space.slice(4, 10);\n\n    for(var i = 0; i < device.pci_bars.length; i++)\n    {\n        var bar = device.pci_bars[i];\n\n        if(!bar)\n        {\n            continue;\n        }\n\n        var bar_base = bar_space[i];\n        var type = bar_base & 1;\n\n        bar.original_bar = bar_base;\n        bar.entries = [];\n\n        if(type === 0)\n        {\n            // memory, not needed currently\n        }\n        else\n        {\n            dbg_assert(type === 1);\n            var port = bar_base & ~1;\n\n            for(var j = 0; j < bar.size; j++)\n            {\n                bar.entries[j] = this.io.ports[port + j];\n            }\n        }\n    }\n\n    return space;\n};\n\nPCI.prototype.set_io_bars = function(bar, from, to)\n{\n    var count = bar.size;\n    dbg_log(\"Move io bars: from=\" + h(from) + \" to=\" + h(to) + \" count=\" + count, LOG_PCI);\n\n    var ports = this.io.ports;\n\n    for(var i = 0; i < count; i++)\n    {\n        var old_entry = ports[from + i];\n        ports[from + i] = this.io.create_empty_entry();\n\n        if(old_entry.read8 === this.io.empty_port_read8 &&\n           old_entry.read16 === this.io.empty_port_read16 &&\n           old_entry.read32 === this.io.empty_port_read32 &&\n           old_entry.write8 === this.io.empty_port_write &&\n           old_entry.write16 === this.io.empty_port_write &&\n           old_entry.write32 === this.io.empty_port_write)\n        {\n            dbg_log(\"Move IO bar: Source not mapped, port=\" + h(from + i, 4), LOG_PCI);\n        }\n\n        var entry = bar.entries[i];\n        var empty_entry = ports[to + i];\n        dbg_assert(entry && empty_entry);\n\n        ports[to + i] = entry;\n\n        // these can fail if the os maps an io port in multiple bars (indicating a bug)\n        dbg_assert(empty_entry.read8 === this.io.empty_port_read8, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read16 === this.io.empty_port_read16, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read32 === this.io.empty_port_read32, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write8 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write16 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write32 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n    }\n};\n\nPCI.prototype.raise_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = (space[0x3C >>> 2] >> 8 & 0xFF) - 1;\n    var device = (pci_id >> 3) - 1 & 0xFF;\n    var parent_pin = pin + device & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI raise irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_raise_irq(irq);\n};\n\nPCI.prototype.lower_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = space[0x3C >>> 2] >> 8 & 0xFF;\n    var device = pci_id >> 3 & 0xFF;\n    var parent_pin = pin + device - 2 & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI lower irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_lower_irq(irq);\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {CPU} cpu\n */\nfunction FloppyController(cpu, fda_image, fdb_image)\n{\n    /** @const @type {IO|undefined} */\n    this.io = cpu.io;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {DMA} */\n    this.dma = cpu.devices.dma;\n\n    this.bytes_expecting = 0;\n    this.receiving_command = new Uint8Array(10);\n    this.receiving_index = 0;\n    this.next_command = null;\n\n    this.response_data = new Uint8Array(10);\n    this.response_index = 0;\n    this.response_length = 0;\n\n    this.floppy_size = 0;\n\n    /* const */\n    this.fda_image = fda_image;\n\n    /* const */\n    this.fdb_image = fdb_image;\n\n\n    this.status_reg0 = 0;\n    this.status_reg1 = 0;\n    this.status_reg2 = 0;\n    this.drive = 0;\n\n    this.last_cylinder = 0;\n    this.last_head = 0;\n    this.last_sector = 1;\n\n    // this should actually be write-only ... but people read it anyway\n    this.dor = 0;\n\n    if(!fda_image)\n    {\n        // Needed for CD emulation provided by seabios\n        cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, 4 << 4);\n\n        this.sectors_per_track = 0;\n        this.number_of_heads = 0;\n        this.number_of_cylinders = 0;\n\n        this.floppy_size = 0;\n    }\n    else\n    {\n        this.floppy_size = fda_image.byteLength;\n\n        var floppy_types = {\n            160  : { type: 1, tracks: 40, sectors: 8 , heads: 1 },\n            180  : { type: 1, tracks: 40, sectors: 9 , heads: 1 },\n            200  : { type: 1, tracks: 40, sectors: 10, heads: 1 },\n            320  : { type: 1, tracks: 40, sectors: 8 , heads: 2 },\n            360  : { type: 1, tracks: 40, sectors: 9 , heads: 2 },\n            400  : { type: 1, tracks: 40, sectors: 10, heads: 2 },\n            720  : { type: 3, tracks: 80, sectors: 9 , heads: 2 },\n            1200 : { type: 2, tracks: 80, sectors: 15, heads: 2 },\n            1440 : { type: 4, tracks: 80, sectors: 18, heads: 2 },\n            1722 : { type: 5, tracks: 82, sectors: 21, heads: 2 },\n            2880 : { type: 5, tracks: 80, sectors: 36, heads: 2 },\n        };\n\n        var number_of_cylinders,\n            sectors_per_track,\n            number_of_heads,\n            floppy_type = floppy_types[this.floppy_size >> 10];\n\n        if(floppy_type && (this.floppy_size & 0x3FF) === 0)\n        {\n            cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, floppy_type.type << 4);\n\n            sectors_per_track = floppy_type.sectors;\n            number_of_heads = floppy_type.heads;\n            number_of_cylinders = floppy_type.tracks;\n        }\n        else\n        {\n            throw \"Unknown floppy size: \" + h(fda_image.byteLength);\n        }\n\n        this.sectors_per_track = sectors_per_track;\n        this.number_of_heads = number_of_heads;\n        this.number_of_cylinders = number_of_cylinders;\n    }\n\n    this.io.register_read(0x3F0, this, this.port3F0_read);\n    this.io.register_read(0x3F2, this, this.port3F2_read);\n    this.io.register_read(0x3F4, this, this.port3F4_read);\n    this.io.register_read(0x3F5, this, this.port3F5_read);\n    this.io.register_read(0x3F7, this, this.port3F7_read);\n\n    this.io.register_write(0x3F2, this, this.port3F2_write);\n    this.io.register_write(0x3F5, this, this.port3F5_write);\n}\n\nFloppyController.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.bytes_expecting;\n    state[1] = this.receiving_command;\n    state[2] = this.receiving_index;\n    //state[3] = this.next_command;\n    state[4] = this.response_data;\n    state[5] = this.response_index;\n    state[6] = this.response_length;\n    state[7] = this.floppy_size;\n    state[8] = this.status_reg0;\n    state[9] = this.status_reg1;\n    state[10] = this.status_reg2;\n    state[11] = this.drive;\n    state[12] = this.last_cylinder;\n    state[13] = this.last_head;\n    state[14] = this.last_sector;\n    state[15] = this.dor;\n    state[16] = this.sectors_per_track;\n    state[17] = this.number_of_heads;\n    state[18] = this.number_of_cylinders;\n\n    return state;\n};\n\nFloppyController.prototype.set_state = function(state)\n{\n    this.bytes_expecting = state[0];\n    this.receiving_command = state[1];\n    this.receiving_index = state[2];\n    this.next_command = state[3];\n    this.response_data = state[4];\n    this.response_index = state[5];\n    this.response_length = state[6];\n    this.floppy_size = state[7];\n    this.status_reg0 = state[8];\n    this.status_reg1 = state[9];\n    this.status_reg2 = state[10];\n    this.drive = state[11];\n    this.last_cylinder = state[12];\n    this.last_head = state[13];\n    this.last_sector = state[14];\n    this.dor = state[15];\n    this.sectors_per_track = state[16];\n    this.number_of_heads = state[17];\n    this.number_of_cylinders = state[18];\n};\n\nFloppyController.prototype.port3F0_read = function()\n{\n    dbg_log(\"3F0 read\", LOG_FLOPPY);\n\n    return 0;\n};\n\n\nFloppyController.prototype.port3F4_read = function()\n{\n    dbg_log(\"3F4 read\", LOG_FLOPPY);\n\n    var return_byte = 0x80;\n\n    if(this.response_index < this.response_length)\n    {\n        return_byte |= 0x40 | 0x10;\n    }\n\n    if((this.dor & 8) === 0)\n    {\n        return_byte |= 0x20;\n    }\n\n    return return_byte;\n};\n\nFloppyController.prototype.port3F7_read = function()\n{\n    dbg_log(\"3F7 read\", LOG_FLOPPY);\n    return 0x00;\n}\n\nFloppyController.prototype.port3F5_read = function()\n{\n    if(this.response_index < this.response_length)\n    {\n        dbg_log(\"3F5 read: \" + this.response_data[this.response_index], LOG_FLOPPY);\n        this.cpu.device_lower_irq(6);\n        return this.response_data[this.response_index++];\n    }\n    else\n    {\n        dbg_log(\"3F5 read, empty\", LOG_FLOPPY);\n        return 0xFF;\n    }\n};\n\nFloppyController.prototype.port3F5_write = function(reg_byte)\n{\n    if(!this.fda_image) return;\n\n    dbg_log(\"3F5 write \" + h(reg_byte), LOG_FLOPPY);\n\n    if(this.bytes_expecting > 0)\n    {\n        this.receiving_command[this.receiving_index++] = reg_byte;\n\n        this.bytes_expecting--;\n\n        if(this.bytes_expecting === 0)\n        {\n            if(DEBUG)\n            {\n                var log = \"3F5 command received: \";\n                for(var i = 0; i < this.receiving_index; i++)\n                    log += h(this.receiving_command[i]) + \" \";\n                dbg_log(log, LOG_FLOPPY);\n            }\n\n            this.next_command.call(this, this.receiving_command);\n        }\n    }\n    else\n    {\n        switch(reg_byte)\n        {\n            // TODO\n            //case 2:\n                //this.next_command = read_complete_track;\n                //this.bytes_expecting = 8;\n                //break;\n            case 0x03:\n                this.next_command = this.fix_drive_data;\n                this.bytes_expecting = 2;\n                break;\n            case 0x04:\n                this.next_command = this.check_drive_status;\n                this.bytes_expecting = 1;\n                break;\n            case 0x05:\n            case 0xC5:\n                this.next_command = function(args) { this.do_sector(true, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0xE6:\n                this.next_command = function(args) { this.do_sector(false, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0x07:\n                this.next_command = this.calibrate;\n                this.bytes_expecting = 1;\n                break;\n            case 0x08:\n                this.check_interrupt_status();\n                break;\n            case 0x4A:\n                this.next_command = this.read_sector_id;\n                this.bytes_expecting = 1;\n                break;\n            case 0x0F:\n                this.bytes_expecting = 2;\n                this.next_command = this.seek;\n                break;\n            case 0x0E:\n                // dump regs\n                dbg_log(\"dump registers\", LOG_FLOPPY);\n                this.response_data[0] = 0x80;\n                this.response_index = 0;\n                this.response_length = 1;\n\n                this.bytes_expecting = 0;\n                break;\n\n            default:\n                dbg_assert(false, \"Unimplemented floppy command call \" + h(reg_byte));\n        }\n\n        this.receiving_index = 0;\n    }\n};\n\nFloppyController.prototype.port3F2_read = function()\n{\n    dbg_log(\"read 3F2: DOR\", LOG_FLOPPY);\n    return this.dor;\n}\n\nFloppyController.prototype.port3F2_write = function(value)\n{\n    if((value & 4) === 4 && (this.dor & 4) === 0)\n    {\n        // reset\n        this.cpu.device_raise_irq(6);\n    }\n\n    dbg_log(\"start motors: \" + h(value >> 4), LOG_FLOPPY);\n    dbg_log(\"enable dma: \" + !!(value & 8), LOG_FLOPPY);\n    dbg_log(\"reset fdc: \" + !!(value & 4), LOG_FLOPPY);\n    dbg_log(\"drive select: \" + (value & 3), LOG_FLOPPY);\n    dbg_log(\"DOR = \" + h(value), LOG_FLOPPY);\n\n    this.dor = value;\n}\n\nFloppyController.prototype.check_drive_status = function(args)\n{\n    dbg_log(\"check drive status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 1;\n    this.response_data[0] = 1 << 5;\n}\n\nFloppyController.prototype.seek = function(args)\n{\n    dbg_log(\"seek\", LOG_FLOPPY);\n    dbg_assert((args[0] & 3) === 0, \"Unhandled seek drive\");\n\n    this.last_cylinder = args[1];\n    this.last_head = args[0] >> 2 & 1;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.calibrate = function(args)\n{\n    dbg_log(\"floppy calibrate\", LOG_FLOPPY);\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.check_interrupt_status = function()\n{\n    // do not trigger an interrupt here\n    dbg_log(\"floppy check interrupt status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 2;\n\n    this.response_data[0] = 1 << 5;\n    this.response_data[1] = this.last_cylinder;\n}\n\nFloppyController.prototype.do_sector = function(is_write, args)\n{\n    var head = args[2],\n        cylinder = args[1],\n        sector = args[3],\n        sector_size = 128 << args[4],\n        read_count = args[5] - args[3] + 1,\n\n        read_offset = ((head + this.number_of_heads * cylinder) * this.sectors_per_track + sector - 1) * sector_size;\n\n    dbg_log(\"Floppy \" + (is_write ? \"Write\" : \"Read\"), LOG_FLOPPY);\n    dbg_log(\"from \" + h(read_offset) + \" length \" + h(read_count * sector_size), LOG_FLOPPY);\n    dbg_log(cylinder + \" / \" + head + \" / \" + sector, LOG_FLOPPY);\n\n    if(!args[4])\n    {\n        dbg_log(\"FDC: sector count is zero, use data length instead\", LOG_FLOPPY);\n    }\n\n    if(!this.fda_image)\n    {\n        return;\n    }\n\n    if(is_write)\n    {\n        this.dma.do_write(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n    else\n    {\n        this.dma.do_read(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n};\n\nFloppyController.prototype.done = function(args, cylinder, head, sector, error)\n{\n    if(error)\n    {\n        // TODO: Set appropriate bits\n        return;\n    }\n\n    sector++;\n\n    if(sector > this.sectors_per_track)\n    {\n        sector = 1;\n        head++;\n\n        if(head >= this.number_of_heads)\n        {\n            head = 0;\n            cylinder++;\n        }\n    }\n\n    this.last_cylinder = cylinder;\n    this.last_head = head;\n    this.last_sector = sector;\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = head << 2 | 0x20;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = cylinder;\n    this.response_data[4] = head;\n    this.response_data[5] = sector;\n    this.response_data[6] = args[4];\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.fix_drive_data = function(args)\n{\n    dbg_log(\"floppy fix drive data \" + args, LOG_FLOPPY);\n}\n\nFloppyController.prototype.read_sector_id = function(args)\n{\n    dbg_log(\"floppy read sector id \" + args, LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = 0;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = 0;\n    this.response_data[4] = 0;\n    this.response_data[5] = 0;\n    this.response_data[6] = 0;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.raise_irq = function()\n{\n    if(this.dor & 8)\n    {\n        this.cpu.device_raise_irq(6);\n    }\n};\n","\"use strict\";\n\n/** @const */\nvar A20_MASK = ~(1 << 20);\n/** @const */\nvar A20_MASK16 = ~(1 << 20 - 1);\n/** @const */\nvar A20_MASK32 = ~(1 << 20 - 2);\n\n/** @const */\nvar USE_A20 = false;\n\n\n// called by all memory writes\nCPU.prototype.debug_write = function(addr, size, value)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof value === \"number\" && !isNaN(value));\n    dbg_assert(value >= -0x80000000 && addr < 0x80000000);\n\n    this.debug_read(addr, size, true);\n}\n\n/**\n * @param {boolean=} is_write\n */\nCPU.prototype.debug_read = function(addr, size, is_write)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof addr === \"number\");\n    dbg_assert(!isNaN(addr));\n};\n\n\nCPU.prototype.mmap_read8 = function(addr)\n{\n    return this.memory_map_read8[addr >>> MMAP_BLOCK_BITS](addr);\n};\n\nCPU.prototype.mmap_write8 = function(addr, value)\n{\n    this.memory_map_write8[addr >>> MMAP_BLOCK_BITS](addr, value);\n};\n\nCPU.prototype.mmap_read16 = function(addr)\n{\n    var fn = this.memory_map_read8[addr >>> MMAP_BLOCK_BITS];\n\n    return fn(addr) | fn(addr + 1 | 0) << 8;\n};\n\nCPU.prototype.mmap_write16 = function(addr, value)\n{\n    var fn = this.memory_map_write8[addr >>> MMAP_BLOCK_BITS];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1 | 0, value >> 8 & 0xFF);\n};\n\nCPU.prototype.mmap_read32 = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    return this.memory_map_read32[aligned_addr](addr);\n}\n\nCPU.prototype.mmap_write32 = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    this.memory_map_write32[aligned_addr](addr, value);\n}\n\nCPU.prototype.in_mapped_range = function(addr)\n{\n    return (addr | 0) >= 0xA0000 && (addr | 0) < 0xC0000 || (addr >>> 0) >= (this.memory_size >>> 0);\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read8 = function(addr)\n{\n    this.debug_read(addr, 1);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read8(addr);\n    }\n    else\n    {\n        return this.mem8[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read16 = function(addr)\n{\n    this.debug_read(addr, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read16(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned16 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_read(addr << 1, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        return this.mmap_read16(addr << 1);\n    }\n    else\n    {\n        return this.mem16[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read32s = function(addr)\n{\n    this.debug_read(addr, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read32(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8 |\n            this.mem8[addr + 2 | 0] << 16 | this.mem8[addr + 3 | 0] << 24;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned32 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_read(addr << 2, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        return this.mmap_read32(addr << 2);\n    }\n    else\n    {\n        return this.mem32s[addr];\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write8 = function(addr, value)\n{\n    this.debug_write(addr, 1, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write8(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write16 = function(addr, value)\n{\n    this.debug_write(addr, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write16(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write_aligned16 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_write(addr << 1, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        this.mmap_write16(addr << 1, value);\n    }\n    else\n    {\n        this.mem16[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write32 = function(addr, value)\n{\n    this.debug_write(addr, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write32(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n        this.mem8[addr + 2 | 0] = value >> 16;\n        this.mem8[addr + 3 | 0] = value >> 24;\n    }\n};\n\nCPU.prototype.write_aligned32 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_write(addr << 2, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        this.mmap_write32(addr << 2, value);\n    }\n    else\n    {\n        this.mem32s[addr] = value;\n    }\n};\n\n/**\n * @param {Array.<number>|Uint8Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob = function(blob, offset)\n{\n    this.debug_write(offset, blob.length, 0)\n    dbg_assert(blob && blob.length >= 0);\n\n    this.mem8.set(blob, offset);\n};\n\n/**\n * @param {Array.<number>|Int32Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob32 = function(blob, offset)\n{\n    dbg_assert(blob && blob.length);\n    this.debug_write(offset, blob.length << 2, 0);\n    this.mem32s.set(blob, offset);\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction DMA(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.channel_page = new Uint8Array(8);\n    this.channel_pagehi = new Uint8Array(8);\n    this.channel_addr = new Uint16Array(8);\n    this.channel_addr_init = new Uint16Array(8);\n    this.channel_count = new Uint16Array(8);\n    this.channel_count_init = new Uint16Array(8);\n    this.channel_mask = new Uint8Array(8);\n    this.channel_mode = new Uint8Array(8);\n    this.unmask_listeners = [];\n\n    this.lsb_msb_flipflop = 0;\n\n    var io = cpu.io;\n\n    io.register_write(0x00, this, this.port_addr_write.bind(this, 0));\n    io.register_write(0x02, this, this.port_addr_write.bind(this, 1));\n    io.register_write(0x04, this, this.port_addr_write.bind(this, 2));\n    io.register_write(0x06, this, this.port_addr_write.bind(this, 3));\n    io.register_write(0x01, this, this.port_count_write.bind(this, 0));\n    io.register_write(0x03, this, this.port_count_write.bind(this, 1));\n    io.register_write(0x05, this, this.port_count_write.bind(this, 2));\n    io.register_write(0x07, this, this.port_count_write.bind(this, 3));\n\n    io.register_read(0x00, this, this.port_addr_read.bind(this, 0));\n    io.register_read(0x02, this, this.port_addr_read.bind(this, 1));\n    io.register_read(0x04, this, this.port_addr_read.bind(this, 2));\n    io.register_read(0x06, this, this.port_addr_read.bind(this, 3));\n    io.register_read(0x01, this, this.port_count_read.bind(this, 0));\n    io.register_read(0x03, this, this.port_count_read.bind(this, 1));\n    io.register_read(0x05, this, this.port_count_read.bind(this, 2));\n    io.register_read(0x07, this, this.port_count_read.bind(this, 3));\n\n    io.register_write(0xC0, this, this.port_addr_write.bind(this, 4));\n    io.register_write(0xC4, this, this.port_addr_write.bind(this, 5));\n    io.register_write(0xC8, this, this.port_addr_write.bind(this, 6));\n    io.register_write(0xCC, this, this.port_addr_write.bind(this, 7));\n    io.register_write(0xC2, this, this.port_count_write.bind(this, 4));\n    io.register_write(0xC6, this, this.port_count_write.bind(this, 5));\n    io.register_write(0xCA, this, this.port_count_write.bind(this, 6));\n    io.register_write(0xCE, this, this.port_count_write.bind(this, 7));\n\n    io.register_read(0xC0, this, this.port_addr_read.bind(this, 4));\n    io.register_read(0xC4, this, this.port_addr_read.bind(this, 5));\n    io.register_read(0xC8, this, this.port_addr_read.bind(this, 6));\n    io.register_read(0xCC, this, this.port_addr_read.bind(this, 7));\n    io.register_read(0xC2, this, this.port_count_read.bind(this, 4));\n    io.register_read(0xC6, this, this.port_count_read.bind(this, 5));\n    io.register_read(0xCA, this, this.port_count_read.bind(this, 6));\n    io.register_read(0xCE, this, this.port_count_read.bind(this, 7));\n\n    io.register_write(0x87, this, this.port_page_write.bind(this, 0));\n    io.register_write(0x83, this, this.port_page_write.bind(this, 1));\n    io.register_write(0x81, this, this.port_page_write.bind(this, 2));\n    io.register_write(0x82, this, this.port_page_write.bind(this, 3));\n    io.register_write(0x8F, this, this.port_page_write.bind(this, 4));\n    io.register_write(0x8B, this, this.port_page_write.bind(this, 5));\n    io.register_write(0x89, this, this.port_page_write.bind(this, 6));\n    io.register_write(0x8A, this, this.port_page_write.bind(this, 7));\n\n    io.register_read(0x87, this, this.port_page_read.bind(this, 0));\n    io.register_read(0x83, this, this.port_page_read.bind(this, 1));\n    io.register_read(0x81, this, this.port_page_read.bind(this, 2));\n    io.register_read(0x82, this, this.port_page_read.bind(this, 3));\n    io.register_read(0x8F, this, this.port_page_read.bind(this, 4));\n    io.register_read(0x8B, this, this.port_page_read.bind(this, 5));\n    io.register_read(0x89, this, this.port_page_read.bind(this, 6));\n    io.register_read(0x8A, this, this.port_page_read.bind(this, 7));\n\n    io.register_write(0x487, this, this.port_pagehi_write.bind(this, 0));\n    io.register_write(0x483, this, this.port_pagehi_write.bind(this, 1));\n    io.register_write(0x481, this, this.port_pagehi_write.bind(this, 2));\n    io.register_write(0x482, this, this.port_pagehi_write.bind(this, 3));\n    io.register_write(0x48B, this, this.port_pagehi_write.bind(this, 5));\n    io.register_write(0x489, this, this.port_pagehi_write.bind(this, 6));\n    io.register_write(0x48A, this, this.port_pagehi_write.bind(this, 7));\n\n    io.register_read(0x487, this, this.port_pagehi_read.bind(this, 0));\n    io.register_read(0x483, this, this.port_pagehi_read.bind(this, 1));\n    io.register_read(0x481, this, this.port_pagehi_read.bind(this, 2));\n    io.register_read(0x482, this, this.port_pagehi_read.bind(this, 3));\n    io.register_read(0x48B, this, this.port_pagehi_read.bind(this, 5));\n    io.register_read(0x489, this, this.port_pagehi_read.bind(this, 6));\n    io.register_read(0x48A, this, this.port_pagehi_read.bind(this, 7));\n\n    io.register_write(0x0A, this, this.port_singlemask_write.bind(this, 0));\n    io.register_write(0xD4, this, this.port_singlemask_write.bind(this, 4));\n    io.register_write(0x0F, this, this.port_multimask_write.bind(this, 0));\n    io.register_write(0xDE, this, this.port_multimask_write.bind(this, 4));\n\n    io.register_read(0x0F, this, this.port_multimask_read.bind(this, 0));\n    io.register_read(0xDE, this, this.port_multimask_read.bind(this, 4));\n\n    io.register_write(0x0B, this, this.port_mode_write.bind(this, 0));\n    io.register_write(0xD6, this, this.port_mode_write.bind(this, 4));\n\n    io.register_write(0x0C, this, this.portC_write);\n    io.register_write(0xD8, this, this.portC_write);\n}\n\nDMA.prototype.get_state = function()\n{\n    return [\n        this.channel_page,\n        this.channel_pagehi,\n        this.channel_addr,\n        this.channel_addr_init,\n        this.channel_count,\n        this.channel_count_init,\n        this.channel_mask,\n        this.channel_mode,\n        this.lsb_msb_flipflop,\n    ];\n};\n\nDMA.prototype.set_state = function(state)\n{\n    this.channel_page = state[0];\n    this.channel_pagehi = state[1];\n    this.channel_addr = state[2];\n    this.channel_addr_init = state[3];\n    this.channel_count = state[4];\n    this.channel_count_init = state[5];\n    this.channel_mask = state[6];\n    this.channel_mode = state[7];\n    this.lsb_msb_flipflop = state[8];\n};\n\nDMA.prototype.port_count_write = function(channel, data_byte)\n{\n    dbg_log(\"count write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_count[channel] =\n        this.flipflop_get(this.channel_count[channel], data_byte, false);\n\n    this.channel_count_init[channel] =\n        this.flipflop_get(this.channel_count_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_count_read = function(channel)\n{\n    dbg_log(\"count read [\" + channel + \"] -> \" + h(this.channel_count[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_count[channel]);\n};\n\nDMA.prototype.port_addr_write = function(channel, data_byte)\n{\n    dbg_log(\"addr write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_addr[channel] =\n        this.flipflop_get(this.channel_addr[channel], data_byte, false);\n\n    this.channel_addr_init[channel] =\n        this.flipflop_get(this.channel_addr_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_addr_read = function(channel)\n{\n    dbg_log(\"addr read [\" + channel + \"] -> \" + h(this.channel_addr[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_addr[channel]);\n};\n\nDMA.prototype.port_pagehi_write = function(channel, data_byte)\n{\n    dbg_log(\"pagehi write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_pagehi[channel] = data_byte;\n};\n\nDMA.prototype.port_pagehi_read = function(channel)\n{\n    dbg_log(\"pagehi read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_pagehi[channel];\n};\n\nDMA.prototype.port_page_write = function(channel, data_byte)\n{\n    dbg_log(\"page write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_page[channel] = data_byte;\n};\n\nDMA.prototype.port_page_read = function(channel)\n{\n    dbg_log(\"page read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_page[channel];\n};\n\nDMA.prototype.port_singlemask_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    var value = data_byte & 0x4 ? 1 : 0;\n    dbg_log(\"singlechannel mask write [\" + channel + \"] = \" + value, LOG_DMA);\n    this.update_mask(channel, value);\n};\n\nDMA.prototype.port_multimask_write = function(channel_offset, data_byte)\n{\n    dbg_log(\"multichannel mask write: \" + h(data_byte), LOG_DMA);\n    for(var i = 0; i < 4; i++)\n    {\n        this.update_mask(channel_offset + i, data_byte & (1 << i));\n    }\n};\n\nDMA.prototype.port_multimask_read = function(channel_offset)\n{\n    var value = 0;\n    value |= this.channel_mask[channel_offset + 0];\n    value |= this.channel_mask[channel_offset + 1] << 1;\n    value |= this.channel_mask[channel_offset + 2] << 2;\n    value |= this.channel_mask[channel_offset + 3] << 3;\n    dbg_log(\"multichannel mask read: \" + h(value), LOG_DMA);\n    return value;\n};\n\nDMA.prototype.port_mode_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    dbg_log(\"mode write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_mode[channel] = data_byte;\n};\n\nDMA.prototype.portC_write = function(data_byte)\n{\n    dbg_log(\"flipflop reset\", LOG_DMA);\n    this.lsb_msb_flipflop = 0;\n};\n\nDMA.prototype.on_unmask = function(fn, this_value)\n{\n    this.unmask_listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\nDMA.prototype.update_mask = function(channel, value)\n{\n    if(this.channel_mask[channel] !== value)\n    {\n        this.channel_mask[channel] = value;\n\n        if(!value)\n        {\n            dbg_log(\"firing on_unmask(\" + channel + \")\", LOG_DMA);\n            for(var i = 0; i < this.unmask_listeners.length; i++)\n            {\n                this.unmask_listeners[i].fn.call(\n                    this.unmask_listeners[i].this_value,\n                    channel\n                );\n            }\n        }\n    }\n};\n\n// read data, write to memory\nDMA.prototype.do_read = function(buffer, start, len, channel, fn)\n{\n    var read_count = this.count_get_8bit(channel),\n        addr = this.address_get_8bit(channel);\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_count), LOG_DMA);\n\n    if(len < read_count)\n    {\n        dbg_log(\"DMA should read more than provided: \" + h(len) + \" \" + h(read_count), LOG_DMA);\n    }\n\n    if(start + read_count > buffer.byteLength)\n    {\n        dbg_log(\"DMA read outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        var cpu = this.cpu;\n        this.channel_addr[channel] += read_count;\n\n        buffer.get(start, read_count, function(data)\n        {\n            cpu.write_blob(data, addr);\n            fn(false);\n        });\n    }\n};\n\n// write data, read memory\n// start and len in bytes\nDMA.prototype.do_write = function(buffer, start, len, channel, fn)\n{\n    var read_count = (this.channel_count[channel] + 1) & 0xFFFF,\n        bytes_per_count = channel >= 5 ? 2 : 1,\n        read_bytes = read_count * bytes_per_count,\n        addr = this.address_get_8bit(channel),\n        unfinished = false,\n        want_more = false,\n        autoinit = this.channel_mode[channel] & 0x10;\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_bytes), LOG_DMA);\n\n    if(len < read_bytes)\n    {\n        dbg_log(\"DMA should read more than provided\", LOG_DMA);\n        read_count = Math.floor(len / bytes_per_count);\n        read_bytes = read_count * bytes_per_count;\n        unfinished = true;\n    }\n    else if(len > read_bytes)\n    {\n        dbg_log(\"DMA attempted to read more than provided\", LOG_DMA);\n        want_more = true;\n    }\n\n    if(start + read_bytes > buffer.byteLength)\n    {\n        dbg_log(\"DMA write outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        this.channel_addr[channel] += read_count;\n        this.channel_count[channel] -= read_count;\n        // when complete, counter should underflow to 0xFFFF\n\n        if(!unfinished && autoinit)\n        {\n            dbg_log(\"DMA autoinit\", LOG_DMA);\n            this.channel_addr[channel] = this.channel_addr_init[channel];\n            this.channel_count[channel] = this.channel_count_init[channel];\n        }\n\n        buffer.set(start,\n                this.cpu.mem8.subarray(addr, addr + read_bytes),\n                () =>\n                {\n                    if(want_more && autoinit)\n                    {\n                        dbg_log(\"DMA continuing from start\", LOG_DMA);\n                        this.do_write(buffer, start + read_bytes, len - read_bytes, channel, fn);\n                    }\n                    else\n                    {\n                        fn(false);\n                    }\n                }\n            );\n    }\n};\n\nDMA.prototype.address_get_8bit = function(channel)\n{\n    var addr = this.channel_addr[channel];\n\n    // http://wiki.osdev.org/ISA_DMA#16_bit_issues\n    if(channel >= 5)\n    {\n        addr = (addr << 1);\n    }\n\n    addr &= 0xFFFF;\n    addr |= this.channel_page[channel] << 16;\n    addr |= this.channel_pagehi[channel] << 24;\n\n    return addr;\n};\n\nDMA.prototype.count_get_8bit = function(channel)\n{\n    var count = this.channel_count[channel] + 1;\n\n    if(channel >= 5)\n    {\n        count *= 2;\n    }\n\n    return count;\n};\n\nDMA.prototype.flipflop_get = function(old_dword, new_byte, continuing)\n{\n    if(!continuing)\n    {\n        this.lsb_msb_flipflop ^= 1;\n    }\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return old_dword & ~0xFF | new_byte;\n    }\n    else\n    {\n        // high byte\n        return old_dword & ~0xFF00 | new_byte << 8;\n    }\n};\n\nDMA.prototype.flipflop_read = function(dword)\n{\n    this.lsb_msb_flipflop ^= 1;\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return dword & 0xFF;\n    }\n    else\n    {\n        // high byte\n        return (dword >> 8) & 0xFF;\n    }\n};\n","\"use strict\";\n\n/**\n * @const\n * In kHz\n */\nvar OSCILLATOR_FREQ = 1193.1816666; // 1.193182 MHz\n\n/**\n * @constructor\n *\n * Programmable Interval Timer\n */\nfunction PIT(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.bus = bus;\n\n    this.counter_start_time = new Float64Array(3);\n    this.counter_start_value = new Uint16Array(3);\n\n    this.counter_next_low = new Uint8Array(4);\n    this.counter_enabled = new Uint8Array(4);\n    this.counter_mode = new Uint8Array(4);\n    this.counter_read_mode = new Uint8Array(4);\n\n    // 2 = latch low, 1 = latch high, 0 = no latch\n    this.counter_latch = new Uint8Array(4);\n    this.counter_latch_value = new Uint16Array(3);\n\n    this.counter_reload = new Uint16Array(3);\n\n    // TODO:\n    // - counter2 can be controlled by an input\n\n    cpu.io.register_read(0x61, this, function()\n    {\n        var now = v86.microtick();\n\n        var ref_toggle = (now * (1000 * 1000 / 15000)) & 1;\n        var counter2_out = this.did_rollover(2, now);\n\n        return ref_toggle << 4 | counter2_out << 5;\n    });\n    cpu.io.register_write(0x61, this, function(data)\n    {\n        if(data & 1)\n        {\n            this.bus.send(\"pcspeaker-enable\");\n        }\n        else\n        {\n            this.bus.send(\"pcspeaker-disable\");\n        }\n    });\n\n    cpu.io.register_read(0x40, this, function() { return this.counter_read(0); });\n    cpu.io.register_read(0x41, this, function() { return this.counter_read(1); });\n    cpu.io.register_read(0x42, this, function() { return this.counter_read(2); });\n\n    cpu.io.register_write(0x40, this, function(data) { this.counter_write(0, data); });\n    cpu.io.register_write(0x41, this, function(data) { this.counter_write(1, data); });\n    cpu.io.register_write(0x42, this, function(data) { this.counter_write(2, data); });\n\n    cpu.io.register_write(0x43, this, this.port43_write);\n}\n\nPIT.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.counter_next_low;\n    state[1] = this.counter_enabled;\n    state[2] = this.counter_mode;\n    state[3] = this.counter_read_mode;\n    state[4] = this.counter_latch;\n    state[5] = this.counter_latch_value;\n    state[6] = this.counter_reload;\n    state[7] = this.counter_start_time;\n    state[8] = this.counter_start_value;\n\n    return state;\n};\n\nPIT.prototype.set_state = function(state)\n{\n    this.counter_next_low = state[0];\n    this.counter_enabled = state[1];\n    this.counter_mode = state[2];\n    this.counter_read_mode = state[3];\n    this.counter_latch = state[4];\n    this.counter_latch_value = state[5];\n    this.counter_reload = state[6];\n    this.counter_start_time = state[7];\n    this.counter_start_value = state[8];\n};\n\nPIT.prototype.timer = function(now, no_irq)\n{\n    var time_to_next_interrupt = 100;\n\n    // counter 0 produces interrupts\n    if(!no_irq)\n    {\n        if(this.counter_enabled[0] && this.did_rollover(0, now))\n        {\n            time_to_next_interrupt = 0;\n\n            this.counter_start_value[0] = this.get_counter_value(0, now);\n            this.counter_start_time[0] = now;\n\n            dbg_log(\"pit interrupt. new value: \" + this.counter_start_value[0], LOG_PIT);\n\n            this.cpu.device_raise_irq(0);\n            var mode = this.counter_mode[0];\n\n            if(mode === 0)\n            {\n                this.counter_enabled[0] = 0;\n            }\n        }\n        else\n        {\n            this.cpu.device_lower_irq(0);\n        }\n    }\n    time_to_next_interrupt = 0;\n\n    return time_to_next_interrupt;\n};\n\nPIT.prototype.get_counter_value = function(i, now)\n{\n    if(!this.counter_enabled[i])\n    {\n        return 0;\n    }\n\n    var diff = now - this.counter_start_time[i];\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n\n    var value = this.counter_start_value[i] - diff_in_ticks;\n\n    dbg_log(\"diff=\" + diff + \" dticks=\" + diff_in_ticks + \" value=\" + value + \" reload=\" + this.counter_reload[i], LOG_PIT);\n\n    var reload = this.counter_reload[i];\n\n    if(value >= reload)\n    {\n        dbg_log(\"Warning: Counter\" + i + \" value \" + value  + \" is larger than reload \" + reload, LOG_PIT);\n        value %= reload;\n    }\n    else if(value < 0)\n    {\n        value = value % reload + reload;\n    }\n\n    return value;\n};\n\nPIT.prototype.did_rollover = function(i, now)\n{\n    var diff = now - this.counter_start_time[i];\n\n    if(diff < 0)\n    {\n        // should only happen after restore_state\n        dbg_log(\"Warning: PIT timer difference is negative, resetting\");\n        return true;\n    }\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n    //dbg_log(i + \": diff=\" + diff + \" start_time=\" + this.counter_start_time[i] + \" diff_in_ticks=\" + diff_in_ticks + \" (\" + diff * OSCILLATOR_FREQ + \") start_value=\" + this.counter_start_value[i] + \" did_rollover=\" + (this.counter_start_value[i] < diff_in_ticks), LOG_PIT);\n\n    return this.counter_start_value[i] < diff_in_ticks;\n};\n\nPIT.prototype.counter_read = function(i)\n{\n    var latch = this.counter_latch[i];\n\n    if(latch)\n    {\n        this.counter_latch[i]--;\n\n        if(latch === 2)\n        {\n            return this.counter_latch_value[i] & 0xFF;\n        }\n        else\n        {\n            return this.counter_latch_value[i] >> 8;\n        }\n    }\n    else\n    {\n        var next_low = this.counter_next_low[i];\n\n        if(this.counter_mode[i] === 3)\n        {\n            this.counter_next_low[i] ^= 1;\n        }\n\n        var value = this.get_counter_value(i, v86.microtick());\n\n        if(next_low)\n        {\n            return value & 0xFF;\n        }\n        else\n        {\n            return value >> 8;\n        }\n    }\n};\n\nPIT.prototype.counter_write = function(i, value)\n{\n    if(this.counter_next_low[i])\n    {\n        this.counter_reload[i] = this.counter_reload[i] & ~0xFF | value;\n    }\n    else\n    {\n        this.counter_reload[i] = this.counter_reload[i] & 0xFF | value << 8;\n    }\n\n    if(this.counter_read_mode[i] !== 3 || !this.counter_next_low[i])\n    {\n        if(!this.counter_reload[i])\n        {\n            this.counter_reload[i] = 0xFFFF;\n        }\n\n        // depends on the mode, should actually\n        // happen on the first tick\n        this.counter_start_value[i] = this.counter_reload[i];\n\n        this.counter_enabled[i] = true;\n\n        this.counter_start_time[i] = v86.microtick();\n\n        dbg_log(\"counter\" + i + \" reload=\" + h(this.counter_reload[i]) +\n                \" tick=\" + (this.counter_reload[i] || 0x10000) / OSCILLATOR_FREQ + \"ms\", LOG_PIT);\n    }\n\n    if(this.counter_read_mode[i] === 3)\n    {\n        this.counter_next_low[i] ^= 1;\n    }\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n\nPIT.prototype.port43_write = function(reg_byte)\n{\n    var mode = reg_byte >> 1 & 7,\n        binary_mode = reg_byte & 1,\n        i = reg_byte >> 6 & 3,\n        read_mode = reg_byte >> 4 & 3;\n\n    if(i === 1)\n    {\n        dbg_log(\"Unimplemented timer1\", LOG_PIT);\n    }\n\n    if(i === 3)\n    {\n        dbg_log(\"Unimplemented read back\", LOG_PIT);\n        return;\n    }\n\n    if(read_mode === 0)\n    {\n        // latch\n        this.counter_latch[i] = 2;\n        var value = this.get_counter_value(i, v86.microtick());\n        dbg_log(\"latch: \" + value, LOG_PIT);\n        this.counter_latch_value[i] = value ? value - 1 : 0\n\n        return;\n    }\n\n    if(mode >= 6)\n    {\n        // 6 and 7 are aliased to 2 and 3\n        mode &= ~4;\n    }\n\n    dbg_log(\"Control: mode=\" + mode + \" ctr=\" + i +\n            \" read_mode=\" + read_mode + \" bcd=\" + binary_mode, LOG_PIT);\n\n    if(read_mode === 1)\n    {\n        // msb\n        this.counter_next_low[i] = 0;\n    }\n    else if(read_mode === 2)\n    {\n        // lsb\n        this.counter_next_low[i] = 1;\n    }\n    else\n    {\n        // first lsb then msb\n        this.counter_next_low[i] = 1;\n    }\n\n    if(i === 0)\n    {\n        this.cpu.device_lower_irq(0);\n    }\n\n    if(mode === 0)\n    {\n    }\n    else if(mode === 3 || mode === 2)\n    {\n        // what is the difference\n    }\n    else\n    {\n        dbg_log(\"Unimplemented counter mode: \" + h(mode), LOG_PIT);\n    }\n\n    this.counter_mode[i] = mode;\n    this.counter_read_mode[i] = read_mode;\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n","\"use strict\";\n\n\nvar\n    /**\n     * Always 64k\n     * @const\n     */\n    VGA_BANK_SIZE = 64 * 1024,\n\n    /** @const */\n    MAX_XRES = 2560,\n\n    /** @const */\n    MAX_YRES = 1600,\n\n    /** @const */\n    MAX_BPP = 32;\n\n/** @const */\n//var VGA_LFB_ADDRESS = 0xFE000000; // set by seabios\nvar VGA_LFB_ADDRESS = 0xE0000000;\n\n/** @const */\nvar VGA_PIXEL_BUFFER_START = 4 * VGA_BANK_SIZE;\n\n/**\n * @const\n * Equals the maximum number of pixels for non svga.\n * 8 pixels per byte.\n */\nvar VGA_PIXEL_BUFFER_SIZE = 8 * VGA_BANK_SIZE;\n\n/** @const */\nvar VGA_MIN_MEMORY_SIZE = VGA_PIXEL_BUFFER_START + VGA_PIXEL_BUFFER_SIZE;\n\n/**\n * @const\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\n */\nvar VGA_HOST_MEMORY_SPACE_START = Uint32Array.from([\n    0xA0000,\n    0xA0000,\n    0xB0000,\n    0xB8000,\n]);\n\n/**\n * @const\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\n */\nvar VGA_HOST_MEMORY_SPACE_SIZE = Uint32Array.from([\n    0x20000, // 128K\n    0x10000, // 64K\n    0x8000, // 32K\n    0x8000, // 32K\n]);\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {number} vga_memory_size\n */\nfunction VGAScreen(cpu, bus, vga_memory_size)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.vga_memory_size = vga_memory_size;\n\n    /** @type {number} */\n    this.cursor_address = 0;\n\n    /** @type {number} */\n    this.cursor_scanline_start = 0xE;\n\n    /** @type {number} */\n    this.cursor_scanline_end = 0xF;\n\n    /**\n     * Number of columns in text mode\n     * @type {number}\n     */\n    this.max_cols = 80;\n\n    /**\n     * Number of rows in text mode\n     * @type {number}\n     */\n    this.max_rows = 25;\n\n    /**\n     * Width in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_width = 0;\n\n    /**\n     * Height in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_height = 0;\n\n    /**\n     * Logical width in pixels of virtual buffer available for panning\n     * @type {number}\n     */\n    this.virtual_width = 0;\n\n    /**\n     * Logical height in pixels of virtual buffer available for panning\n     * @type {number}\n     */\n    this.virtual_height = 0;\n\n    /**\n     * The rectangular fragments of the image buffer, and their destination\n     * locations, to be drawn every screen_fill_buffer during VGA modes.\n     * @type {Array<Object<string, number>>}\n     */\n    this.layers = [];\n\n    /**\n     * video memory start address\n     * @type {number}\n     */\n    this.start_address = 0;\n\n    /**\n     * Start address - a copy of start_address that only gets updated\n     * during VSync, used for panning and page flipping\n     * @type {number}\n     */\n    this.start_address_latched = 0;\n\n    /**\n     * Unimplemented CRTC registers go here\n     */\n    this.crtc = new Uint8Array(0x19);\n\n    // Implemented CRTC registers:\n\n    /** @type {number} */\n    this.crtc_mode = 0;\n\n    /** @type {number} */\n    this.horizontal_display_enable_end = 0;\n\n    /** @type {number} */\n    this.horizontal_blank_start = 0;\n\n    /** @type {number} */\n    this.vertical_display_enable_end = 0;\n\n    /** @type {number} */\n    this.vertical_blank_start = 0;\n\n    /** @type {number} */\n    this.underline_location_register = 0;\n\n    /** @type {number} */\n    this.preset_row_scan = 0;\n\n    /** @type {number} */\n    this.offset_register = 0;\n\n    /** @type {number} */\n    this.line_compare = 0;\n\n    // End of CRTC registers\n\n    /**\n     * Used for svga, e.g. banked modes\n     * @type{boolean}\n     */\n    this.graphical_mode_is_linear = true;\n\n    /** @type {boolean} */\n    this.graphical_mode = false;\n    setTimeout(() => { bus.send(\"screen-set-mode\", this.graphical_mode); }, 0);\n\n    /*\n     * VGA palette containing 256 colors for video mode 13, svga 8bpp, etc.\n     * Needs to be initialised by the BIOS\n     */\n    this.vga256_palette = new Int32Array(256);\n\n    /**\n     * VGA read latches\n     * @type{number}\n     */\n    this.latch_dword = 0;\n\n    /** @type {number} */\n    this.svga_width = 0;\n\n    /** @type {number} */\n    this.svga_height = 0;\n\n    this.svga_enabled = false;\n\n    /** @type {number} */\n    this.svga_bpp = 32;\n\n    /** @type {number} */\n    this.svga_bank_offset = 0;\n\n    /**\n     * The video buffer offset created by VBE_DISPI_INDEX_Y_OFFSET\n     * In bytes\n     * @type {number}\n     */\n    this.svga_offset = 0;\n\n    // Experimental, could probably need some changes\n    // 01:00.0 VGA compatible controller: NVIDIA Corporation GT216 [GeForce GT 220] (rev a2)\n    this.pci_space = [\n        0xde, 0x10, 0x20, 0x0a, 0x07, 0x00, 0x00, 0x00,  0xa2, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00,\n        0x08, VGA_LFB_ADDRESS >>> 8, VGA_LFB_ADDRESS >>> 16, VGA_LFB_ADDRESS >>> 24,\n                                0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x12 << 3;\n    this.pci_bars = [\n        {\n            size: vga_memory_size,\n        },\n    ];\n\n    // TODO: Should be matched with vga bios size and mapping address\n    // Seabios config for this device:\n    // CONFIG_VGA_PCI=y\n    // CONFIG_OVERRIDE_PCI_ID=y\n    // CONFIG_VGA_VID=0x10de\n    // CONFIG_VGA_DID=0x0a20\n\n    this.pci_rom_size = 0x10000;\n    this.pci_rom_address = 0xFEB00000;\n\n    this.name = \"vga\";\n\n    this.stats = {\n        is_graphical: false,\n        res_x: 0,\n        res_y: 0,\n        bpp: 0,\n    };\n\n    this.index_crtc = 0;\n\n    // index for setting colors through port 3C9h\n    this.dac_color_index_write = 0;\n    this.dac_color_index_read = 0;\n    this.dac_state = 0;\n\n    this.dac_map = new Uint8Array(0x10);\n\n    this.attribute_controller_index = -1;\n    this.palette_source = 0x20;\n    this.attribute_mode = 0;\n    this.color_plane_enable = 0;\n    this.horizontal_panning = 0;\n    this.color_select = 0;\n\n    this.sequencer_index = -1;\n\n    // bitmap of planes 0-3\n    this.plane_write_bm = 0xF;\n    this.sequencer_memory_mode = 0;\n    this.clocking_mode = 0;\n    this.graphics_index = -1;\n\n    this.plane_read = 0, // value 0-3, which plane to read\n    this.planar_mode = 0;\n    this.planar_rotate_reg = 0;\n    this.planar_bitmap = 0xFF;\n    this.planar_setreset = 0;\n    this.planar_setreset_enable = 0;\n    this.miscellaneous_graphics_register = 0;\n\n    this.color_compare = 0;\n    this.color_dont_care = 0;\n\n    this.max_scan_line = 0;\n\n    this.miscellaneous_output_register = 0xff;\n    this.port_3DA_value = 0xFF;\n\n\n    var io = cpu.io;\n\n    io.register_write(0x3C0, this, this.port3C0_write);\n    io.register_read(0x3C0, this, this.port3C0_read, this.port3C0_read16);\n\n    io.register_read(0x3C1, this, this.port3C1_read);\n    io.register_write(0x3C2, this, this.port3C2_write);\n\n    io.register_write_consecutive(0x3C4, this, this.port3C4_write, this.port3C5_write);\n\n    io.register_read(0x3C4, this, this.port3C4_read);\n    io.register_read(0x3C5, this, this.port3C5_read);\n\n    io.register_write_consecutive(0x3CE, this, this.port3CE_write, this.port3CF_write);\n\n    io.register_read(0x3CE, this, this.port3CE_read);\n    io.register_read(0x3CF, this, this.port3CF_read);\n\n    io.register_write(0x3C7, this, this.port3C7_write);\n    io.register_read(0x3C7, this, this.port3C7_read);\n    io.register_write(0x3C8, this, this.port3C8_write);\n    io.register_read(0x3C8, this, this.port3C8_read);\n    io.register_write(0x3C9, this, this.port3C9_write);\n    io.register_read(0x3C9, this, this.port3C9_read);\n\n    io.register_read(0x3CC, this, this.port3CC_read);\n\n    io.register_write_consecutive(0x3D4, this, this.port3D4_write, this.port3D5_write);\n    io.register_read(0x3D4, this, this.port3D4_read);\n    io.register_read(0x3D5, this, this.port3D5_read);\n\n    io.register_read(0x3CA, this, function() { dbg_log(\"3CA read\", LOG_VGA); return 0; });\n\n    io.register_read(0x3DA, this, this.port3DA_read);\n    io.register_read(0x3BA, this, this.port3DA_read);\n\n\n    // Bochs VBE Extensions\n    // http://wiki.osdev.org/Bochs_VBE_Extensions\n    this.dispi_index = -1;\n    this.dispi_enable_value = 0;\n\n    io.register_write(0x1CE, this, undefined, this.port1CE_write);\n\n    io.register_write(0x1CF, this, undefined, this.port1CF_write);\n    io.register_read(0x1CF, this, undefined, this.port1CF_read);\n\n    if(this.vga_memory_size === undefined || this.vga_memory_size < VGA_MIN_MEMORY_SIZE)\n    {\n        this.vga_memory_size = VGA_MIN_MEMORY_SIZE;\n        dbg_log(\"vga memory size rounded up to \" + this.vga_memory_size, LOG_VGA);\n    }\n    else if(this.vga_memory_size & (VGA_BANK_SIZE - 1))\n    {\n        // round up to next 64k\n        this.vga_memory_size |= VGA_BANK_SIZE - 1;\n        this.vga_memory_size++;\n    }\n\n    this.svga_memory = new Uint8Array(this.vga_memory_size);\n\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n    this.diff_plot_min = this.vga_memory_size;\n    this.diff_plot_max = 0;\n\n    this.dest_buffer = undefined;\n\n    bus.register(\"screen-tell-buffer\", function(data)\n    {\n        if(this.dest_buffer && data[0])\n        {\n            data[0].set(this.dest_buffer.subarray(0, data[0].length));\n        }\n        this.dest_buffer = data[0];\n    }, this);\n\n    bus.register(\"screen-fill-buffer\", function()\n    {\n        this.screen_fill_buffer();\n    }, this);\n\n\n    this.svga_memory16 = new Uint16Array(this.svga_memory.buffer);\n    this.svga_memory32 = new Int32Array(this.svga_memory.buffer);\n    this.vga_memory = new Uint8Array(this.svga_memory.buffer, 0, 4 * VGA_BANK_SIZE);\n    this.plane0 = new Uint8Array(this.svga_memory.buffer, 0 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane1 = new Uint8Array(this.svga_memory.buffer, 1 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane2 = new Uint8Array(this.svga_memory.buffer, 2 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane3 = new Uint8Array(this.svga_memory.buffer, 3 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.pixel_buffer = new Uint8Array(this.svga_memory.buffer,\n        VGA_PIXEL_BUFFER_START, VGA_PIXEL_BUFFER_SIZE);\n\n    var me = this;\n    io.mmap_register(0xA0000, 0x20000,\n        function(addr) { return me.vga_memory_read(addr); },\n        function(addr, value) { me.vga_memory_write(addr, value); }\n    );\n    io.mmap_register(VGA_LFB_ADDRESS, this.vga_memory_size,\n        function(addr) { return me.svga_memory_read8(addr); },\n        function(addr, value) { me.svga_memory_write8(addr, value); },\n        function(addr) { return me.svga_memory_read32(addr); },\n        function(addr, value) { me.svga_memory_write32(addr, value); }\n    );\n\n    cpu.devices.pci.register_device(this);\n}\n\nVGAScreen.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.vga_memory_size;\n    state[1] = this.cursor_address;\n    state[2] = this.cursor_scanline_start;\n    state[3] = this.cursor_scanline_end;\n    state[4] = this.max_cols;\n    state[5] = this.max_rows;\n    state[6] = this.layers;\n    state[7] = this.dac_state;\n    state[8] = this.start_address;\n    state[9] = this.graphical_mode;\n    state[10] = this.vga256_palette;\n    state[11] = this.latch_dword;\n    state[12] = this.color_compare;\n    state[13] = this.color_dont_care;\n    state[14] = this.miscellaneous_graphics_register;\n    state[15] = this.svga_width;\n    state[16] = this.svga_height;\n    state[17] = this.crtc_mode;\n    state[18] = this.svga_enabled;\n    state[19] = this.svga_bpp;\n    state[20] = this.svga_bank_offset;\n    state[21] = this.svga_offset;\n    state[22] = this.index_crtc;\n    state[23] = this.dac_color_index_write;\n    state[24] = this.dac_color_index_read;\n    state[25] = this.dac_map;\n    state[26] = this.sequencer_index;\n    state[27] = this.plane_write_bm;\n    state[28] = this.sequencer_memory_mode;\n    state[29] = this.graphics_index;\n    state[30] = this.plane_read;\n    state[31] = this.planar_mode;\n    state[32] = this.planar_rotate_reg;\n    state[33] = this.planar_bitmap;\n    state[34] = this.max_scan_line;\n    state[35] = this.miscellaneous_output_register;\n    state[36] = this.port_3DA_value;\n    state[37] = this.dispi_index;\n    state[38] = this.dispi_enable_value;\n    state[39] = this.svga_memory;\n    state[40] = this.graphical_mode_is_linear;\n    state[41] = this.attribute_controller_index;\n    state[42] = this.offset_register;\n    state[43] = this.planar_setreset;\n    state[44] = this.planar_setreset_enable;\n    state[45] = this.start_address_latched;\n    state[46] = this.crtc;\n    state[47] = this.horizontal_display_enable_end;\n    state[48] = this.horizontal_blank_start;\n    state[49] = this.vertical_display_enable_end;\n    state[50] = this.vertical_blank_start;\n    state[51] = this.underline_location_register;\n    state[52] = this.preset_row_scan;\n    state[53] = this.offset_register;\n    state[54] = this.palette_source;\n    state[55] = this.attribute_mode;\n    state[56] = this.color_plane_enable;\n    state[57] = this.horizontal_panning;\n    state[58] = this.color_select;\n    state[59] = this.clocking_mode;\n    state[60] = this.line_compare;\n\n    return state;\n};\n\nVGAScreen.prototype.set_state = function(state)\n{\n    this.vga_memory_size = state[0];\n    this.cursor_address = state[1];\n    this.cursor_scanline_start = state[2];\n    this.cursor_scanline_end = state[3];\n    this.max_cols = state[4];\n    this.max_rows = state[5];\n    this.layers = state[6];\n    this.dac_state = state[7];\n    this.start_address = state[8];\n    this.graphical_mode = state[9];\n    this.vga256_palette = state[10];\n    this.latch_dword = state[11];\n    this.color_compare = state[12];\n    this.color_dont_care = state[13];\n    this.miscellaneous_graphics_register = state[14];\n    this.svga_width = state[15];\n    this.svga_height = state[16];\n    this.crtc_mode = state[17];\n    this.svga_enabled = state[18];\n    this.svga_bpp = state[19];\n    this.svga_bank_offset = state[20];\n    this.svga_offset = state[21];\n    this.index_crtc = state[22];\n    this.dac_color_index_write = state[23];\n    this.dac_color_index_read = state[24];\n    this.dac_map = state[25];\n    this.sequencer_index = state[26];\n    this.plane_write_bm = state[27];\n    this.sequencer_memory_mode = state[28];\n    this.graphics_index = state[29];\n    this.plane_read = state[30];\n    this.planar_mode = state[31];\n    this.planar_rotate_reg = state[32];\n    this.planar_bitmap = state[33];\n    this.max_scan_line = state[34];\n    this.miscellaneous_output_register = state[35];\n    this.port_3DA_value = state[36];\n    this.dispi_index = state[37];\n    this.dispi_enable_value = state[38];\n    this.svga_memory.set(state[39]);\n    this.graphical_mode_is_linear = state[40];\n    this.attribute_controller_index = state[41];\n    this.offset_register = state[42];\n    this.planar_setreset = state[43];\n    this.planar_setreset_enable = state[44];\n    this.start_address_latched = state[45];\n    this.crtc.set(state[46]);\n    this.horizontal_display_enable_end = state[47];\n    this.horizontal_blank_start = state[48];\n    this.vertical_display_enable_end = state[49];\n    this.vertical_blank_start = state[50];\n    this.underline_location_register = state[51];\n    this.preset_row_scan = state[52];\n    this.offset_register = state[53];\n    this.palette_source = state[54];\n    this.attribute_mode = state[55];\n    this.color_plane_enable = state[56];\n    this.horizontal_panning = state[57];\n    this.color_select = state[58];\n    this.clocking_mode = state[59];\n    this.line_compare = state[60];\n\n    this.bus.send(\"screen-set-mode\", this.graphical_mode);\n\n    if(this.graphical_mode)\n    {\n        // Ensure set_size_graphical will update\n        this.screen_width = 0;\n        this.screen_height = 0;\n\n        if(this.svga_enabled)\n        {\n            this.set_size_graphical(this.svga_width, this.svga_height,\n                this.svga_bpp, this.svga_width, this.svga_height);\n            this.update_layers();\n        }\n        else\n        {\n            this.update_vga_size();\n            this.complete_replot();\n        }\n    }\n    else\n    {\n        this.set_size_text(this.max_cols, this.max_rows);\n        this.update_cursor_scanline();\n        this.update_cursor();\n    }\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.vga_memory_read = function(addr)\n{\n    if(this.svga_enabled && this.graphical_mode_is_linear)\n    {\n        addr -= 0xA0000;\n        addr |= this.svga_bank_offset;\n\n        return this.svga_memory[addr];\n    }\n\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\n\n    // VGA chip only decodes addresses within the selected memory space.\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\n    {\n        dbg_log(\"vga read outside memory space: addr:\" + h(addr), LOG_VGA);\n        return 0;\n    }\n\n    this.latch_dword = this.plane0[addr];\n    this.latch_dword |= this.plane1[addr] << 8;\n    this.latch_dword |= this.plane2[addr] << 16;\n    this.latch_dword |= this.plane3[addr] << 24;\n\n    if(this.planar_mode & 0x08)\n    {\n        // read mode 1\n        var reading = 0xFF;\n\n        if(this.color_dont_care & 0x1)\n        {\n            reading &= this.plane0[addr] ^ ~(this.color_compare & 0x1 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x2)\n        {\n            reading &= this.plane1[addr] ^ ~(this.color_compare & 0x2 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x4)\n        {\n            reading &= this.plane2[addr] ^ ~(this.color_compare & 0x4 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x8)\n        {\n            reading &= this.plane3[addr] ^ ~(this.color_compare & 0x8 ? 0xFF : 0x00);\n        }\n\n        return reading;\n    }\n    else\n    {\n        // read mode 0\n\n        var plane = this.plane_read;\n        if(!this.graphical_mode)\n        {\n            // We currently put all text data linearly\n            plane = 0;\n        }\n        else if(this.sequencer_memory_mode & 0x8)\n        {\n            // Chain 4\n            plane = addr & 0x3;\n            addr &= ~0x3;\n        }\n        else if(this.planar_mode & 0x10)\n        {\n            // Odd/Even host read\n            plane = addr & 0x1;\n            addr &= ~0x1;\n        }\n        return this.vga_memory[plane << 16 | addr];\n    }\n};\n\nVGAScreen.prototype.vga_memory_write = function(addr, value)\n{\n    if(this.svga_enabled && this.graphical_mode && this.graphical_mode_is_linear)\n    {\n        // vbe banked mode\n        addr -= 0xA0000;\n        this.vga_memory_write_graphical_linear(addr, value);\n        return;\n    }\n\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\n\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\n    {\n        dbg_log(\"vga write outside memory space: addr:\" + h(addr) + \", value:\" + h(value), LOG_VGA);\n        return;\n    }\n\n    if(this.graphical_mode)\n    {\n        this.vga_memory_write_graphical(addr, value);\n    }\n    else\n    {\n        if(!(this.plane_write_bm & 0x3))\n        {\n            // Ignore writes to font planes.\n            return;\n        }\n        this.vga_memory_write_text_mode(addr, value);\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_graphical_linear = function(addr, value)\n{\n    addr |= this.svga_bank_offset;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n};\n\nVGAScreen.prototype.vga_memory_write_graphical = function(addr, value)\n{\n    var plane_dword;\n    var write_mode = this.planar_mode & 3;\n    var bitmask = this.apply_feed(this.planar_bitmap);\n    var setreset_dword = this.apply_expand(this.planar_setreset);\n    var setreset_enable_dword = this.apply_expand(this.planar_setreset_enable);\n\n    // Write modes - see http://www.osdever.net/FreeVGA/vga/graphreg.htm#05\n    switch(write_mode)\n    {\n        case 0:\n            value = this.apply_rotate(value);\n            plane_dword = this.apply_feed(value);\n            plane_dword = this.apply_setreset(plane_dword, setreset_enable_dword);\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n        case 1:\n            plane_dword = this.latch_dword;\n            break;\n        case 2:\n            plane_dword = this.apply_expand(value);\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n        case 3:\n            value = this.apply_rotate(value);\n            bitmask &= this.apply_feed(value);\n            plane_dword = setreset_dword;\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n    }\n\n    var plane_select = 0xF;\n\n    switch(this.sequencer_memory_mode & 0xC)\n    {\n        // Odd/Even (aka chain 2)\n        case 0x0:\n            plane_select = 0x5 << (addr & 0x1);\n            addr &= ~0x1;\n            break;\n\n        // Chain 4\n        // Note: FreeVGA may have mistakenly stated that this bit field is\n        // for system read only, yet the IBM Open Source Graphics Programmer's\n        // Reference Manual explicitly states \"both read and write\".\n        case 0x8:\n        case 0xC:\n            plane_select = 1 << (addr & 0x3);\n            addr &= ~0x3;\n            break;\n    }\n\n    // Plane masks take precedence\n    // See: http://www.osdever.net/FreeVGA/vga/seqreg.htm#02\n    plane_select &= this.plane_write_bm;\n\n    if(plane_select & 0x1) this.plane0[addr] = (plane_dword >> 0) & 0xFF;\n    if(plane_select & 0x2) this.plane1[addr] = (plane_dword >> 8) & 0xFF;\n    if(plane_select & 0x4) this.plane2[addr] = (plane_dword >> 16) & 0xFF;\n    if(plane_select & 0x8) this.plane3[addr] = (plane_dword >> 24) & 0xFF;\n\n    var pixel_addr = this.vga_addr_to_pixel(addr);\n    this.partial_replot(pixel_addr, pixel_addr + 7);\n};\n\n/**\n * Copies data_byte into the four planes, with each plane\n * represented by an 8-bit field inside the dword.\n * @param {number} data_byte\n * @return {number} 32-bit number representing the bytes for each plane.\n */\nVGAScreen.prototype.apply_feed = function(data_byte)\n{\n    var dword = data_byte;\n    dword |= data_byte << 8;\n    dword |= data_byte << 16;\n    dword |= data_byte << 24;\n    return dword;\n};\n\n/**\n * Expands bits 0 to 3 to ocupy bits 0 to 31. Each\n * bit is expanded to 0xFF if set or 0x00 if clear.\n * @param {number} data_byte\n * @return {number} 32-bit number representing the bytes for each plane.\n */\nVGAScreen.prototype.apply_expand = function(data_byte)\n{\n    var dword = data_byte & 0x1 ? 0xFF : 0x00;\n    dword |= (data_byte & 0x2 ? 0xFF : 0x00) << 8;\n    dword |= (data_byte & 0x4 ? 0xFF : 0x00) << 16;\n    dword |= (data_byte & 0x8 ? 0xFF : 0x00) << 24;\n    return dword;\n};\n\n/**\n * Planar Write - Barrel Shifter\n * @param {number} data_byte\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading3}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\n */\nVGAScreen.prototype.apply_rotate = function(data_byte)\n{\n    var wrapped = data_byte | (data_byte << 8);\n    var count = this.planar_rotate_reg & 0x7;\n    var shifted = wrapped >>> count;\n    return shifted & 0xFF;\n};\n\n/**\n * Planar Write - Set / Reset Circuitry\n * @param {number} data_dword\n * @param {number} enable_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-03.html#Heading5}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#00}\n */\nVGAScreen.prototype.apply_setreset = function(data_dword, enable_dword)\n{\n    var setreset_dword = this.apply_expand(this.planar_setreset);\n    data_dword |= enable_dword & setreset_dword;\n    data_dword &= ~enable_dword | setreset_dword;\n    return data_dword;\n};\n\n/**\n * Planar Write - ALU Unit\n * @param {number} data_dword\n * @param {number} latch_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch24/24-01.html#Heading3}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\n */\nVGAScreen.prototype.apply_logical = function(data_dword, latch_dword)\n{\n    switch(this.planar_rotate_reg & 0x18)\n    {\n        case 0x08:\n            return data_dword & latch_dword;\n        case 0x10:\n            return data_dword | latch_dword;\n        case 0x18:\n            return data_dword ^ latch_dword;\n    }\n    return data_dword;\n};\n\n/**\n * Planar Write - Bitmask Unit\n * @param {number} data_dword\n * @param {number} bitmask_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading2}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#08}\n */\nVGAScreen.prototype.apply_bitmask = function(data_dword, bitmask_dword)\n{\n    var plane_dword = bitmask_dword & data_dword;\n    plane_dword |= ~bitmask_dword & this.latch_dword;\n    return plane_dword;\n};\n\nVGAScreen.prototype.text_mode_redraw = function()\n{\n    var addr = this.start_address << 1,\n        chr,\n        color;\n\n    for(var row = 0; row < this.max_rows; row++)\n    {\n        for(var col = 0; col < this.max_cols; col++)\n        {\n            chr = this.vga_memory[addr];\n            color = this.vga_memory[addr | 1];\n\n            this.bus.send(\"screen-put-char\", [row, col, chr,\n                this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n            addr += 2;\n        }\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_text_mode = function(addr, value)\n{\n    var memory_start = (addr >> 1) - this.start_address,\n        row = memory_start / this.max_cols | 0,\n        col = memory_start % this.max_cols,\n        chr,\n        color;\n\n    // XXX: Should handle 16 bit write if possible\n    if(addr & 1)\n    {\n        color = value;\n        chr = this.vga_memory[addr & ~1];\n    }\n    else\n    {\n        chr = value;\n        color = this.vga_memory[addr | 1];\n    }\n\n    this.bus.send(\"screen-put-char\", [row, col, chr,\n            this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n    this.vga_memory[addr] = value;\n};\n\nVGAScreen.prototype.update_cursor = function()\n{\n    var row = (this.cursor_address - this.start_address) / this.max_cols | 0,\n        col = (this.cursor_address - this.start_address) % this.max_cols;\n\n    row = Math.min(this.max_rows - 1, row);\n\n    this.bus.send(\"screen-update-cursor\", [row, col]);\n};\n\nVGAScreen.prototype.svga_memory_read8 = function(addr)\n{\n    return this.svga_memory[addr & 0xFFFFFFF];\n};\n\nVGAScreen.prototype.svga_memory_read32 = function(addr)\n{\n    addr &= 0xFFFFFFF;\n\n    if(addr & 3)\n    {\n        return this.svga_memory[addr] | this.svga_memory[addr + 1] << 8 |\n               this.svga_memory[addr + 2] << 16 | this.svga_memory[addr + 3] << 24;\n    }\n    else\n    {\n        return this.svga_memory32[addr >> 2];\n    }\n};\n\nVGAScreen.prototype.svga_memory_write8 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n    this.svga_memory[addr] = value;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n};\n\nVGAScreen.prototype.svga_memory_write32 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr + 3 > this.diff_addr_max ? addr + 3 : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n    this.svga_memory[addr + 1] = value >> 8;\n    this.svga_memory[addr + 2] = value >> 16;\n    this.svga_memory[addr + 3] = value >> 24;\n};\n\nVGAScreen.prototype.complete_redraw = function()\n{\n    dbg_log(\"complete redraw\", LOG_VGA);\n\n    if(this.graphical_mode)\n    {\n        this.diff_addr_min = 0;\n\n        if(this.svga_enabled)\n        {\n            this.diff_addr_max = this.vga_memory_size;\n        }\n        else\n        {\n            this.diff_addr_max = VGA_PIXEL_BUFFER_SIZE;\n        }\n    }\n    else\n    {\n        this.text_mode_redraw();\n    }\n};\n\nVGAScreen.prototype.complete_replot = function()\n{\n    dbg_log(\"complete replot\", LOG_VGA);\n\n    if(!this.graphical_mode || this.svga_enabled)\n    {\n        return;\n    }\n\n    this.diff_plot_min = 0;\n    this.diff_plot_max = VGA_PIXEL_BUFFER_SIZE;\n\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.partial_redraw = function(min, max)\n{\n    if(min < this.diff_addr_min) this.diff_addr_min = min;\n    if(max > this.diff_addr_max) this.diff_addr_max = max;\n};\n\nVGAScreen.prototype.partial_replot = function(min, max)\n{\n    if(min < this.diff_plot_min) this.diff_plot_min = min;\n    if(max > this.diff_plot_max) this.diff_plot_max = max;\n\n    this.partial_redraw(min, max);\n};\n\nVGAScreen.prototype.reset_diffs = function()\n{\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n    this.diff_plot_min = this.vga_memory_size;\n    this.diff_plot_max = 0;\n};\n\nVGAScreen.prototype.destroy = function()\n{\n\n};\n\nVGAScreen.prototype.vga_bytes_per_line = function()\n{\n    var bytes_per_line = this.offset_register << 2;\n    if(this.underline_location_register & 0x40) bytes_per_line <<= 1;\n    else if(this.crtc_mode & 0x40) bytes_per_line >>>= 1;\n    return bytes_per_line;\n};\n\nVGAScreen.prototype.vga_addr_shift_count = function()\n{\n    // Count in multiples of 0x40 for convenience\n    // Left shift 2 for word mode - 2 bytes per dot clock\n    var shift_count = 0x80;\n\n    // Left shift 3 for byte mode - 1 byte per dot clock\n    shift_count += ~this.underline_location_register & this.crtc_mode & 0x40;\n\n    // Left shift 1 for doubleword mode - 4 bytes per dot clock\n    shift_count -= this.underline_location_register & 0x40;\n\n    // But shift one less if PEL width mode - 2 dot clocks per pixel\n    shift_count -= this.attribute_mode & 0x40;\n\n    return shift_count >>> 6;\n};\n\nVGAScreen.prototype.vga_addr_to_pixel = function(addr)\n{\n    var shift_count = this.vga_addr_shift_count();\n\n    // Undo effects of substituted bits 13 and 14\n    // Assumptions:\n    //  - max_scan_line register is set to the values shown below\n    //  - Each scan line stays within the offset alignment\n    //  - No panning and no page flipping after drawing\n    if(~this.crtc_mode & 0x3)\n    {\n        var pixel_addr = addr - this.start_address;\n\n        // Remove substituted bits\n        pixel_addr &= this.crtc_mode << 13 | ~0x6000;\n\n        // Convert to 1 pixel per address\n        pixel_addr <<= shift_count;\n\n        // Decompose address\n        var row = pixel_addr / this.virtual_width | 0;\n        var col = pixel_addr % this.virtual_width;\n\n        switch(this.crtc_mode & 0x3)\n        {\n            case 0x2:\n                // Alternating rows using bit 13\n                // Assumes max scan line = 1\n                row = row << 1 | (addr >> 13 & 0x1);\n                break;\n            case 0x1:\n                // Alternating rows using bit 14\n                // Assumes max scan line = 3\n                row = row << 1 | (addr >> 14 & 0x1);\n                break;\n            case 0x0:\n                // Cycling through rows using bit 13 and 14\n                // Assumes max scan line = 3\n                row = row << 2 | (addr >> 13 & 0x3);\n                break;\n        }\n\n        // Reassemble address\n        return row * this.virtual_width + col + (this.start_address << shift_count);\n    }\n    else\n    {\n        // Convert to 1 pixel per address\n        return addr << shift_count;\n    }\n};\n\nVGAScreen.prototype.scan_line_to_screen_row = function(scan_line)\n{\n    // Double scanning. The clock to the row scan counter is halved\n    // so it is not affected by the memory address bit substitutions below\n    if(this.max_scan_line & 0x80)\n    {\n        scan_line >>>= 1;\n    }\n\n    // Maximum scan line, aka scan lines per character row\n    // This is the number of repeats - 1 for graphic modes\n    var repeat_factor = 1 + (this.max_scan_line & 0x1F);\n    scan_line = Math.ceil(scan_line / repeat_factor);\n\n    // Odd and Even Row Scan Counter\n    // Despite repeated address counter values, because bit 13 of the shifted\n    // address is substituted with bit 0 of the row scan counter, a different\n    // display buffer address is generated instead of repeated\n    // Assumes maximum scan line register is set to 2 or 4.\n    // Note: can't assert this as register values may not be fully programmed.\n    if(!(this.crtc_mode & 0x1))\n    {\n        scan_line <<= 1;\n    }\n\n    // Undo effects of substituted bit 14\n    // Assumes maximum scan line register is set to 2 or 4\n    // Note: can't assert this as register values may not be fully programmed.\n    // Other maximum scan line register values would result in weird addressing\n    // anyway\n    if(!(this.crtc_mode & 0x2))\n    {\n        scan_line <<= 1;\n    }\n\n    return scan_line;\n};\n\n/**\n * @param {number} cols_count\n * @param {number} rows_count\n */\nVGAScreen.prototype.set_size_text = function(cols_count, rows_count)\n{\n    this.max_cols = cols_count;\n    this.max_rows = rows_count;\n\n    this.bus.send(\"screen-set-size-text\", [cols_count, rows_count]);\n};\n\nVGAScreen.prototype.set_size_graphical = function(width, height, bpp, virtual_width, virtual_height)\n{\n    var needs_update = !this.stats.is_graphical ||\n        this.stats.bpp !== bpp ||\n        this.screen_width !== width ||\n        this.screen_height !== height ||\n        this.virtual_width !== virtual_width ||\n        this.virtual_height !== virtual_height;\n\n    if(needs_update)\n    {\n        this.screen_width = width;\n        this.screen_height = height;\n        this.virtual_width = virtual_width;\n        this.virtual_height = virtual_height;\n\n        this.stats.bpp = bpp;\n        this.stats.is_graphical = true;\n        this.stats.res_x = width;\n        this.stats.res_y = height;\n\n        this.bus.send(\"screen-set-size-graphical\", [width, height, virtual_width, virtual_height, bpp]);\n    }\n};\n\nVGAScreen.prototype.update_vga_size = function()\n{\n    if(this.svga_enabled)\n    {\n        return;\n    }\n\n    var horizontal_characters = Math.min(1 + this.horizontal_display_enable_end,\n        this.horizontal_blank_start);\n    var vertical_scans = Math.min(1 + this.vertical_display_enable_end,\n        this.vertical_blank_start);\n\n    if(!horizontal_characters || !vertical_scans)\n    {\n        // Don't update if width or height is zero.\n        // These happen when registers are not fully configured yet.\n        return;\n    }\n\n    if(this.graphical_mode)\n    {\n        var screen_width = horizontal_characters << 3;\n\n        // Offset is half the number of bytes/words/dwords (depending on clocking mode)\n        // of display memory that each logical line occupies.\n        // However, the number of pixels latched, regardless of addressing mode,\n        // should always 8 pixels per character clock (except for 8 bit PEL width, in which\n        // case 4 pixels).\n        var virtual_width = this.offset_register << 4;\n\n        // Pixel Width / PEL Width / Clock Select\n        if(this.attribute_mode & 0x40)\n        {\n            screen_width >>>= 1;\n            virtual_width >>>= 1;\n        }\n\n        var screen_height = this.scan_line_to_screen_row(vertical_scans);\n\n        // The virtual buffer height is however many rows of data that can fit.\n        // Previously drawn graphics outside of current memory address space can\n        // still be drawn by setting start_address. The address at\n        // VGA_HOST_MEMORY_SPACE_START[memory_space_select] is mapped to the first\n        // byte of the frame buffer. Verified on some hardware.\n        // Depended on by: Windows 98 start screen\n        var available_bytes = VGA_HOST_MEMORY_SPACE_SIZE[0];\n\n        var virtual_height = Math.ceil(available_bytes / this.vga_bytes_per_line());\n\n        this.set_size_graphical(screen_width, screen_height, 8,\n            virtual_width, virtual_height);\n\n        this.update_vertical_retrace();\n        this.update_layers();\n    }\n    else\n    {\n        if(this.max_scan_line & 0x80)\n        {\n            // Double scanning means that half of those scan lines\n            // are just repeats\n            vertical_scans >>>= 1;\n        }\n\n        var height = vertical_scans / (1 + (this.max_scan_line & 0x1F)) | 0;\n\n        if(horizontal_characters && height)\n        {\n            this.set_size_text(horizontal_characters, height);\n        }\n    }\n};\n\nVGAScreen.prototype.update_layers = function()\n{\n    if(!this.graphical_mode)\n    {\n        this.text_mode_redraw();\n    }\n\n    if(this.svga_enabled)\n    {\n        this.layers = [];\n        return;\n    }\n\n    if(!this.virtual_width || !this.screen_width)\n    {\n        // Avoid division by zero\n        return;\n    }\n\n    if(!this.palette_source || (this.clocking_mode & 0x20))\n    {\n        // Palette source and screen disable bits = draw nothing\n        // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\n        // and http://www.osdever.net/FreeVGA/vga/seqreg.htm#01\n        this.layers = [];\n        this.bus.send(\"screen-clear\");\n        return;\n    }\n\n    var start_addr = this.start_address_latched;\n\n    var pixel_panning = this.horizontal_panning;\n    if(this.attribute_mode & 0x40)\n    {\n        pixel_panning >>>= 1;\n    }\n\n    var byte_panning = this.preset_row_scan >> 5 & 0x3;\n    var pixel_addr_start = this.vga_addr_to_pixel(start_addr + byte_panning);\n\n    var start_buffer_row = pixel_addr_start / this.virtual_width | 0;\n    var start_buffer_col = pixel_addr_start % this.virtual_width + pixel_panning;\n\n    var split_screen_row = this.scan_line_to_screen_row(1 + this.line_compare);\n    split_screen_row = Math.min(split_screen_row, this.screen_height);\n\n    var split_buffer_height = this.screen_height - split_screen_row;\n\n    this.layers = [];\n\n    for(var x = -start_buffer_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\n    {\n        this.layers.push({\n            screen_x: x,\n            screen_y: 0,\n            buffer_x: 0,\n            buffer_y: start_buffer_row + y,\n            buffer_width: this.virtual_width,\n            buffer_height: split_screen_row,\n        });\n    }\n\n    var start_split_col = 0;\n    if(!(this.attribute_mode & 0x20))\n    {\n        // Pixel panning mode. Allow panning for the lower split screen\n        start_split_col = this.vga_addr_to_pixel(byte_panning) + pixel_panning;\n    }\n\n    for(var x = -start_split_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\n    {\n        this.layers.push({\n            screen_x: x,\n            screen_y: split_screen_row,\n            buffer_x: 0,\n            buffer_y: y,\n            buffer_width: this.virtual_width,\n            buffer_height: split_buffer_height,\n        });\n    }\n};\n\nVGAScreen.prototype.update_vertical_retrace = function()\n{\n    // Emulate behaviour during VSync/VRetrace\n    this.port_3DA_value |= 0x8;\n    if(this.start_address_latched !== this.start_address)\n    {\n        this.start_address_latched = this.start_address;\n        this.update_layers();\n    }\n};\n\nVGAScreen.prototype.update_cursor_scanline = function()\n{\n    this.bus.send(\"screen-update-cursor-scanline\", [this.cursor_scanline_start, this.cursor_scanline_end]);\n};\n\n/**\n * Attribute controller register / index write\n * @see {@link http://www.osdever.net/FreeVGA/vga/attrreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 89\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 48\n */\nVGAScreen.prototype.port3C0_write = function(value)\n{\n    if(this.attribute_controller_index === -1)\n    {\n        dbg_log(\"attribute controller index register: \" + h(value), LOG_VGA);\n        this.attribute_controller_index = value & 0x1F;\n        dbg_log(\"attribute actual index: \" + h(this.attribute_controller_index), LOG_VGA);\n\n        if(this.palette_source !== (value & 0x20))\n        {\n            // A method of blanking the screen.\n            // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\n            this.palette_source = value & 0x20;\n            this.update_layers();\n        }\n    }\n    else\n    {\n        if(this.attribute_controller_index < 0x10)\n        {\n            dbg_log(\"internal palette: \" + h(this.attribute_controller_index) + \" -> \" + h(value), LOG_VGA);\n            this.dac_map[this.attribute_controller_index] = value;\n\n            if(!(this.attribute_mode & 0x40))\n            {\n                this.complete_redraw();\n            }\n        }\n        else\n        switch(this.attribute_controller_index)\n        {\n            case 0x10:\n                dbg_log(\"3C0 / attribute mode control: \" + h(value), LOG_VGA);\n                if(this.attribute_mode !== value)\n                {\n                    var previous_mode = this.attribute_mode;\n                    this.attribute_mode = value;\n\n                    var is_graphical = (value & 0x1) > 0;\n                    if(!this.svga_enabled && this.graphical_mode !== is_graphical)\n                    {\n                        this.graphical_mode = is_graphical;\n                        this.bus.send(\"screen-set-mode\", this.graphical_mode);\n                    }\n\n                    if((previous_mode ^ value) & 0x40)\n                    {\n                        // PEL width changed. Pixel Buffer now invalidated\n                        this.complete_replot();\n                    }\n\n                    this.update_vga_size();\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            case 0x12:\n                dbg_log(\"3C0 / color plane enable: \" + h(value), LOG_VGA);\n                if(this.color_plane_enable !== value)\n                {\n                    this.color_plane_enable = value;\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            case 0x13:\n                dbg_log(\"3C0 / horizontal panning: \" + h(value), LOG_VGA);\n                if(this.horizontal_panning !== value)\n                {\n                    this.horizontal_panning = value & 0xF;\n                    this.update_layers();\n                }\n                break;\n            case 0x14:\n                dbg_log(\"3C0 / color select: \" + h(value), LOG_VGA);\n                if(this.color_select !== value)\n                {\n                    this.color_select = value;\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            default:\n                dbg_log(\"3C0 / attribute controller write \" + h(this.attribute_controller_index) + \": \" + h(value), LOG_VGA);\n        }\n\n        this.attribute_controller_index = -1;\n    }\n};\n\nVGAScreen.prototype.port3C0_read = function()\n{\n    dbg_log(\"3C0 read\", LOG_VGA);\n    var result = this.attribute_controller_index | this.palette_source;\n    return result;\n};\n\nVGAScreen.prototype.port3C0_read16 = function()\n{\n    dbg_log(\"3C0 read16\", LOG_VGA);\n    return this.port3C0_read() & 0xFF | this.port3C1_read() << 8 & 0xFF00;\n};\n\nVGAScreen.prototype.port3C1_read = function()\n{\n    if(this.attribute_controller_index < 0x10)\n    {\n        dbg_log(\"3C1 / internal palette read: \" + h(this.attribute_controller_index) +\n            \" -> \" + h(this.dac_map[this.attribute_controller_index]), LOG_VGA);\n        return this.dac_map[this.attribute_controller_index];\n    }\n\n    switch(this.attribute_controller_index)\n    {\n        case 0x10:\n            dbg_log(\"3C1 / attribute mode read: \" + h(this.attribute_mode), LOG_VGA);\n            return this.attribute_mode;\n        case 0x12:\n            dbg_log(\"3C1 / color plane enable read: \" + h(this.color_plane_enable), LOG_VGA);\n            return this.color_plane_enable;\n        case 0x13:\n            dbg_log(\"3C1 / horizontal panning read: \" + h(this.horizontal_panning), LOG_VGA);\n            return this.horizontal_panning;\n        case 0x14:\n            dbg_log(\"3C1 / color select read: \" + h(this.color_select), LOG_VGA);\n            return this.color_select;\n        default:\n            dbg_log(\"3C1 / attribute controller read \" + h(this.attribute_controller_index), LOG_VGA);\n    }\n    return -1;\n\n};\n\nVGAScreen.prototype.port3C2_write = function(value)\n{\n    dbg_log(\"3C2 / miscellaneous output register = \" + h(value), LOG_VGA);\n    this.miscellaneous_output_register = value;\n};\n\nVGAScreen.prototype.port3C4_write = function(value)\n{\n    this.sequencer_index = value;\n};\n\nVGAScreen.prototype.port3C4_read = function()\n{\n    return this.sequencer_index;\n};\n\n/**\n * Sequencer register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/seqreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 47\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 19\n */\nVGAScreen.prototype.port3C5_write = function(value)\n{\n    switch(this.sequencer_index)\n    {\n        case 0x01:\n            dbg_log(\"clocking mode: \" + h(value), LOG_VGA);\n            var previous_clocking_mode = this.clocking_mode;\n            this.clocking_mode = value;\n            if((previous_clocking_mode ^ value) & 0x20)\n            {\n                // Screen disable bit modified\n                this.update_layers();\n            }\n            break;\n        case 0x02:\n            dbg_log(\"plane write mask: \" + h(value), LOG_VGA);\n            this.plane_write_bm = value;\n            break;\n        case 0x04:\n            dbg_log(\"sequencer memory mode: \" + h(value), LOG_VGA);\n            this.sequencer_memory_mode = value;\n            break;\n        default:\n            dbg_log(\"3C5 / sequencer write \" + h(this.sequencer_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3C5_read = function()\n{\n    dbg_log(\"3C5 / sequencer read \" + h(this.sequencer_index), LOG_VGA);\n\n    switch(this.sequencer_index)\n    {\n        case 0x01:\n            return this.clocking_mode;\n        case 0x02:\n            return this.plane_write_bm;\n        case 0x04:\n            return this.sequencer_memory_mode;\n        case 0x06:\n            return 0x12;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3C7_write = function(index)\n{\n    // index for reading the DAC\n    dbg_log(\"3C7 write: \" + h(index), LOG_VGA);\n    this.dac_color_index_read = index * 3;\n    this.dac_state &= 0x0;\n};\n\nVGAScreen.prototype.port3C7_read = function()\n{\n    // prepared to accept reads or writes\n    return this.dac_state;\n};\n\nVGAScreen.prototype.port3C8_write = function(index)\n{\n    this.dac_color_index_write = index * 3;\n    this.dac_state |= 0x3;\n};\n\nVGAScreen.prototype.port3C8_read = function()\n{\n    return this.dac_color_index_write / 3 | 0;\n};\n\n/**\n * DAC color palette register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/colorreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 104\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 57\n */\nVGAScreen.prototype.port3C9_write = function(color_byte)\n{\n    var index = this.dac_color_index_write / 3 | 0,\n        offset = this.dac_color_index_write % 3,\n        color = this.vga256_palette[index];\n\n    color_byte = (color_byte & 0x3F) * 255 / 63 | 0;\n\n    if(offset === 0)\n    {\n        color = color & ~0xFF0000 | color_byte << 16;\n    }\n    else if(offset === 1)\n    {\n        color = color & ~0xFF00 | color_byte << 8;\n    }\n    else\n    {\n        color = color & ~0xFF | color_byte;\n        dbg_log(\"dac set color, index=\" + h(index) + \" value=\" + h(color), LOG_VGA);\n    }\n\n    if(this.vga256_palette[index] !== color)\n    {\n        this.vga256_palette[index] = color;\n        this.complete_redraw();\n    }\n    this.dac_color_index_write++;\n};\n\nVGAScreen.prototype.port3C9_read = function()\n{\n    dbg_log(\"3C9 read\", LOG_VGA);\n\n    var index = this.dac_color_index_read / 3 | 0;\n    var offset = this.dac_color_index_read % 3;\n    var color = this.vga256_palette[index];\n\n    this.dac_color_index_read++;\n    return (color >> (2 - offset) * 8 & 0xFF) / 255 * 63 | 0;\n};\n\nVGAScreen.prototype.port3CC_read = function()\n{\n    dbg_log(\"3CC read\", LOG_VGA);\n    return this.miscellaneous_output_register;\n};\n\nVGAScreen.prototype.port3CE_write = function(value)\n{\n    this.graphics_index = value;\n};\n\nVGAScreen.prototype.port3CE_read = function()\n{\n    return this.graphics_index;\n};\n\n/**\n * Graphics controller register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 78\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 29\n */\nVGAScreen.prototype.port3CF_write = function(value)\n{\n    switch(this.graphics_index)\n    {\n        case 0:\n            this.planar_setreset = value;\n            dbg_log(\"plane set/reset: \" + h(value), LOG_VGA);\n            break;\n        case 1:\n            this.planar_setreset_enable = value;\n            dbg_log(\"plane set/reset enable: \" + h(value), LOG_VGA);\n            break;\n        case 2:\n            this.color_compare = value;\n            dbg_log(\"color compare: \" + h(value), LOG_VGA);\n            break;\n        case 3:\n            this.planar_rotate_reg = value;\n            dbg_log(\"plane rotate: \" + h(value), LOG_VGA);\n            break;\n        case 4:\n            this.plane_read = value;\n            dbg_log(\"plane read: \" + h(value), LOG_VGA);\n            break;\n        case 5:\n            var previous_planar_mode = this.planar_mode;\n            this.planar_mode = value;\n            dbg_log(\"planar mode: \" + h(value), LOG_VGA);\n            if((previous_planar_mode ^ value) & 0x60)\n            {\n                // Shift mode modified. Pixel buffer invalidated\n                this.complete_replot();\n            }\n            break;\n        case 6:\n            dbg_log(\"miscellaneous graphics register: \" + h(value), LOG_VGA);\n            if(this.miscellaneous_graphics_register !== value)\n            {\n                this.miscellaneous_graphics_register = value;\n                this.update_vga_size();\n            }\n            break;\n        case 7:\n            this.color_dont_care = value;\n            dbg_log(\"color don't care: \" + h(value), LOG_VGA);\n            break;\n        case 8:\n            this.planar_bitmap = value;\n            dbg_log(\"planar bitmap: \" + h(value), LOG_VGA);\n            break;\n        default:\n            dbg_log(\"3CF / graphics write \" + h(this.graphics_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3CF_read = function()\n{\n    dbg_log(\"3CF / graphics read \" + h(this.graphics_index), LOG_VGA);\n\n    switch(this.graphics_index)\n    {\n        case 0:\n            return this.planar_setreset;\n        case 1:\n            return this.planar_setreset_enable;\n        case 2:\n            return this.color_compare;\n        case 3:\n            return this.planar_rotate_reg;\n        case 4:\n            return this.plane_read;\n        case 5:\n            return this.planar_mode;\n        case 6:\n            return this.miscellaneous_graphics_register;\n        case 7:\n            return this.color_dont_care;\n        case 8:\n            return this.planar_bitmap;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3D4_write = function(register)\n{\n    dbg_log(\"3D4 / crtc index: \" + register, LOG_VGA);\n    this.index_crtc = register;\n};\n\nVGAScreen.prototype.port3D4_read = function()\n{\n    dbg_log(\"3D4 read / crtc index: \" + this.index_crtc, LOG_VGA);\n    return this.index_crtc;\n};\n\n/**\n * CRT controller register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/crtcreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 55\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 63\n */\nVGAScreen.prototype.port3D5_write = function(value)\n{\n    switch(this.index_crtc)\n    {\n        case 0x1:\n            dbg_log(\"3D5 / hdisp enable end write: \" + h(value), LOG_VGA);\n            if(this.horizontal_display_enable_end !== value)\n            {\n                this.horizontal_display_enable_end = value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x2:\n            if(this.horizontal_blank_start !== value)\n            {\n                this.horizontal_blank_start = value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x7:\n            dbg_log(\"3D5 / overflow register write: \" + h(value), LOG_VGA);\n            var previous_vertical_display_enable_end = this.vertical_display_enable_end;\n            this.vertical_display_enable_end &= 0xFF;\n            this.vertical_display_enable_end |= (value << 3 & 0x200) | (value << 7 & 0x100);\n            if(previous_vertical_display_enable_end != this.vertical_display_enable_end)\n            {\n                this.update_vga_size();\n            }\n            this.line_compare = (this.line_compare & 0x2FF) | (value << 4 & 0x100);\n\n            var previous_vertical_blank_start = this.vertical_blank_start;\n            this.vertical_blank_start = (this.vertical_blank_start & 0x2FF) | (value << 5 & 0x100);\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\n            {\n                this.update_vga_size();\n            }\n            this.update_layers();\n            break;\n        case 0x8:\n            dbg_log(\"3D5 / preset row scan write: \" + h(value), LOG_VGA);\n            this.preset_row_scan = value;\n            this.update_layers();\n            break;\n        case 0x9:\n            dbg_log(\"3D5 / max scan line write: \" + h(value), LOG_VGA);\n            this.max_scan_line = value;\n            this.line_compare = (this.line_compare & 0x1FF) | (value << 3 & 0x200);\n\n            var previous_vertical_blank_start = this.vertical_blank_start;\n            this.vertical_blank_start = (this.vertical_blank_start & 0x1FF) | (value << 4 & 0x200);\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\n            {\n                this.update_vga_size();\n            }\n\n            this.update_layers();\n            break;\n        case 0xA:\n            dbg_log(\"3D5 / cursor scanline start write: \" + h(value), LOG_VGA);\n            this.cursor_scanline_start = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xB:\n            dbg_log(\"3D5 / cursor scanline end write: \" + h(value), LOG_VGA);\n            this.cursor_scanline_end = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xC:\n            if((this.start_address >> 8 & 0xFF) !== value)\n            {\n                this.start_address = this.start_address & 0xff | value << 8;\n                this.update_layers();\n                if(~this.crtc_mode &  0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // starting row and column, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            dbg_log(\"3D5 / start addr hi write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xD:\n            if((this.start_address & 0xFF) !== value)\n            {\n                this.start_address = this.start_address & 0xff00 | value;\n                this.update_layers();\n                if(~this.crtc_mode &  0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // starting row and column, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            dbg_log(\"3D5 / start addr lo write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xE:\n            dbg_log(\"3D5 / cursor address hi write: \" + h(value), LOG_VGA);\n            this.cursor_address = this.cursor_address & 0xFF | value << 8;\n            this.update_cursor();\n            break;\n        case 0xF:\n            dbg_log(\"3D5 / cursor address lo write: \" + h(value), LOG_VGA);\n            this.cursor_address = this.cursor_address & 0xFF00 | value;\n            this.update_cursor();\n            break;\n        case 0x12:\n            dbg_log(\"3D5 / vdisp enable end write: \" + h(value), LOG_VGA);\n            if((this.vertical_display_enable_end & 0xFF) !== value)\n            {\n                this.vertical_display_enable_end = (this.vertical_display_enable_end & 0x300) | value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x13:\n            dbg_log(\"3D5 / offset register write: \" + h(value), LOG_VGA);\n            if(this.offset_register !== value)\n            {\n                this.offset_register = value;\n                this.update_vga_size();\n\n                if(~this.crtc_mode & 0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // virtual width, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x14:\n            dbg_log(\"3D5 / underline location write: \" + h(value), LOG_VGA);\n            if(this.underline_location_register !== value)\n            {\n                var previous_underline = this.underline_location_register;\n\n                this.underline_location_register = value;\n                this.update_vga_size();\n\n                if((previous_underline ^ value) & 0x40)\n                {\n                    // Doubleword addressing changed. Pixel buffer invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x15:\n            dbg_log(\"3D5 / vertical blank start write: \" + h(value), LOG_VGA);\n            if((this.vertical_blank_start & 0xFF) !== value)\n            {\n                this.vertical_blank_start = (this.vertical_blank_start & 0x300) | value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x17:\n            dbg_log(\"3D5 / crtc mode write: \" + h(value), LOG_VGA);\n            if(this.crtc_mode !== value)\n            {\n                var previous_mode = this.crtc_mode;\n\n                this.crtc_mode = value;\n                this.update_vga_size();\n\n                if((previous_mode ^ value) & 0x43)\n                {\n                    // Word/byte addressing changed or address substitution changed.\n                    // Pixel buffer invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x18:\n            dbg_log(\"3D5 / line compare write: \" + h(value), LOG_VGA);\n            this.line_compare = (this.line_compare & 0x300) | value;\n            this.update_layers();\n            break;\n        default:\n            if(this.index_crtc < this.crtc.length)\n            {\n                this.crtc[this.index_crtc] = value;\n            }\n            dbg_log(\"3D5 / CRTC write \" + h(this.index_crtc) + \": \" + h(value), LOG_VGA);\n    }\n\n};\n\nVGAScreen.prototype.port3D5_read = function()\n{\n    dbg_log(\"3D5 read \" + h(this.index_crtc), LOG_VGA);\n\n    switch(this.index_crtc)\n    {\n        case 0x1:\n            return this.horizontal_display_enable_end;\n        case 0x2:\n            return this.horizontal_blank_start;\n        case 0x7:\n            return (this.vertical_display_enable_end >> 7 & 0x2) |\n                (this.vertical_blank_start >> 5 & 0x8) |\n                (this.line_compare >> 4 & 0x10) |\n                (this.vertical_display_enable_end >> 3 & 0x40);\n        case 0x8:\n            return this.preset_row_scan;\n        case 0x9:\n            return this.max_scan_line;\n        case 0xA:\n            return this.cursor_scanline_start;\n        case 0xB:\n            return this.cursor_scanline_end;\n        case 0xC:\n            return this.start_address & 0xFF;\n        case 0xD:\n            return this.start_address >> 8;\n        case 0xE:\n            return this.cursor_address >> 8;\n        case 0xF:\n            return this.cursor_address & 0xFF;\n        case 0x12:\n            return this.vertical_display_enable_end & 0xFF;\n        case 0x13:\n            return this.offset_register;\n        case 0x14:\n            return this.underline_location_register;\n        case 0x15:\n            return this.vertical_blank_start & 0xFF;\n        case 0x17:\n            return this.crtc_mode;\n        case 0x18:\n            return this.line_compare & 0xFF;\n    }\n\n    if(this.index_crtc < this.crtc.length)\n    {\n        return this.crtc[this.index_crtc];\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nVGAScreen.prototype.port3DA_read = function()\n{\n    dbg_log(\"3DA read - status 1 and clear attr index\", LOG_VGA);\n\n    var value = this.port_3DA_value;\n\n    // Status register, bit 3 set by update_vertical_retrace\n    // during screen-fill-buffer\n    if(!this.graphical_mode)\n    {\n        // But screen-fill-buffer may not get triggered in text mode\n        // so toggle it manually here\n        if(this.port_3DA_value & 1)\n        {\n            this.port_3DA_value ^= 8;\n        }\n        this.port_3DA_value ^= 1;\n    }\n    else\n    {\n        this.port_3DA_value ^= 1;\n        this.port_3DA_value &= 1;\n    }\n    this.attribute_controller_index = -1;\n    return value;\n};\n\nVGAScreen.prototype.svga_bytes_per_line = function()\n{\n    var bits = this.svga_bpp === 15 ? 16 : this.svga_bpp;\n\n    return this.svga_width * bits / 8;\n};\n\nVGAScreen.prototype.port1CE_write = function(value)\n{\n    this.dispi_index = value;\n};\n\nVGAScreen.prototype.port1CF_write = function(value)\n{\n    dbg_log(\"1CF / dispi write \" + h(this.dispi_index) + \": \" + h(value), LOG_VGA);\n\n    switch(this.dispi_index)\n    {\n        case 1:\n            this.svga_width = value;\n            if(this.svga_width > MAX_XRES)\n            {\n                dbg_log(\"svga_width reduced from \" + this.svga_width + \" to \" + MAX_XRES, LOG_VGA);\n                this.svga_width = MAX_XRES;\n            }\n            break;\n        case 2:\n            this.svga_height = value;\n            if(this.svga_height > MAX_YRES)\n            {\n                dbg_log(\"svga_height reduced from \" + this.svga_height + \" to \" + MAX_YRES, LOG_VGA);\n                this.svga_height = MAX_YRES;\n            }\n            break;\n        case 3:\n            this.svga_bpp = value;\n            break;\n        case 4:\n            // enable, options\n            this.svga_enabled = (value & 1) === 1;\n            this.dispi_enable_value = value;\n            break;\n        case 5:\n            this.svga_bank_offset = value << 16;\n            break;\n        case 9:\n            // y offset\n            this.svga_offset = value * this.svga_bytes_per_line();\n            dbg_log(\"SVGA offset: \" + h(this.svga_offset) + \" y=\" + h(value), LOG_VGA);\n            this.complete_redraw();\n            break;\n        default:\n    }\n\n    if(this.svga_enabled && (!this.svga_width || !this.svga_height))\n    {\n        dbg_log(\"SVGA: disabled because of invalid width/height: \" + this.svga_width + \"x\" + this.svga_height, LOG_VGA);\n        this.svga_enabled = false;\n    }\n\n    dbg_assert(this.svga_bpp !== 4, \"unimplemented svga bpp: 4\");\n    dbg_assert(this.svga_bpp !== 15, \"unimplemented svga bpp: 15\");\n    dbg_assert(this.svga_bpp === 4 || this.svga_bpp === 8 ||\n               this.svga_bpp === 15 || this.svga_bpp === 16 ||\n               this.svga_bpp === 24 || this.svga_bpp === 32,\n               \"unexpected svga bpp: \" + this.svga_bpp);\n\n    dbg_log(\"SVGA: enabled=\" + this.svga_enabled + \", \" + this.svga_width + \"x\" + this.svga_height + \"x\" + this.svga_bpp, LOG_VGA);\n\n    if(this.svga_enabled && this.dispi_index === 4)\n    {\n        this.set_size_graphical(this.svga_width, this.svga_height, this.svga_bpp, this.svga_width, this.svga_height);\n        this.bus.send(\"screen-set-mode\", true);\n        this.graphical_mode = true;\n        this.graphical_mode_is_linear = true;\n    }\n\n    if(!this.svga_enabled)\n    {\n        this.svga_bank_offset = 0;\n    }\n\n    this.update_layers();\n};\n\nVGAScreen.prototype.port1CF_read = function()\n{\n    dbg_log(\"1CF / dispi read \" + h(this.dispi_index), LOG_VGA);\n    return this.svga_register_read(this.dispi_index);\n};\n\nVGAScreen.prototype.svga_register_read = function(n)\n{\n    switch(n)\n    {\n        case 0:\n            // id\n            return 0xB0C0;\n        case 1:\n            return this.dispi_enable_value & 2 ? MAX_XRES : this.svga_width;\n        case 2:\n            return this.dispi_enable_value & 2 ? MAX_YRES : this.svga_height;\n        case 3:\n            return this.dispi_enable_value & 2 ? MAX_BPP : this.svga_bpp;\n        case 4:\n            return this.dispi_enable_value;\n        case 5:\n            return this.svga_bank_offset >>> 16;\n        case 6:\n            // virtual width\n            if(this.screen_width)\n            {\n                return this.screen_width;\n            }\n            else\n            {\n                return 1; // seabios/windows98 divide exception\n            }\n            break;\n\n        case 8:\n            // x offset\n            return 0;\n        case 0x0A:\n            // memory size in 64 kilobyte banks\n            return this.vga_memory_size / VGA_BANK_SIZE | 0;\n    }\n\n    return 0xFF;\n};\n\n/**\n * Transfers graphics from VGA Planes to the Pixel Buffer\n * VGA Planes represent data stored on actual hardware.\n * Pixel Buffer caches the 4-bit or 8-bit color indices for each pixel.\n */\nVGAScreen.prototype.vga_replot = function()\n{\n    // Round to multiple of 8 towards extreme\n    var start = this.diff_plot_min & ~0xF;\n    var end = Math.min((this.diff_plot_max | 0xF), VGA_PIXEL_BUFFER_SIZE - 1);\n\n    var addr_shift = this.vga_addr_shift_count();\n    var addr_substitution = ~this.crtc_mode & 0x3;\n\n    var shift_mode = this.planar_mode & 0x60\n    var pel_width = this.attribute_mode & 0x40;\n\n    for(var pixel_addr = start; pixel_addr <= end;)\n    {\n        var addr = pixel_addr >>> addr_shift;\n        if(addr_substitution)\n        {\n            var row = pixel_addr / this.virtual_width | 0;\n            var col = pixel_addr - this.virtual_width * row;\n\n            switch(addr_substitution)\n            {\n                case 0x1:\n                    // Alternating rows using bit 13\n                    // Assumes max scan line = 1\n                    addr = (row & 0x1) << 13;\n                    row >>>= 1;\n                    break;\n                case 0x2:\n                    // Alternating rows using bit 14\n                    // Assumes max scan line = 3\n                    addr = (row & 0x1) << 14;\n                    row >>>= 1;\n                    break;\n                case 0x3:\n                    // Cycling through rows using bit 13 and 14\n                    // Assumes max scan line = 3\n                    addr = (row & 0x3) << 13;\n                    row >>>= 2;\n                    break;\n            }\n\n            addr |= (row * this.virtual_width + col >>> addr_shift) + this.start_address;\n        }\n\n        var byte0 = this.plane0[addr];\n        var byte1 = this.plane1[addr];\n        var byte2 = this.plane2[addr];\n        var byte3 = this.plane3[addr];\n\n        var shift_loads = new Uint8Array(8);\n        switch(shift_mode)\n        {\n            // Planar Shift Mode\n            // See http://www.osdever.net/FreeVGA/vga/vgaseq.htm\n            case 0x00:\n                // Shift these, so that the bits for the color are in\n                // the correct position in the for loop\n                byte0 <<= 0;\n                byte1 <<= 1;\n                byte2 <<= 2;\n                byte3 <<= 3;\n\n                for(var i = 7; i >= 0; i--)\n                {\n                    shift_loads[7 - i] =\n                            byte0 >> i & 1 |\n                            byte1 >> i & 2 |\n                            byte2 >> i & 4 |\n                            byte3 >> i & 8;\n                }\n                break;\n\n            // Packed Shift Mode, aka Interleaved Shift Mode\n            // Video Modes 4h and 5h\n            case 0x20:\n                shift_loads[0] = (byte0 >> 6 & 0x3) | (byte2 >> 4 & 0xC);\n                shift_loads[1] = (byte0 >> 4 & 0x3) | (byte2 >> 2 & 0xC);\n                shift_loads[2] = (byte0 >> 2 & 0x3) | (byte2 >> 0 & 0xC);\n                shift_loads[3] = (byte0 >> 0 & 0x3) | (byte2 << 2 & 0xC);\n\n                shift_loads[4] = (byte1 >> 6 & 0x3) | (byte3 >> 4 & 0xC);\n                shift_loads[5] = (byte1 >> 4 & 0x3) | (byte3 >> 2 & 0xC);\n                shift_loads[6] = (byte1 >> 2 & 0x3) | (byte3 >> 0 & 0xC);\n                shift_loads[7] = (byte1 >> 0 & 0x3) | (byte3 << 2 & 0xC);\n                break;\n\n            // 256-Color Shift Mode\n            // Video Modes 13h and unchained 256 color\n            case 0x40:\n            case 0x60:\n                shift_loads[0] = byte0 >> 4 & 0xF;\n                shift_loads[1] = byte0 >> 0 & 0xF;\n                shift_loads[2] = byte1 >> 4 & 0xF;\n                shift_loads[3] = byte1 >> 0 & 0xF;\n                shift_loads[4] = byte2 >> 4 & 0xF;\n                shift_loads[5] = byte2 >> 0 & 0xF;\n                shift_loads[6] = byte3 >> 4 & 0xF;\n                shift_loads[7] = byte3 >> 0 & 0xF;\n                break;\n        }\n\n        if(pel_width)\n        {\n            // Assemble from two sets of 4 bits.\n            for(var i = 0, j = 0; i < 4; i++, pixel_addr++, j += 2)\n            {\n                this.pixel_buffer[pixel_addr] = (shift_loads[j] << 4) | shift_loads[j + 1];\n            }\n        }\n        else\n        {\n            for(var i = 0; i < 8; i++, pixel_addr++)\n            {\n                this.pixel_buffer[pixel_addr] = shift_loads[i];\n            }\n        }\n    }\n};\n\n/**\n * Transfers graphics from Pixel Buffer to Destination Image Buffer.\n * The 4-bit/8-bit color indices in the Pixel Buffer are passed through\n * the internal palette (dac_map) and the DAC palette (vga256_palette) to\n * obtain the final 32 bit color that the Canvas API uses.\n */\nVGAScreen.prototype.vga_redraw = function()\n{\n    var start = this.diff_addr_min;\n    var end = Math.min(this.diff_addr_max, VGA_PIXEL_BUFFER_SIZE - 1);\n    var buffer = this.dest_buffer;\n\n    // Closure compiler\n    if(!buffer) return;\n\n    var mask = 0xFF;\n    var colorset = 0x00;\n    if(this.attribute_mode & 0x80)\n    {\n        // Palette bits 5/4 select\n        mask &= 0xCF;\n        colorset |= this.color_select << 4 & 0x30;\n    }\n\n    if(this.attribute_mode & 0x40)\n    {\n        // 8 bit mode\n\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\n        {\n            var color256 = (this.pixel_buffer[pixel_addr] & mask) | colorset;\n            var color = this.vga256_palette[color256];\n\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n        }\n    }\n    else\n    {\n        // 4 bit mode\n\n        // Palette bits 7/6 select\n        mask &= 0x3F;\n        colorset |= this.color_select << 4 & 0xC0;\n\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\n        {\n            var color16 = this.pixel_buffer[pixel_addr] & this.color_plane_enable;\n            var color256 = (this.dac_map[color16] & mask) | colorset;\n            var color = this.vga256_palette[color256];\n\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n        }\n    }\n};\n\nVGAScreen.prototype.screen_fill_buffer = function()\n{\n    if(!this.graphical_mode)\n    {\n        // text mode\n        // Update retrace behaviour anyway - programs waiting for signal before\n        // changing to graphical mode\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(!this.dest_buffer)\n    {\n        dbg_log(\"Cannot fill buffer: No destination buffer\", LOG_VGA);\n        // Update retrace behaviour anyway\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(this.diff_addr_max < this.diff_addr_min && this.diff_plot_max < this.diff_plot_min)\n    {\n        // No pixels to update\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(this.svga_enabled)\n    {\n        var bpp = this.svga_bpp;\n\n        var buffer = this.dest_buffer;\n\n        var start = this.diff_addr_min;\n        var end = this.diff_addr_max;\n\n        switch(bpp)\n        {\n            case 32:\n                var start_pixel = start >> 2;\n                var end_pixel = (end >> 2) + 1;\n\n                for(var i = start_pixel; i < end_pixel; i++)\n                {\n                    var dword = this.svga_memory32[i];\n\n                    buffer[i] = dword << 16 | dword >> 16 & 0xFF | dword & 0xFF00 | 0xFF000000;\n                }\n                break;\n\n            case 24:\n                var start_pixel = start / 3 | 0;\n                var end_pixel = (end / 3 | 0) + 1;\n                var addr = start_pixel * 3;\n\n                for(var i = start_pixel; addr < end; i++)\n                {\n                    var red = this.svga_memory[addr++];\n                    var green = this.svga_memory[addr++];\n                    var blue = this.svga_memory[addr++];\n\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n                }\n                break;\n\n            case 16:\n                var start_pixel = start >> 1;\n                var end_pixel = (end >> 1) + 1;\n\n                for(var i = start_pixel; i < end_pixel; i++)\n                {\n                    var word = this.svga_memory16[i];\n\n                    var blue = (word >> 11) * 0xFF / 0x1F | 0;\n                    var green = (word >> 5 & 0x3F) * 0xFF / 0x3F | 0;\n                    var red = (word & 0x1F) * 0xFF / 0x1F | 0;\n\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n                }\n                break;\n\n            case 8:\n                var start_pixel = start;\n                var end_pixel = end + 1;\n\n                for(var i = start; i <= end; i++)\n                {\n                    var color = this.vga256_palette[this.svga_memory[i]];\n                    buffer[i] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n                }\n                break;\n\n            default:\n                dbg_assert(false, \"Unsupported BPP: \" + bpp);\n        }\n\n        var min_y = start_pixel / this.svga_width | 0;\n        var max_y = end_pixel / this.svga_width | 0;\n\n        this.bus.send(\"screen-fill-buffer-end\", [{\n            screen_x: 0, screen_y: min_y,\n            buffer_x: 0, buffer_y: min_y,\n            buffer_width: this.svga_width,\n            buffer_height: max_y - min_y + 1,\n        }]);\n    }\n    else\n    {\n        this.vga_replot();\n        this.vga_redraw();\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\n    }\n\n    this.reset_diffs();\n    this.update_vertical_retrace();\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction PS2(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @type {boolean} */\n    this.enable_mouse_stream = false;\n\n    /** @type {boolean} */\n    this.use_mouse = false;\n\n    /** @type {boolean} */\n    this.have_mouse = true;\n\n    /** @type {number} */\n    this.mouse_delta_x = 0;\n    /** @type {number} */\n    this.mouse_delta_y = 0;\n    /** @type {number} */\n    this.mouse_clicks = 0;\n\n    /** @type {boolean} */\n    this.have_keyboard = true;\n\n    /** @type {boolean} */\n    this.enable_keyboard_stream = false;\n\n    /** @type {boolean} */\n    this.next_is_mouse_command = false;\n\n    /** @type {boolean} */\n    this.next_read_sample = false;\n\n    /** @type {boolean} */\n    this.next_read_led = false;\n\n    /** @type {boolean} */\n    this.next_handle_scan_code_set = false;\n\n    /** @type {boolean} */\n    this.next_read_rate = false;\n\n    /** @type {boolean} */\n    this.next_read_resolution = false;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.kbd_buffer = new ByteQueue(1024);\n\n    this.last_port60_byte = 0;\n\n    /** @type {number} */\n    this.sample_rate = 100;\n\n    /** @type {number} */\n    this.resolution = 4;\n\n    /** @type {boolean} */\n    this.scaling2 = false;\n\n    /** @type {number} */\n    this.last_mouse_packet = -1;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.mouse_buffer = new ByteQueue(1024);\n\n    /**\n     * @type {boolean}\n     * Also known as DBBOUT OBF - Output Buffer Full flag\n     */\n    this.next_byte_is_ready = false;\n\n    /** @type {boolean} */\n    this.next_byte_is_aux = false;\n\n    this.bus.register(\"keyboard-code\", function(code)\n    {\n        this.kbd_send_code(code);\n    }, this);\n\n    this.bus.register(\"mouse-click\", function(data)\n    {\n        this.mouse_send_click(data[0], data[1], data[2]);\n    }, this);\n\n    this.bus.register(\"mouse-delta\", function(data)\n    {\n        this.mouse_send_delta(data[0], data[1]);\n    }, this);\n\n    this.bus.register(\"mouse-wheel\", function(data)\n    {\n        // TODO: Mouse Wheel\n        // http://www.computer-engineering.org/ps2mouse/\n    }, this);\n\n    this.command_register = 1 | 4;\n    this.read_output_register = false;\n    this.read_command_register = false;\n\n    cpu.io.register_read(0x60, this, this.port60_read);\n    cpu.io.register_read(0x64, this, this.port64_read);\n\n    cpu.io.register_write(0x60, this, this.port60_write);\n    cpu.io.register_write(0x64, this, this.port64_write);\n}\n\nPS2.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.enable_mouse_stream;\n    state[1] = this.use_mouse;\n    state[2] = this.have_mouse;\n    state[3] = this.mouse_delta_x;\n    state[4] = this.mouse_delta_y;\n    state[5] = this.mouse_clicks;\n    state[6] = this.have_keyboard;\n    state[7] = this.enable_keyboard_stream;\n    state[8] = this.next_is_mouse_command;\n    state[9] = this.next_read_sample;\n    state[10] = this.next_read_led;\n    state[11] = this.next_handle_scan_code_set;\n    state[12] = this.next_read_rate;\n    state[13] = this.next_read_resolution;\n    //state[14] = this.kbd_buffer;\n    state[15] = this.last_port60_byte;\n    state[16] = this.sample_rate;\n    state[17] = this.resolution;\n    state[18] = this.scaling2;\n    //state[19] = this.mouse_buffer;\n    state[20] = this.command_register;\n    state[21] = this.read_output_register;\n    state[22] = this.read_command_register;\n\n    return state;\n};\n\nPS2.prototype.set_state = function(state)\n{\n    this.enable_mouse_stream = state[0];\n    this.use_mouse = state[1];\n    this.have_mouse = state[2];\n    this.mouse_delta_x = state[3];\n    this.mouse_delta_y = state[4];\n    this.mouse_clicks = state[5];\n    this.have_keyboard = state[6];\n    this.enable_keyboard_stream = state[7];\n    this.next_is_mouse_command = state[8];\n    this.next_read_sample = state[9];\n    this.next_read_led = state[10];\n    this.next_handle_scan_code_set = state[11];\n    this.next_read_rate = state[12];\n    this.next_read_resolution = state[13];\n    //this.kbd_buffer = state[14];\n    this.last_port60_byte = state[15];\n    this.sample_rate = state[16];\n    this.resolution = state[17];\n    this.scaling2 = state[18];\n    //this.mouse_buffer = state[19];\n    this.command_register = state[20];\n    this.read_output_register = state[21];\n    this.read_command_register = state[22];\n\n    this.next_byte_is_ready = false;\n    this.next_byte_is_aux = false;\n    this.kbd_buffer.clear();\n    this.mouse_buffer.clear();\n\n    this.bus.send(\"mouse-enable\", this.use_mouse);\n};\n\nPS2.prototype.raise_irq = function()\n{\n    if(this.next_byte_is_ready)\n    {\n        // Wait until previous byte is read\n        // http://halicery.com/Hardware/8042/8042_1503033_TXT.htm\n        return;\n    }\n\n    // Kbd has priority over aux\n    if(this.kbd_buffer.length)\n    {\n        this.kbd_irq();\n    }\n    else if(this.mouse_buffer.length)\n    {\n        this.mouse_irq();\n    }\n};\n\nPS2.prototype.mouse_irq = function()\n{\n    this.next_byte_is_ready = true;\n    this.next_byte_is_aux = true;\n\n    if(this.command_register & 2)\n    {\n        dbg_log(\"Mouse irq\", LOG_PS2);\n\n        // Pulse the irq line\n        // Note: can't lower immediately after rising, so lower before rising\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\n        this.cpu.device_lower_irq(12);\n        this.cpu.device_raise_irq(12);\n    }\n};\n\nPS2.prototype.kbd_irq = function()\n{\n    this.next_byte_is_ready = true;\n    this.next_byte_is_aux = false;\n\n    if(this.command_register & 1)\n    {\n        dbg_log(\"Keyboard irq\", LOG_PS2);\n\n        // Pulse the irq line\n        // Note: can't lower immediately after rising, so lower before rising\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\n        this.cpu.device_lower_irq(1);\n        this.cpu.device_raise_irq(1);\n    }\n};\n\nPS2.prototype.kbd_send_code = function(code)\n{\n    if(this.enable_keyboard_stream)\n    {\n        dbg_log(\"adding kbd code: \" + h(code), LOG_PS2);\n        this.kbd_buffer.push(code);\n        this.raise_irq();\n    }\n};\n\nPS2.prototype.mouse_send_delta = function(delta_x, delta_y)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    // note: delta_x or delta_y can be floating point numbers\n\n    var factor = this.resolution * this.sample_rate / 80;\n\n    this.mouse_delta_x += delta_x * factor;\n    this.mouse_delta_y += delta_y * factor;\n\n    if(this.enable_mouse_stream)\n    {\n        var change_x = this.mouse_delta_x | 0,\n            change_y = this.mouse_delta_y | 0;\n\n        if(change_x || change_y)\n        {\n            var now = Date.now();\n\n            //if(now - this.last_mouse_packet < 1000 / this.sample_rate)\n            //{\n            //    // TODO: set timeout\n            //    return;\n            //}\n\n            this.mouse_delta_x -= change_x;\n            this.mouse_delta_y -= change_y;\n\n            this.send_mouse_packet(change_x, change_y);\n        }\n    }\n};\n\nPS2.prototype.mouse_send_click = function(left, middle, right)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    this.mouse_clicks = left | right << 1 | middle << 2;\n\n    if(this.enable_mouse_stream)\n    {\n        this.send_mouse_packet(0, 0);\n    }\n};\n\nPS2.prototype.send_mouse_packet = function(dx, dy)\n{\n    var info_byte =\n            (dy < 0) << 5 |\n            (dx < 0) << 4 |\n            1 << 3 |\n            this.mouse_clicks,\n        delta_x = dx,\n        delta_y = dy;\n\n    this.last_mouse_packet = Date.now();\n\n    //if(this.scaling2)\n    //{\n    //    // only in automatic packets, not 0xEB requests\n    //    delta_x = this.apply_scaling2(delta_x);\n    //    delta_y = this.apply_scaling2(delta_y);\n    //}\n\n    this.mouse_buffer.push(info_byte);\n    this.mouse_buffer.push(delta_x);\n    this.mouse_buffer.push(delta_y);\n\n    dbg_log(\"adding mouse packets: \" + [info_byte, dx, dy], LOG_PS2);\n\n    this.raise_irq();\n};\n\nPS2.prototype.apply_scaling2 = function(n)\n{\n    // http://www.computer-engineering.org/ps2mouse/#Inputs.2C_Resolution.2C_and_Scaling\n    var abs = Math.abs(n),\n        sign = n >> 31;\n\n    switch(abs)\n    {\n        case 0:\n        case 1:\n        case 3:\n            return n;\n        case 2:\n            return sign;\n        case 4:\n            return 6 * sign;\n        case 5:\n            return 9 * sign;\n        default:\n            return n << 1;\n    }\n};\n\nPS2.prototype.port60_read = function()\n{\n    //dbg_log(\"port 60 read: \" + (buffer[0] || \"(none)\"));\n\n    this.next_byte_is_ready = false;\n\n    if(!this.kbd_buffer.length && !this.mouse_buffer.length)\n    {\n        // should not happen\n        dbg_log(\"Port 60 read: Empty\", LOG_PS2);\n        return this.last_port60_byte;\n    }\n\n    if(this.next_byte_is_aux)\n    {\n        this.cpu.device_lower_irq(12);\n        this.last_port60_byte = this.mouse_buffer.shift();\n        dbg_log(\"Port 60 read (mouse): \" + h(this.last_port60_byte), LOG_PS2);\n    }\n    else\n    {\n        this.cpu.device_lower_irq(1);\n        this.last_port60_byte = this.kbd_buffer.shift();\n        dbg_log(\"Port 60 read (kbd)  : \" + h(this.last_port60_byte), LOG_PS2);\n    }\n\n    if(this.kbd_buffer.length || this.mouse_buffer.length)\n    {\n        this.raise_irq();\n    }\n\n    return this.last_port60_byte;\n};\n\nPS2.prototype.port64_read = function()\n{\n    // status port\n\n    var status_byte = 0x10;\n\n    if(this.next_byte_is_ready)\n    {\n        status_byte |= 0x1;\n    }\n    if(this.next_byte_is_aux)\n    {\n        status_byte |= 0x20;\n    }\n\n    dbg_log(\"port 64 read: \" + h(status_byte), LOG_PS2);\n\n    return status_byte;\n};\n\nPS2.prototype.port60_write = function(write_byte)\n{\n    dbg_log(\"port 60 write: \" + h(write_byte), LOG_PS2);\n\n    if(this.read_command_register)\n    {\n        this.command_register = write_byte;\n        this.read_command_register = false;\n\n        // not sure, causes \"spurious ack\" in Linux\n        //this.kbd_buffer.push(0xFA);\n        //this.kbd_irq();\n\n        dbg_log(\"Keyboard command register = \" + h(this.command_register), LOG_PS2);\n    }\n    else if(this.read_output_register)\n    {\n        this.read_output_register = false;\n\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(write_byte);\n        this.mouse_irq();\n    }\n    else if(this.next_read_sample)\n    {\n        this.next_read_sample = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        this.sample_rate = write_byte;\n        dbg_log(\"mouse sample rate: \" + h(write_byte), LOG_PS2);\n        if(!this.sample_rate)\n        {\n            dbg_log(\"invalid sample rate, reset to 100\", LOG_PS2);\n            this.sample_rate = 100;\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_resolution)\n    {\n        this.next_read_resolution = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        if(write_byte > 3)\n        {\n            this.resolution = 4;\n            dbg_log(\"invalid resolution, resetting to 4\", LOG_PS2);\n        }\n        else\n        {\n            this.resolution = 1 << write_byte;\n            dbg_log(\"resolution: \" + this.resolution, LOG_PS2);\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_led)\n    {\n        // nope\n        this.next_read_led = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_handle_scan_code_set)\n    {\n        this.next_handle_scan_code_set = false;\n\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n\n        if(write_byte)\n        {\n            // set scan code set\n        }\n        else\n        {\n            this.kbd_buffer.push(2);\n        }\n    }\n    else if(this.next_read_rate)\n    {\n        // nope\n        this.next_read_rate = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_is_mouse_command)\n    {\n        this.next_is_mouse_command = false;\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        if(!this.have_mouse)\n        {\n            return;\n        }\n\n        // send ack\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xE6:\n            // set scaling to 1:1\n            dbg_log(\"Scaling 1:1\", LOG_PS2);\n            this.scaling2 = false;\n            break;\n        case 0xE7:\n            // set scaling to 2:1\n            dbg_log(\"Scaling 2:1\", LOG_PS2);\n            this.scaling2 = true;\n            break;\n        case 0xE8:\n            // set mouse resolution\n            this.next_read_resolution = true;\n            break;\n        case 0xE9:\n            // status request - send one packet\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xEB:\n            // request single packet\n            dbg_log(\"unimplemented request single packet\", LOG_PS2);\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xF2:\n            //  MouseID Byte\n            this.mouse_buffer.push(0);\n            this.mouse_buffer.push(0);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF3:\n            // sample rate\n            this.next_read_sample = true;\n            break;\n        case 0xF4:\n            // enable streaming\n            this.enable_mouse_stream = true;\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF5:\n            // disable streaming\n            this.enable_mouse_stream = false;\n            break;\n        case 0xF6:\n            // set defaults\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n            break;\n        case 0xFF:\n            // reset, send completion code\n            dbg_log(\"Mouse reset\", LOG_PS2);\n            this.mouse_buffer.push(0xAA);\n            this.mouse_buffer.push(0);\n\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n\n        default:\n            dbg_log(\"Unimplemented mouse command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.mouse_irq();\n    }\n    else\n    {\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        // send ack\n        this.mouse_buffer.clear();\n        this.kbd_buffer.clear();\n        this.kbd_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xED:\n            this.next_read_led = true;\n            break;\n        case 0xF0:\n            // get/set scan code set\n            this.next_handle_scan_code_set = true;\n            break;\n        case 0xF2:\n            // identify\n            this.kbd_buffer.push(0xAB);\n            this.kbd_buffer.push(83);\n            break;\n        case 0xF3:\n            //  Set typematic rate and delay\n            this.next_read_rate = true;\n            break;\n        case 0xF4:\n            // enable scanning\n            dbg_log(\"kbd enable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = true;\n            break;\n        case 0xF5:\n            // disable scanning\n            dbg_log(\"kbd disable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = false;\n            break;\n        case 0xF6:\n            // reset defaults\n            //this.enable_keyboard_stream = false;\n            break;\n        case 0xFF:\n            this.kbd_buffer.clear();\n            this.kbd_buffer.push(0xFA);\n            this.kbd_buffer.push(0xAA);\n            this.kbd_buffer.push(0);\n            break;\n        default:\n            dbg_log(\"Unimplemented keyboard command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.kbd_irq();\n    }\n};\n\nPS2.prototype.port64_write = function(write_byte)\n{\n    dbg_log(\"port 64 write: \" + h(write_byte), LOG_PS2);\n\n    switch(write_byte)\n    {\n    case 0x20:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(this.command_register);\n        this.kbd_irq();\n        break;\n    case 0x60:\n        this.read_command_register = true;\n        break;\n    case 0xD3:\n        this.read_output_register = true;\n        break;\n    case 0xD4:\n        this.next_is_mouse_command = true;\n        break;\n    case 0xA7:\n        // Disable second port\n        dbg_log(\"Disable second port\", LOG_PS2);\n        this.command_register |= 0x20;\n        break;\n    case 0xA8:\n        // Enable second port\n        dbg_log(\"Enable second port\", LOG_PS2);\n        this.command_register &= ~0x20;\n        break;\n    case 0xA9:\n        // test second ps/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        this.kbd_irq();\n        break;\n    case 0xAA:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0x55);\n        this.kbd_irq();\n        break;\n    case 0xAB:\n        // Test first PS/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        this.kbd_irq();\n        break;\n    case 0xAD:\n        // Disable Keyboard\n        dbg_log(\"Disable Keyboard\", LOG_PS2);\n        this.command_register |= 0x10;\n        break;\n    case 0xAE:\n        // Enable Keyboard\n        dbg_log(\"Enable Keyboard\", LOG_PS2);\n        this.command_register &= ~0x10;\n        break;\n    case 0xFE:\n        dbg_log(\"CPU reboot via PS2\");\n        this.cpu.reboot_internal();\n        break;\n    default:\n        dbg_log(\"port 64: Unimplemented command byte: \" + h(write_byte), LOG_PS2);\n    }\n};\n","\"use strict\";\n\n/** @const */\nvar PIC_LOG_VERBOSE = false;\n\n/**\n * Programmable Interrupt Controller\n * http://stanislavs.org/helppc/8259.html\n *\n * @constructor\n * @param {CPU} cpu\n * @param {PIC=} master\n */\nfunction PIC(cpu, master)\n{\n    /**\n     * all irqs off\n     * @type {number}\n     */\n    this.irq_mask = 0;\n\n    /**\n     * @type {number}\n     *\n     * Bogus default value (both master and slave mapped to 0).\n     * Will be initialized by the BIOS\n     */\n    this.irq_map = 0;\n\n    /**\n     * in-service register\n     * Holds interrupts that are currently being serviced\n     * @type {number}\n     */\n    this.isr = 0;\n\n    /**\n     * interrupt request register\n     * Holds interrupts that have been requested\n     * @type {number}\n     */\n    this.irr = 0;\n\n    this.irq_value = 0;\n\n    /**\n     * @type {number}\n     */\n    this.requested_irq = -1;\n\n    this.master = master;\n    this.is_master = this.master === undefined;\n    this.slave = undefined;\n\n    this.name = this.is_master ? \"master\" : \"slave \";\n\n    this.expect_icw4 = false;\n    this.state = 0;\n    this.read_isr = 0;\n    this.auto_eoi = 1;\n    this.special_mask_mode = 0;\n\n    this.elcr = 0;\n\n    this.cpu = cpu;\n\n    // Checking for callable interrupts:\n    // (cpu changes interrupt flag) -> cpu.handle_irqs -> pic.check_irqs -> cpu.pic_call_irq\n    // (pic changes isr/irr) -> cpu.handle_irqs -> ...\n\n    // triggering irqs:\n    // (io device has irq) -> cpu.device_raise_irq -> pic.set_irq -> cpu.handle_irqs -> (see above)\n\n\n    if(this.is_master)\n    {\n        this.slave = new PIC(this.cpu, this);\n\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"master> no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                dbg_log(\"master> higher prio: isr=\" + h(this.isr, 2) +\n                        \" mask=\" + h(this.irq_mask & 0xff, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> request irq \" + irq_number, LOG_PIC);\n\n            this.requested_irq = irq_number;\n            this.cpu.handle_irqs();\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> acknowledge \" + this.requested_irq, LOG_PIC);\n            if(this.requested_irq === 2)\n            {\n                this.slave.acknowledge_irq();\n            }\n            else\n            {\n                this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n            }\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n    else\n    {\n        // is slave\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"slave > no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                PIC_LOG_VERBOSE && dbg_log(\"slave > higher prio: isr=\" + h(this.isr, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"slave > request irq \" + irq_number, LOG_PIC);\n            this.requested_irq = irq_number;\n            this.master.set_irq(2);\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.master.irq_value &= ~(1 << 2);\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            this.master.irq_value &= ~(1 << 2);\n            PIC_LOG_VERBOSE && dbg_log(\"slave > acknowledge \" + this.requested_irq, LOG_PIC);\n            this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n\n    this.dump = function()\n    {\n        dbg_log(\"mask: \" + h(this.irq_mask & 0xFF), LOG_PIC);\n        dbg_log(\"base: \" + h(this.irq_map), LOG_PIC);\n        dbg_log(\"requested: \" + h(this.irr), LOG_PIC);\n        dbg_log(\"serviced: \" + h(this.isr), LOG_PIC);\n\n        if(this.is_master)\n        {\n            this.slave.dump();\n        }\n    };\n\n    var io_base;\n    var iobase_high;\n    if(this.is_master)\n    {\n        io_base = 0x20;\n        iobase_high = 0x4D0;\n    }\n    else\n    {\n        io_base = 0xA0;\n        iobase_high = 0x4D1;\n    }\n\n    this.cpu.io.register_write(io_base, this, this.port20_write);\n    this.cpu.io.register_read(io_base, this, this.port20_read);\n\n    this.cpu.io.register_write(io_base | 1, this, this.port21_write);\n    this.cpu.io.register_read(io_base | 1, this, this.port21_read);\n\n    this.cpu.io.register_write(iobase_high, this, this.port4D0_write);\n    this.cpu.io.register_read(iobase_high, this, this.port4D0_read);\n\n\n    if(this.is_master)\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n\n            if(irq_number >= 8)\n            {\n                this.slave.set_irq(irq_number - 8);\n                return;\n            }\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> clear irq \" + irq_number, LOG_PIC);\n            }\n\n            if(irq_number >= 8)\n            {\n                this.slave.clear_irq(irq_number - 8);\n                return;\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n    else\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > clear irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n\n    this.get_isr = function()\n    {\n        return this.isr;\n    };\n}\n\nPIC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.irq_mask;\n    state[1] = this.irq_map;\n    state[2] = this.isr;\n    state[3] = this.irr;\n    state[4] = this.is_master;\n    state[5] = this.slave;\n    state[6] = this.expect_icw4;\n    state[7] = this.state;\n    state[8] = this.read_isr;\n    state[9] = this.auto_eoi;\n    state[10] = this.elcr;\n\n    return state;\n};\n\nPIC.prototype.set_state = function(state)\n{\n    this.irq_mask = state[0];\n    this.irq_map = state[1];\n    this.isr = state[2];\n    this.irr = state[3];\n    this.is_master = state[4];\n    this.slave = state[5];\n    this.expect_icw4 = state[6];\n    this.state = state[7];\n    this.read_isr = state[8];\n    this.auto_eoi = state[9];\n    this.elcr = state[10];\n};\n\nPIC.prototype.port20_write = function(data_byte)\n{\n    //dbg_log(\"20 write: \" + h(data_byte), LOG_PIC);\n    if(data_byte & 0x10) // xxxx1xxx\n    {\n        // icw1\n        dbg_log(\"icw1 = \" + h(data_byte), LOG_PIC);\n        this.isr = 0;\n        this.irr = 0;\n        this.irq_mask = 0;\n        this.irq_value = 0;\n        this.auto_eoi = 1;\n        this.requested_irq = -1;\n\n        this.expect_icw4 = data_byte & 1;\n        this.state = 1;\n    }\n    else if(data_byte & 8) // xxx01xxx\n    {\n        // ocw3\n        dbg_log(\"ocw3: \" + h(data_byte), LOG_PIC);\n        if(data_byte & 2)\n        {\n            this.read_isr = data_byte & 1;\n        }\n        if(data_byte & 4)\n        {\n            dbg_assert(false, \"unimplemented: polling\", LOG_PIC);\n        }\n        if(data_byte & 0x40)\n        {\n            this.special_mask_mode = (data_byte & 0x20) === 0x20;\n            dbg_log(\"special mask mode: \" + this.special_mask_mode, LOG_PIC);\n        }\n    }\n    else // xxx00xxx\n    {\n        // ocw2\n        // end of interrupt\n        dbg_log(\"eoi: \" + h(data_byte) + \" (\" + this.name + \")\", LOG_PIC);\n\n        var eoi_type = data_byte >> 5;\n\n        if(eoi_type === 1)\n        {\n            // non-specific eoi\n            this.isr &= this.isr - 1;\n            dbg_log(\"new isr: \" + h(this.isr, 2), LOG_PIC);\n        }\n        else if(eoi_type === 3)\n        {\n            // specific eoi\n            this.isr &= ~(1 << (data_byte & 7));\n        }\n        else if((data_byte & 0xC8) === 0xC0)\n        {\n            // os2 v4\n            let priority = data_byte & 7;\n            dbg_log(\"lowest priority: \" + h(priority), LOG_PIC);\n        }\n        else\n        {\n            dbg_log(\"Unknown eoi: \" + h(data_byte), LOG_PIC);\n            dbg_assert(false);\n            this.isr &= this.isr - 1;\n        }\n\n        this.check_irqs();\n    }\n};\n\nPIC.prototype.port20_read = function()\n{\n    if(this.read_isr)\n    {\n        dbg_log(\"read port 20h (isr): \" + h(this.isr), LOG_PIC);\n        return this.isr;\n    }\n    else\n    {\n        dbg_log(\"read port 20h (irr): \" + h(this.irr), LOG_PIC);\n        return this.irr;\n    }\n};\n\nPIC.prototype.port21_write = function(data_byte)\n{\n    //dbg_log(\"21 write: \" + h(data_byte), LOG_PIC);\n    if(this.state === 0)\n    {\n        if(this.expect_icw4)\n        {\n            // icw4\n            this.expect_icw4 = false;\n            this.auto_eoi = data_byte & 2;\n            dbg_log(\"icw4: \" + h(data_byte) + \" autoeoi=\" + this.auto_eoi, LOG_PIC);\n\n            if((data_byte & 1) === 0)\n            {\n                dbg_assert(false, \"unimplemented: not 8086 mode\", LOG_PIC);\n            }\n        }\n        else\n        {\n            // ocw1\n            this.irq_mask = ~data_byte;\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"interrupt mask: \" + (this.irq_mask & 0xFF).toString(2) +\n                        \" (\" + this.name + \")\", LOG_PIC);\n            }\n\n            this.check_irqs();\n        }\n    }\n    else if(this.state === 1)\n    {\n        // icw2\n        this.irq_map = data_byte;\n        dbg_log(\"interrupts are mapped to \" + h(this.irq_map) +\n                \" (\" + this.name + \")\", LOG_PIC);\n        this.state++;\n    }\n    else if(this.state === 2)\n    {\n        // icw3\n        this.state = 0;\n        dbg_log(\"icw3: \" + h(data_byte), LOG_PIC);\n    }\n};\n\nPIC.prototype.port21_read = function()\n{\n    dbg_log(\"21h read \" + h(~this.irq_mask & 0xff), LOG_PIC);\n    return ~this.irq_mask & 0xFF;\n};\n\nPIC.prototype.port4D0_read = function()\n{\n    dbg_log(\"elcr read: \" + h(this.elcr, 2), LOG_PIC);\n    return this.elcr;\n};\n\nPIC.prototype.port4D0_write = function(value)\n{\n    dbg_log(\"elcr write: \" + h(value, 2), LOG_PIC);\n    // set by seabios to 00 0C (only set for pci interrupts)\n    this.elcr = value;\n};\n\n","\"use strict\";\n\n/** @const */ var CMOS_RTC_SECONDS = 0x00;\n/** @const */ var CMOS_RTC_SECONDS_ALARM = 0x01;\n/** @const */ var CMOS_RTC_MINUTES = 0x02;\n/** @const */ var CMOS_RTC_MINUTES_ALARM = 0x03;\n/** @const */ var CMOS_RTC_HOURS = 0x04;\n/** @const */ var CMOS_RTC_HOURS_ALARM = 0x05;\n/** @const */ var CMOS_RTC_DAY_WEEK = 0x06;\n/** @const */ var CMOS_RTC_DAY_MONTH = 0x07;\n/** @const */ var CMOS_RTC_MONTH = 0x08;\n/** @const */ var CMOS_RTC_YEAR = 0x09;\n/** @const */ var CMOS_STATUS_A = 0x0a;\n/** @const */ var CMOS_STATUS_B = 0x0b;\n/** @const */ var CMOS_STATUS_C = 0x0c;\n/** @const */ var CMOS_STATUS_D = 0x0d;\n/** @const */ var CMOS_RESET_CODE = 0x0f;\n\n/** @const */ var CMOS_FLOPPY_DRIVE_TYPE = 0x10;\n/** @const */ var CMOS_DISK_DATA = 0x12;\n/** @const */ var CMOS_EQUIPMENT_INFO = 0x14;\n/** @const */ var CMOS_MEM_BASE_LOW = 0x15;\n/** @const */ var CMOS_MEM_BASE_HIGH = 0x16;\n/** @const */ var CMOS_MEM_OLD_EXT_LOW = 0x17;\n/** @const */ var CMOS_MEM_OLD_EXT_HIGH = 0x18;\n/** @const */ var CMOS_DISK_DRIVE1_TYPE = 0x19;\n/** @const */ var CMOS_DISK_DRIVE2_TYPE = 0x1a;\n/** @const */ var CMOS_DISK_DRIVE1_CYL = 0x1b;\n/** @const */ var CMOS_DISK_DRIVE2_CYL = 0x24;\n/** @const */ var CMOS_MEM_EXTMEM_LOW = 0x30;\n/** @const */ var CMOS_MEM_EXTMEM_HIGH = 0x31;\n/** @const */ var CMOS_CENTURY = 0x32;\n/** @const */ var CMOS_MEM_EXTMEM2_LOW = 0x34;\n/** @const */ var CMOS_MEM_EXTMEM2_HIGH = 0x35;\n/** @const */ var CMOS_BIOS_BOOTFLAG1 = 0x38;\n/** @const */ var CMOS_BIOS_DISKTRANSFLAG = 0x39;\n/** @const */ var CMOS_BIOS_BOOTFLAG2 = 0x3d;\n/** @const */ var CMOS_MEM_HIGHMEM_LOW = 0x5b;\n/** @const */ var CMOS_MEM_HIGHMEM_MID = 0x5c;\n/** @const */ var CMOS_MEM_HIGHMEM_HIGH = 0x5d;\n/** @const */ var CMOS_BIOS_SMP_COUNT = 0x5f;\n\n\n/**\n * RTC (real time clock) and CMOS\n * @constructor\n * @param {CPU} cpu\n */\nfunction RTC(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.cmos_index = 0;\n    this.cmos_data = new Uint8Array(128);\n\n    // used for cmos entries\n    this.rtc_time = Date.now();\n    this.last_update = this.rtc_time;\n\n    // used for periodic interrupt\n    this.next_interrupt = 0;\n\n    this.periodic_interrupt = false;\n\n    // corresponds to default value for cmos_a\n    this.periodic_interrupt_time = 1000 / 1024;\n\n    this.cmos_a = 0x26;\n    this.cmos_b = 2;\n    this.cmos_c = 0;\n\n    this.nmi_disabled = 0;\n\n    cpu.io.register_write(0x70, this, function(out_byte)\n    {\n        this.cmos_index = out_byte & 0x7F;\n        this.nmi_disabled = out_byte >> 7;\n    });\n\n    cpu.io.register_write(0x71, this, this.cmos_port_write);\n    cpu.io.register_read(0x71, this, this.cmos_port_read);\n}\n\nRTC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.cmos_index;\n    state[1] = this.cmos_data;\n    state[2] = this.rtc_time;\n    state[3] = this.last_update;\n    state[4] = this.next_interrupt;\n\n    state[6] = this.periodic_interrupt;\n    state[7] = this.periodic_interrupt_time;\n    state[8] = this.cmos_a;\n    state[9] = this.cmos_b;\n    state[10] = this.cmos_c;\n    state[11] = this.nmi_disabled;\n\n    return state;\n};\n\nRTC.prototype.set_state = function(state)\n{\n    this.cmos_index = state[0];\n    this.cmos_data = state[1];\n    this.rtc_time = state[2];\n    this.last_update = state[3];\n    this.next_interrupt = state[4];\n\n    this.periodic_interrupt = state[6];\n    this.periodic_interrupt_time = state[7];\n    this.cmos_a = state[8];\n    this.cmos_b = state[9];\n    this.cmos_c = state[10];\n    this.nmi_disabled = state[11];\n};\n\nRTC.prototype.timer = function(time, legacy_mode)\n{\n    time = Date.now(); // XXX\n    this.rtc_time += time - this.last_update;\n    this.last_update = time;\n\n    if(this.periodic_interrupt && this.next_interrupt < time)\n    {\n        this.cpu.device_raise_irq(8);\n        this.cmos_c |= 1 << 6 | 1 << 7;\n\n        this.next_interrupt += this.periodic_interrupt_time *\n                Math.ceil((time - this.next_interrupt) / this.periodic_interrupt_time);\n\n        return Math.max(0, time - this.next_interrupt);\n    }\n\n    return 100;\n};\n\nRTC.prototype.bcd_pack = function(n)\n{\n    var i = 0,\n        result = 0,\n        digit;\n\n    while(n)\n    {\n        digit = n % 10;\n\n        result |= digit << (4 * i);\n        i++;\n        n = (n - digit) / 10;\n    }\n\n    return result;\n};\n\nRTC.prototype.encode_time = function(t)\n{\n    if(this.cmos_b & 4)\n    {\n        // binary mode\n        return t;\n    }\n    else\n    {\n        return this.bcd_pack(t);\n    }\n};\n\n// TODO\n// - interrupt on update\n// - countdown\n// - letting bios/os set values\n// (none of these are used by seabios or the OSes we're\n// currently testing)\nRTC.prototype.cmos_port_read = function()\n{\n    var index = this.cmos_index;\n\n    //this.cmos_index = 0xD;\n\n    switch(index)\n    {\n        case CMOS_RTC_SECONDS:\n            return this.encode_time(new Date(this.rtc_time).getUTCSeconds());\n        case CMOS_RTC_MINUTES:\n            return this.encode_time(new Date(this.rtc_time).getUTCMinutes());\n        case CMOS_RTC_HOURS:\n            // TODO: 12 hour mode\n            return this.encode_time(new Date(this.rtc_time).getUTCHours());\n        case CMOS_RTC_DAY_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCDate());\n        case CMOS_RTC_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCMonth() + 1);\n        case CMOS_RTC_YEAR:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() % 100);\n\n        case CMOS_STATUS_A:\n            return this.cmos_a;\n        case CMOS_STATUS_B:\n            //dbg_log(\"cmos read from index \" + h(index));\n            return this.cmos_b;\n\n        case CMOS_STATUS_C:\n            // It is important to know that upon a IRQ 8, Status Register C\n            // will contain a bitmask telling which interrupt happened.\n            // What is important is that if register C is not read after an\n            // IRQ 8, then the interrupt will not happen again.\n            this.cpu.device_lower_irq(8);\n\n            dbg_log(\"cmos reg C read\", LOG_RTC);\n            // Missing IRQF flag\n            //return cmos_b & 0x70;\n            var c = this.cmos_c;\n\n            this.cmos_c &= ~0xF0;\n\n            return c;\n\n        case CMOS_STATUS_D:\n            return 0xFF;\n\n        case CMOS_CENTURY:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() / 100 | 0);\n\n        default:\n            dbg_log(\"cmos read from index \" + h(index), LOG_RTC);\n            return this.cmos_data[this.cmos_index];\n    }\n};\n\nRTC.prototype.cmos_port_write = function(data_byte)\n{\n    switch(this.cmos_index)\n    {\n        case 0xA:\n            this.cmos_a = data_byte & 0x7F;\n            this.periodic_interrupt_time = 1000 / (32768 >> (this.cmos_a & 0xF) - 1);\n\n            dbg_log(\"Periodic interrupt, a=\" + h(this.cmos_a, 2) + \" t=\" + this.periodic_interrupt_time , LOG_RTC);\n            break;\n        case 0xB:\n            this.cmos_b = data_byte;\n            if(this.cmos_b & 0x40)\n            {\n                this.next_interrupt = Date.now();\n            }\n\n            if(this.cmos_b & 0x20) dbg_log(\"Unimplemented: alarm interrupt\", LOG_RTC);\n            if(this.cmos_b & 0x10) dbg_log(\"Unimplemented: updated interrupt\", LOG_RTC);\n\n            dbg_log(\"cmos b=\" + h(this.cmos_b, 2), LOG_RTC);\n            break;\n        default:\n            dbg_log(\"cmos write index \" + h(this.cmos_index) + \": \" + h(data_byte), LOG_RTC);\n    }\n\n    this.periodic_interrupt = (this.cmos_b & 0x40) === 0x40 && (this.cmos_a & 0xF) > 0;\n};\n\n/**\n * @param {number} index\n */\nRTC.prototype.cmos_read = function(index)\n{\n    dbg_assert(index < 128);\n    return this.cmos_data[index];\n};\n\n/**\n * @param {number} index\n * @param {number} value\n */\nRTC.prototype.cmos_write = function(index, value)\n{\n    dbg_log(\"cmos \" + h(index) + \" <- \" + h(value), LOG_RTC);\n    dbg_assert(index < 128);\n    this.cmos_data[index] = value;\n};\n","\"use strict\";\n\n/*\n * Serial ports\n * http://wiki.osdev.org/UART\n * https://github.com/s-macke/jor1k/blob/master/js/worker/dev/uart.js\n * https://www.freebsd.org/doc/en/articles/serial-uart/\n */\n\n/** @const */\nvar DLAB = 0x80;\n\n\n/** @const */ var UART_IER_MSI  = 0x08; /* Modem Status Changed int. */\n/** @const */ var UART_IER_THRI = 0x02; /* Enable Transmitter holding register int. */\n/** @const */ var UART_IER_RDI = 0x01; /* Enable receiver data interrupt */\n\n/** @const */var UART_IIR_MSI = 0x00; /* Modem status interrupt (Low priority) */\n/** @const */var UART_IIR_NO_INT = 0x01;\n/** @const */var UART_IIR_THRI = 0x02; /* Transmitter holding register empty */\n/** @const */var UART_IIR_RDI = 0x04; /* Receiver data interrupt */\n/** @const */var UART_IIR_RLSI = 0x06; /* Receiver line status interrupt (High p.) */\n/** @const */var UART_IIR_CTI = 0x0c; /* Character timeout */\n\n/** @const */ var UART_LSR_DATA_READY        = 0x1;  // data available\n/** @const */ var UART_LSR_TX_EMPTY        = 0x20; // TX (THR) buffer is empty\n/** @const */ var UART_LSR_TRANSMITTER_EMPTY = 0x40; // TX empty and line is idle\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {number} port\n * @param {BusConnector} bus\n */\nfunction UART(cpu, port, bus)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.ints = 1 << UART_IIR_THRI;\n\n    this.baud_rate = 0;\n\n    this.line_control = 0;\n\n    // line status register\n    this.lsr = UART_LSR_TRANSMITTER_EMPTY | UART_LSR_TX_EMPTY;\n\n    this.fifo_control = 0;\n\n    // interrupts enable\n    this.ier = 0;\n\n    // interrupt identification register\n    this.iir = UART_IIR_NO_INT;\n\n    this.modem_control = 0;\n    this.modem_status = 0;\n\n    this.scratch_register = 0;\n\n    this.irq = 0;\n\n    this.input = new ByteQueue(4096);\n\n    this.current_line = [];\n\n    switch(port)\n    {\n        case 0x3F8:\n            this.com = 0;\n            this.irq = 4;\n            break;\n        case 0x2F8:\n            this.com = 1;\n            this.irq = 3;\n            break;\n        case 0x3E8:\n            this.com = 2;\n            this.irq = 4;\n            break;\n        case 0x2E8:\n            this.com = 3;\n            this.irq = 3;\n            break;\n        default:\n            dbg_log(\"Invalid serial port: \" + h(port), LOG_SERIAL);\n            this.com = 0;\n            this.irq = 4;\n    }\n\n    this.bus.register(\"serial\" + this.com + \"-input\", function(data)\n    {\n        this.data_received(data);\n    }, this);\n\n    var io = cpu.io;\n\n    io.register_write(port, this, function(out_byte)\n    {\n        this.write_data(out_byte);\n    }, function(out_word)\n    {\n        this.write_data(out_word & 0xFF);\n        this.write_data(out_word >> 8);\n    });\n\n    io.register_write(port | 1, this, function(out_byte)\n    {\n        if(this.line_control & DLAB)\n        {\n            this.baud_rate = this.baud_rate & 0xFF | out_byte << 8;\n            dbg_log(\"baud rate: \" + h(this.baud_rate), LOG_SERIAL);\n        }\n        else\n        {\n            this.ier = out_byte & 0xF;\n            dbg_log(\"interrupt enable: \" + h(out_byte), LOG_SERIAL);\n            this.CheckInterrupt();\n        }\n    });\n\n    io.register_read(port, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate & 0xFF;\n        }\n        else\n        {\n            var data = this.input.shift();\n\n            if(data === -1)\n            {\n                dbg_log(\"Read input empty\", LOG_SERIAL);\n            }\n            else\n            {\n                dbg_log(\"Read input: \" + h(data), LOG_SERIAL);\n            }\n\n            if(this.input.length === 0)\n            {\n                this.lsr &= ~UART_LSR_DATA_READY;\n                this.ClearInterrupt(UART_IIR_CTI);\n            }\n\n            return data;\n        }\n    });\n\n    io.register_read(port | 1, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate >> 8;\n        }\n        else\n        {\n            return this.ier & 0xF;\n        }\n    });\n\n    io.register_read(port | 2, this, function()\n    {\n        var ret = this.iir & 0xF | 0xC0;\n        dbg_log(\"read interrupt identification: \" + h(this.iir), LOG_SERIAL);\n\n        if (this.iir == UART_IIR_THRI) {\n            this.ClearInterrupt(UART_IIR_THRI);\n        }\n\n        return ret;\n    });\n    io.register_write(port | 2, this, function(out_byte)\n    {\n        dbg_log(\"fifo control: \" + h(out_byte), LOG_SERIAL);\n        this.fifo_control = out_byte;\n    });\n\n    io.register_read(port | 3, this, function()\n    {\n        dbg_log(\"read line control: \" + h(this.line_control), LOG_SERIAL);\n        return this.line_control;\n    });\n    io.register_write(port | 3, this, function(out_byte)\n    {\n        dbg_log(\"line control: \" + h(out_byte), LOG_SERIAL);\n        this.line_control = out_byte;\n    });\n\n\n    io.register_read(port | 4, this, function()\n    {\n        return this.modem_control;\n    });\n    io.register_write(port | 4, this, function(out_byte)\n    {\n        dbg_log(\"modem control: \" + h(out_byte), LOG_SERIAL);\n        this.modem_control = out_byte;\n    });\n\n    io.register_read(port | 5, this, function()\n    {\n        dbg_log(\"read line status: \" + h(this.lsr), LOG_SERIAL);\n        return this.lsr;\n    });\n    io.register_write(port | 5, this, function(out_byte)\n    {\n        dbg_log(\"Factory test write\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 6, this, function()\n    {\n        dbg_log(\"read modem status: \" + h(this.modem_status), LOG_SERIAL);\n        return this.modem_status;\n    });\n    io.register_write(port | 6, this, function(out_byte)\n    {\n        dbg_log(\"Unkown register write (base+6)\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 7, this, function()\n    {\n        return this.scratch_register;\n    });\n    io.register_write(port | 7, this, function(out_byte)\n    {\n        this.scratch_register = out_byte;\n    });\n}\n\nUART.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.ints;\n    state[1] = this.baud_rate;\n    state[2] = this.line_control;\n    state[3] = this.lsr;\n    state[4] = this.fifo_control;\n    state[5] = this.ier;\n    state[6] = this.iir;\n    state[7] = this.modem_control;\n    state[8] = this.modem_status;\n    state[9] = this.scratch_register;\n    state[10] = this.irq;\n\n    return state;\n};\n\nUART.prototype.set_state = function(state)\n{\n    this.ints = state[0];\n    this.baud_rate = state[1];\n    this.line_control = state[2];\n    this.lsr = state[3];\n    this.fifo_control = state[4];\n    this.ier = state[5];\n    this.iir = state[6];\n    this.modem_control = state[7];\n    this.modem_status = state[8];\n    this.scratch_register = state[9];\n    this.irq = state[10];\n};\n\nUART.prototype.CheckInterrupt = function() {\n    if ((this.ints & (1 << UART_IIR_CTI))  && (this.ier & UART_IER_RDI)) {\n        this.iir = UART_IIR_CTI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_THRI)) && (this.ier & UART_IER_THRI)) {\n        this.iir = UART_IIR_THRI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_MSI))  && (this.ier & UART_IER_MSI)) {\n        this.iir = UART_IIR_MSI;\n        this.cpu.device_raise_irq(this.irq);\n    } else {\n        this.iir = UART_IIR_NO_INT;\n        this.cpu.device_lower_irq(this.irq);\n    }\n};\n\nUART.prototype.ThrowInterrupt = function(line) {\n    this.ints |= (1 << line);\n    this.CheckInterrupt();\n};\n\nUART.prototype.ClearInterrupt = function(line) {\n    this.ints &= ~(1 << line);\n    this.CheckInterrupt();\n};\n\n/**\n * @param {number} data\n */\nUART.prototype.data_received = function(data)\n{\n    dbg_log(\"input: \" + h(data), LOG_SERIAL);\n    this.input.push(data);\n\n    this.lsr |= UART_LSR_DATA_READY;\n    this.ThrowInterrupt(UART_IIR_CTI);\n};\n\nUART.prototype.write_data = function(out_byte)\n{\n    if(this.line_control & DLAB)\n    {\n        this.baud_rate = this.baud_rate & ~0xFF | out_byte;\n        return;\n    }\n\n    dbg_log(\"data: \" + h(out_byte), LOG_SERIAL);\n\n    this.ThrowInterrupt(UART_IIR_THRI);\n\n    this.bus.send(\"serial\" + this.com + \"-output-byte\", out_byte);\n\n    if(out_byte === 0xFF)\n    {\n        return;\n    }\n\n    var char = String.fromCharCode(out_byte);\n\n    this.bus.send(\"serial\" + this.com + \"-output-char\", char);\n\n    this.current_line.push(out_byte);\n\n    if(char === \"\\n\")\n    {\n        dbg_log(\"SERIAL: \" + String.fromCharCode.apply(\"\", this.current_line).trimRight());\n        this.bus.send(\"serial\" + this.com + \"-output-line\", String.fromCharCode.apply(\"\", this.current_line));\n        this.current_line = [];\n    }\n};\n","\"use strict\";\n\n\nvar HPET_ADDR = 0xFED00000,\n    HPET_PERIOD = 0x05F5E100, // in nano seconds\n    HPET_FREQ_MS = 1e12 / HPET_PERIOD, // in kHZ\n    HPET_SUPPORT_64 = 0,\n    HPET_COUNTER_CONFIG = 1 << 4 | HPET_SUPPORT_64 << 5,\n    HPET_COUNTER_CONFIG_MASK = 1 << 4 | 1 << 5 | 1 << 15,\n    HPET_NUM_COUNTERS = 4;\n\n/**\n * HPET - High Precision Event Timer\n * http://wiki.osdev.org/HPET\n *\n * @constructor\n * @param {CPU} cpu\n */\nfunction HPET(cpu)\n{\n    var me = this,\n\n        hpet_enabled = false,\n        hpet_start = Date.now(),\n\n        hpet_offset_low = 0,\n        hpet_offset_high = 0,\n\n        counter_read_acc_next = false,\n        interrupt_status = 0,\n\n        counter_config = new Int32Array(HPET_NUM_COUNTERS << 1),\n        counter_comparator = new Int32Array(HPET_NUM_COUNTERS << 1),\n        counter_accumulator = new Int32Array(HPET_NUM_COUNTERS << 1);\n\n    //var counter_last_irq = new Int32Array(HPET_NUM_COUNTERS << 1);\n\n\n    var last_check = 0;\n\n\n    this.legacy_mode = false;\n\n    this.timer = function(now)\n    {\n        if(!hpet_enabled)\n        {\n            return;\n        }\n\n        var\n            counter_value = get_counter() >>> 0,\n            config,\n            //last_irq,\n            comparator,\n            do_irq;\n\n        for(var i = 0; i < HPET_NUM_COUNTERS; i++)\n        {\n            config = counter_config[i << 1];\n            //last_irq = counter_last_irq[i << 1] >>> 0;\n            comparator = counter_comparator[i << 1] >>> 0;\n\n            if(last_check <= counter_value ?\n                    comparator > last_check && comparator <= counter_value :\n                    comparator > last_check || comparator <= counter_value\n            ) {\n                do_irq = config & 4;\n                //counter_last_irq[i << 1] = comparator;\n\n                if(config & 2)\n                {\n                    // level triggered\n                    do_irq = do_irq && !(interrupt_status & 1 << i);\n                    interrupt_status |= 1 << i;\n                }\n                else\n                {\n                    // edge-triggered\n                    interrupt_status &= ~(1 << i);\n                }\n\n                if(config & 1 << 3)\n                {\n                    // periodic mode\n                    counter_comparator[i << 1] += counter_accumulator[i << 1];\n                }\n\n                //dbg_log(\"do_irq=\" + do_irq, LOG_HPET);\n                if(do_irq)\n                {\n                    if(me.legacy_mode && i === 0)\n                    {\n                        cpu.device_raise_irq(0);\n                    }\n                    else if(me.legacy_mode && i === 1)\n                    {\n                        cpu.device_raise_irq(0);\n                    }\n                    else\n                    {\n                        // TODO\n                        cpu.device_raise_irq(0);\n                    }\n                }\n            }\n        }\n\n        last_check = counter_value;\n    };\n\n    function get_counter()\n    {\n        if(hpet_enabled)\n        {\n            return (Date.now() - hpet_start) * HPET_FREQ_MS + hpet_offset_low | 0;\n        }\n        else\n        {\n            return hpet_offset_low;\n        }\n    }\n\n    function get_counter_high()\n    {\n        if(HPET_SUPPORT_64)\n        {\n            if(hpet_enabled)\n            {\n                return (Date.now() - hpet_start) * (HPET_FREQ_MS / 0x100000000) + hpet_offset_high | 0;\n            }\n            else\n            {\n                return hpet_offset_high;\n            }\n        }\n        else\n        {\n            return 0;\n        }\n    }\n\n    cpu.io.mmap_register(HPET_ADDR, 0x4000, mmio_read, mmio_write);\n\n\n\n    function mmio_read(addr)\n    {\n        dbg_log(\"Read \" + h(addr, 4) + \" (ctr=\" + h(get_counter() >>> 0) + \")\", LOG_HPET);\n\n        switch(addr)\n        {\n            case 0:\n                return 1 << 16 | HPET_NUM_COUNTERS - 1 << 8 | 0x8000 | 0x01 | HPET_SUPPORT_64 << 13;\n            case 4:\n                return HPET_PERIOD;\n\n            case 0x10:\n                return me.legacy_mode << 1 | hpet_enabled;\n\n            case 0xF0:\n                return get_counter();\n\n            case 0xF4:\n                return get_counter_high();\n        }\n\n        // read from counter register\n        var register = addr >> 2 & 7,\n            counter = addr - 0x100 >> 5;\n\n        if(addr < 0x100 || counter >= HPET_NUM_COUNTERS || register > 5)\n        {\n            dbg_log(\"Read reserved address: \" + h(addr), LOG_HPET);\n            return 0;\n        }\n\n        dbg_log(\"Read counter: addr=\" + h(addr) + \" counter=\" + h(counter, 2) +\n                \" reg=\" + h(register), LOG_HPET);\n\n        switch(register)\n        {\n            case 0:\n                return counter_config[counter << 1] & ~HPET_COUNTER_CONFIG_MASK | HPET_COUNTER_CONFIG;\n            case 1:\n                return counter_config[counter << 1 | 1];\n\n            case 2:\n                return counter_comparator[counter << 1];\n            case 3:\n                return counter_comparator[counter << 1 | 1];\n\n            case 4:\n            case 5:\n                // TODO interrupt route register\n                return 0;\n        }\n    }\n\n    function mmio_write(addr, data)\n    {\n        dbg_log(\"Write \" + h(addr, 4) + \": \" + h(data, 2), LOG_HPET);\n\n        switch(addr)\n        {\n            case 0x10:\n                dbg_log(\"conf: enabled=\" + (data & 1) + \" legacy=\" + (data >> 1 & 1), LOG_HPET);\n\n                if((hpet_enabled ^ data) & 1)\n                {\n                    if(data & 1)\n                    {\n                        // counter is enabled now, start counting now\n                        hpet_start = Date.now();\n                    }\n                    else\n                    {\n                        // counter is disabled now, save current count\n                        hpet_offset_low = get_counter();\n                        hpet_offset_high = get_counter_high();\n                    }\n                }\n\n                hpet_enabled = (data & 1) === 1;\n                me.legacy_mode = (data & 2) === 2;\n\n                return;\n\n            case 0x20:\n                // writing a 1 clears bits\n                interrupt_status &= ~data;\n                return;\n\n            case 0xF0:\n                hpet_offset_low = data;\n                return;\n\n            case 0xF4:\n                hpet_offset_high = data;\n                return;\n        }\n\n        // read from counter register\n        var register = addr >> 2 & 7,\n            counter = addr - 0x100 >> 5;\n\n        if(addr < 0x100 || counter >= HPET_NUM_COUNTERS || register > 2)\n        {\n            dbg_log(\"Write reserved address: \" + h(addr) + \" data=\" + h(data), LOG_HPET);\n            return;\n        }\n\n        dbg_log(\"Write counter: addr=\" + h(addr) + \" counter=\" + h(counter, 2) +\n                \" reg=\" + h(register) + \" data=\" + h(data, 2), LOG_HPET);\n\n        switch(register)\n        {\n            case 0:\n                counter_config[counter << 1] = data;\n                break;\n            case 1:\n                //counter_config[counter << 1 | 1] = data;\n                break;\n\n            case 2:\n                if(counter_read_acc_next)\n                {\n                    counter_accumulator[counter << 1] = data;\n                    counter_read_acc_next = false;\n                    dbg_log(\"Accumulator acc=\" + h(data >>> 0, 8) + \" ctr=\" + h(counter, 2), LOG_HPET);\n                }\n                else\n                {\n                    counter_comparator[counter << 1] = data;\n\n                    if(counter_config[counter << 1] & 1 << 6)\n                    {\n                        counter_read_acc_next = true;\n                        counter_config[counter << 1] &= ~(1 << 6);\n                    }\n                }\n                break;\n            case 3:\n                counter_comparator[counter << 1 | 1] = data;\n                break;\n\n            case 4:\n            case 5:\n                // TODO interrupt route register\n\n        }\n    }\n}\n","\"use strict\";\n\n// http://www.uefi.org/sites/default/files/resources/ACPI_6_1.pdf\n\n/** @const */\nvar PMTIMER_FREQ = 3579545;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction ACPI(cpu)\n{\n    /** @type {CPU} */\n    this.cpu = cpu;\n\n    var io = cpu.io;\n\n    var acpi = {\n        pci_id: 0x07 << 3,\n        pci_space: [\n            0x86, 0x80, 0x13, 0x71, 0x07, 0x00, 0x80, 0x02, 0x08, 0x00, 0x80, 0x06, 0x00, 0x00, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"acpi\",\n    };\n\n    // 00:07.0 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 08)\n    cpu.devices.pci.register_device(acpi);\n\n    this.status = 1;\n    this.pm1_status = 0;\n    this.pm1_enable = 0;\n    this.last_timer = this.get_timer(v86.microtick());\n\n    this.gpe = new Uint8Array(4);\n\n    io.register_read(0xB000, this, undefined, function()\n    {\n        dbg_log(\"ACPI pm1_status read\", LOG_ACPI);\n        return this.pm1_status;\n    });\n    io.register_write(0xB000, this, undefined, function(value)\n    {\n        dbg_log(\"ACPI pm1_status write: \" + h(value, 4), LOG_ACPI);\n        this.pm1_status &= ~value;\n    });\n\n    io.register_read(0xB002, this, undefined, function()\n    {\n        dbg_log(\"ACPI pm1_enable read\", LOG_ACPI);\n        return this.pm1_enable;\n    });\n    io.register_write(0xB002, this, undefined, function(value)\n    {\n        dbg_log(\"ACPI pm1_enable write: \" + h(value), LOG_ACPI);\n        this.pm1_enable = value;\n    });\n\n    // ACPI status\n    io.register_read(0xB004, this, undefined, function()\n    {\n        dbg_log(\"ACPI status read\", LOG_ACPI);\n        return this.status;\n    });\n    io.register_write(0xB004, this, undefined, function(value)\n    {\n        dbg_log(\"ACPI status write: \" + h(value), LOG_ACPI);\n        this.status = value;\n    });\n\n    // ACPI, pmtimer\n    io.register_read(0xB008, this, undefined, undefined, function()\n    {\n        var value = this.get_timer(v86.microtick()) & 0xFFFFFF;\n        //dbg_log(\"pmtimer read: \" + h(value >>> 0), LOG_ACPI);\n        return value;\n    });\n\n    // ACPI, gpe\n    io.register_read(0xAFE0, this, function()\n    {\n        dbg_log(\"Read gpe#0\", LOG_ACPI);\n        return this.gpe[0];\n    });\n    io.register_read(0xAFE1, this, function()\n    {\n        dbg_log(\"Read gpe#1\", LOG_ACPI);\n        return this.gpe[1];\n    });\n    io.register_read(0xAFE2, this, function()\n    {\n        dbg_log(\"Read gpe#2\", LOG_ACPI);\n        return this.gpe[2];\n    });\n    io.register_read(0xAFE3, this, function()\n    {\n        dbg_log(\"Read gpe#3\", LOG_ACPI);\n        return this.gpe[3];\n    });\n\n    io.register_write(0xAFE0, this, function(value)\n    {\n        dbg_log(\"Write gpe#0: \" + h(value), LOG_ACPI);\n        this.gpe[0] = value;\n    });\n    io.register_write(0xAFE1, this, function(value)\n    {\n        dbg_log(\"Write gpe#1: \" + h(value), LOG_ACPI);\n        this.gpe[1] = value;\n    });\n    io.register_write(0xAFE2, this, function(value)\n    {\n        dbg_log(\"Write gpe#2: \" + h(value), LOG_ACPI);\n        this.gpe[2] = value;\n    });\n    io.register_write(0xAFE3, this, function(value)\n    {\n        dbg_log(\"Write gpe#3: \" + h(value), LOG_ACPI);\n        this.gpe[3] = value;\n    });\n}\n\nACPI.prototype.timer = function(now)\n{\n    var timer = this.get_timer(now);\n    var highest_bit_changed = ((timer ^ this.last_timer) & (1 << 23)) !== 0;\n\n    if((this.pm1_enable & 1) && highest_bit_changed)\n    {\n        dbg_log(\"ACPI raise irq\", LOG_ACPI);\n        this.pm1_status |= 1;\n        this.cpu.device_raise_irq(9);\n    }\n    else\n    {\n        this.cpu.device_lower_irq(9);\n    }\n\n    this.last_timer = timer;\n};\n\nACPI.prototype.get_timer = function(now)\n{\n    return now * (PMTIMER_FREQ / 1000) | 0;\n};\n\nACPI.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.status;\n    state[1] = this.pm1_status;\n    state[2] = this.pm1_enable;\n    return state;\n};\n\nACPI.prototype.set_state = function(state)\n{\n    this.status = state[0];\n    this.pm1_status = state[1];\n    this.pm1_enable = state[2];\n};\n","\"use strict\";\n\n// See Intel's System Programming Guide\n\n\n/** @const */\nvar APIC_LOG_VERBOSE = false;\n\n/** @const */\nvar APIC_ADDRESS = 0xFEE00000;\n\n/** @const */\nvar APIC_TIMER_MODE_MASK = 3 << 17;\n\n/** @const */\nvar APIC_TIMER_MODE_ONE_SHOT = 0;\n\n/** @const */\nvar APIC_TIMER_MODE_PERIODIC = 1 << 17;\n\n/** @const */\nvar APIC_TIMER_MODE_TSC = 2 << 17;\n\n\n/** @const */\nvar DELIVERY_MODES = [\n    \"Fixed (0)\",\n    \"Lowest Prio (1)\",\n    \"SMI (2)\",\n    \"Reserved (3)\",\n    \"NMI (4)\",\n    \"INIT (5)\",\n    \"Reserved (6)\",\n    \"ExtINT (7)\",\n];\n\n/** @const */\nvar DESTINATION_MODES = [\"physical\", \"logical\"];\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction APIC(cpu)\n{\n    /** @type {CPU} */\n    this.cpu = cpu;\n\n    this.apic_id = 0;\n\n    this.timer_divider = 0;\n    this.timer_divider_shift = 1;\n    this.timer_initial_count = 0;\n    this.timer_current_count = 0;\n\n    this.next_tick = v86.microtick();\n\n    this.lvt_timer = IOAPIC_CONFIG_MASKED;\n    this.lvt_perf_counter = IOAPIC_CONFIG_MASKED;\n    this.lvt_int0 = IOAPIC_CONFIG_MASKED;\n    this.lvt_int1 = IOAPIC_CONFIG_MASKED;\n    this.lvt_error = IOAPIC_CONFIG_MASKED;\n\n    this.tpr = 0;\n    this.icr0 = 0;\n    this.icr1 = 0;\n\n    this.irr = new Int32Array(8);\n    this.isr = new Int32Array(8);\n    this.tmr = new Int32Array(8);\n\n    this.spurious_vector = 0xFE;\n    this.destination_format = -1;\n    this.local_destination = 0;\n\n    this.error = 0;\n    this.read_error = 0;\n\n    cpu.io.mmap_register(APIC_ADDRESS, 0x100000,\n        (addr) =>\n        {\n            dbg_log(\"Unsupported read8 from apic: \" + h(addr >>> 0), LOG_APIC);\n            var off = addr & 3;\n            addr &= ~3;\n            return this.read32(addr) >> (off * 8) & 0xFF;\n        },\n        (addr, value) =>\n        {\n            dbg_log(\"Unsupported write8 from apic: \" + h(addr) + \" <- \" + h(value), LOG_APIC);\n            dbg_trace();\n            dbg_assert(false);\n        },\n        (addr) => this.read32(addr),\n        (addr, value) => this.write32(addr, value)\n    );\n}\n\nAPIC.prototype.read32 = function(addr)\n{\n    addr = addr - APIC_ADDRESS | 0;\n\n    switch(addr)\n    {\n        case 0x20:\n            dbg_log(\"APIC read id\", LOG_APIC);\n            return this.apic_id;\n\n        case 0x30:\n            // version\n            dbg_log(\"APIC read version\", LOG_APIC);\n            return 0x50014;\n\n        case 0x80:\n            APIC_LOG_VERBOSE && dbg_log(\"APIC read tpr\", LOG_APIC);\n            return this.tpr;\n\n        case 0xD0:\n            dbg_log(\"Read local destination\", LOG_APIC);\n            return this.local_destination;\n\n        case 0xE0:\n            dbg_log(\"Read destination format\", LOG_APIC);\n            return this.destination_format;\n\n        case 0xF0:\n            return this.spurious_vector;\n\n        case 0x100:\n        case 0x110:\n        case 0x120:\n        case 0x130:\n        case 0x140:\n        case 0x150:\n        case 0x160:\n        case 0x170:\n            var index = addr - 0x100 >> 4;\n            dbg_log(\"Read isr \" + index + \": \" + h(this.isr[index] >>> 0, 8), LOG_APIC);\n            return this.isr[index];\n\n        case 0x180:\n        case 0x190:\n        case 0x1A0:\n        case 0x1B0:\n        case 0x1C0:\n        case 0x1D0:\n        case 0x1E0:\n        case 0x1F0:\n            var index = addr - 0x180 >> 4;\n            dbg_log(\"Read tmr \" + index + \": \" + h(this.tmr[index] >>> 0, 8), LOG_APIC);\n            return this.tmr[index];\n\n        case 0x200:\n        case 0x210:\n        case 0x220:\n        case 0x230:\n        case 0x240:\n        case 0x250:\n        case 0x260:\n        case 0x270:\n            var index = addr - 0x200 >> 4;\n            dbg_log(\"Read irr \" + index + \": \" + h(this.irr[index] >>> 0, 8), LOG_APIC);\n            return this.irr[index];\n\n        case 0x280:\n            dbg_log(\"Read error: \" + h(this.read_error >>> 0, 8), LOG_APIC);\n            return this.read_error;\n\n        case 0x300:\n            APIC_LOG_VERBOSE && dbg_log(\"APIC read icr0\", LOG_APIC);\n            return this.icr0;\n\n        case 0x310:\n            dbg_log(\"APIC read icr1\", LOG_APIC);\n            return this.icr1;\n\n        case 0x320:\n            dbg_log(\"read timer lvt\", LOG_APIC);\n            return this.lvt_timer;\n\n        case 0x340:\n            dbg_log(\"read lvt perf counter\", LOG_APIC);\n            return this.lvt_perf_counter;\n\n        case 0x350:\n            dbg_log(\"read lvt int0\", LOG_APIC);\n            return this.lvt_int0;\n\n        case 0x360:\n            dbg_log(\"read lvt int1\", LOG_APIC);\n            return this.lvt_int1;\n\n        case 0x370:\n            dbg_log(\"read lvt error\", LOG_APIC);\n            return this.lvt_error;\n\n        case 0x3E0:\n            // divider\n            dbg_log(\"read timer divider\", LOG_APIC);\n            return this.timer_divider;\n\n        case 0x380:\n            dbg_log(\"read timer initial count\", LOG_APIC);\n            return this.timer_initial_count;\n\n        case 0x390:\n            dbg_log(\"read timer current count: \" + h(this.timer_current_count >>> 0, 8), LOG_APIC);\n            return this.timer_current_count;\n\n        default:\n            dbg_log(\"APIC read \" + h(addr), LOG_APIC);\n            dbg_assert(false);\n            return 0;\n    }\n};\n\nAPIC.prototype.write32 = function(addr, value)\n{\n    addr = addr - APIC_ADDRESS | 0;\n\n    switch(addr)\n    {\n        case 0x30:\n            // version\n            dbg_log(\"APIC write version: \" + h(value >>> 0, 8) + \", ignored\", LOG_APIC);\n            break;\n\n        case 0x80:\n            APIC_LOG_VERBOSE && dbg_log(\"Set tpr: \" + h(value & 0xFF, 2), LOG_APIC);\n            this.tpr = value & 0xFF;\n            this.check_vector();\n            break;\n\n        case 0xB0:\n            var highest_isr = this.highest_isr();\n            if(highest_isr !== -1)\n            {\n                APIC_LOG_VERBOSE && dbg_log(\"eoi: \" + h(value >>> 0, 8) + \" for vector \" + h(highest_isr), LOG_APIC);\n                this.register_clear_bit(this.isr, highest_isr);\n                if(this.register_get_bit(this.tmr, highest_isr))\n                {\n                    // Send eoi to all IO APICs\n                    this.cpu.devices.ioapic.remote_eoi(highest_isr);\n                }\n                this.check_vector();\n            }\n            else\n            {\n                dbg_log(\"Bad eoi: No isr set\", LOG_APIC);\n            }\n            break;\n\n        case 0xD0:\n            dbg_log(\"Set local destination: \" + h(value >>> 0, 8), LOG_APIC);\n            this.local_destination = value & 0xFF000000;\n            break;\n\n        case 0xE0:\n            dbg_log(\"Set destination format: \" + h(value >>> 0, 8), LOG_APIC);\n            this.destination_format = value | 0xFFFFFF;\n            break;\n\n        case 0xF0:\n            dbg_log(\"Set spurious vector: \" + h(value >>> 0, 8), LOG_APIC);\n            this.spurious_vector = value;\n            break;\n\n        case 0x280:\n            // updated readable error register with real error\n            dbg_log(\"Write error: \" + h(value >>> 0, 8), LOG_APIC);\n            this.read_error = this.error;\n            this.error = 0;\n            break;\n\n        case 0x300:\n            var vector = value & 0xFF;\n            var delivery_mode = value >> 8 & 7;\n            var destination_mode = value >> 11 & 1;\n            var is_level = value >> 15 & 1;\n            var destination_shorthand = value >> 18 & 3;\n            var destination = this.icr1 >>> 24;\n            dbg_log(\"APIC write icr0: \" + h(value, 8) + \" vector=\" + h(vector, 2) + \" \" +\n                    \"destination_mode=\" + DESTINATION_MODES[destination_mode] + \" delivery_mode=\" + DELIVERY_MODES[delivery_mode] + \" \" +\n                    \"destination_shorthand=\" + [\"no\", \"self\", \"all with self\", \"all without self\"][destination_shorthand], LOG_APIC);\n\n            value &= ~(1 << 12);\n            this.icr0 = value;\n\n            if(destination_shorthand === 0)\n            {\n                // no shorthand\n                this.route(vector, delivery_mode, is_level, destination, destination_mode);\n            }\n            else if(destination_shorthand === 1)\n            {\n                // self\n                this.deliver(vector, IOAPIC_DELIVERY_FIXED, is_level);\n            }\n            else if(destination_shorthand === 2)\n            {\n                // all including self\n                this.deliver(vector, delivery_mode, is_level);\n            }\n            else if(destination_shorthand === 3)\n            {\n                // all but self\n            }\n            else\n            {\n                dbg_assert(false);\n            }\n            break;\n\n        case 0x310:\n            dbg_log(\"APIC write icr1: \" + h(value >>> 0, 8), LOG_APIC);\n            this.icr1 = value;\n            break;\n\n        case 0x320:\n            dbg_log(\"timer lvt: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_timer = value;\n            break;\n\n        case 0x340:\n            dbg_log(\"lvt perf counter: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_perf_counter = value;\n            break;\n\n        case 0x350:\n            dbg_log(\"lvt int0: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_int0 = value;\n            break;\n\n        case 0x360:\n            dbg_log(\"lvt int1: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_int1 = value;\n            break;\n\n        case 0x370:\n            dbg_log(\"lvt error: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_error = value;\n            break;\n\n        case 0x3E0:\n            dbg_log(\"timer divider: \" + h(value >>> 0, 8), LOG_APIC);\n            this.timer_divider = value;\n\n            var divide_shift = value & 0b11 | (value & 0b1000) >> 1;\n            this.timer_divider_shift = divide_shift === 0b111 ? 0 : divide_shift + 1;\n            break;\n\n        case 0x380:\n            dbg_log(\"timer initial: \" + h(value >>> 0, 8), LOG_APIC);\n            this.timer_initial_count = value >>> 0;\n            this.timer_current_count = value >>> 0;\n\n            this.next_tick = v86.microtick();\n            this.timer_active = true;\n            break;\n\n        case 0x390:\n            dbg_log(\"timer current: \" + h(value >>> 0, 8), LOG_APIC);\n            dbg_assert(false, \"read-only register\");\n            break;\n\n        default:\n            dbg_log(\"APIC write32 \" + h(addr) + \" <- \" + h(value >>> 0, 8), LOG_APIC);\n            dbg_assert(false);\n    }\n};\n\nAPIC.prototype.timer = function(now)\n{\n    if(this.timer_current_count === 0)\n    {\n        return;\n    }\n    //dbg_log(now + \" \" + this.next_tick, LOG_APIC);\n\n    var steps = (now - this.next_tick) * APIC_TIMER_FREQ / (1 << this.timer_divider_shift) >>> 0;\n\n    if(steps === 0)\n    {\n        return;\n    }\n\n    this.next_tick += steps / APIC_TIMER_FREQ * (1 << this.timer_divider_shift);\n\n    this.timer_current_count -= steps;\n\n    if(this.timer_current_count <= 0)\n    {\n        var mode = this.lvt_timer & APIC_TIMER_MODE_MASK;\n\n        if(mode === APIC_TIMER_MODE_PERIODIC)\n        {\n            // This isn't exact, because timer_current_count might already be\n            // negative at this point since timer() fires late\n            this.timer_current_count = this.timer_initial_count;\n\n            if((this.lvt_timer & IOAPIC_CONFIG_MASKED) === 0)\n            {\n                this.deliver(this.lvt_timer & 0xFF, IOAPIC_DELIVERY_FIXED, false);\n            }\n        }\n        else if(mode === APIC_TIMER_MODE_ONE_SHOT)\n        {\n            this.timer_current_count = 0;\n            dbg_log(\"APIC timer one shot end\", LOG_APIC);\n\n            if((this.lvt_timer & IOAPIC_CONFIG_MASKED) === 0)\n            {\n                this.deliver(this.lvt_timer & 0xFF, IOAPIC_DELIVERY_FIXED, false);\n            }\n        }\n    }\n};\n\nAPIC.prototype.route = function(vector, mode, is_level, destination, destination_mode)\n{\n    // TODO\n    this.deliver(vector, mode, is_level);\n};\n\nAPIC.prototype.deliver = function(vector, mode, is_level)\n{\n    APIC_LOG_VERBOSE && dbg_log(\"Deliver \" + h(vector, 2) + \" mode=\" + mode + \" level=\" + is_level, LOG_APIC);\n\n    if(mode === IOAPIC_DELIVERY_INIT)\n    {\n        // TODO\n        return;\n    }\n\n    if(mode === IOAPIC_DELIVERY_NMI)\n    {\n        // TODO\n        return;\n    }\n\n    if(vector < 0x10 || vector === 0xFF)\n    {\n        dbg_assert(false, \"TODO: Invalid vector\");\n    }\n\n    if(this.register_get_bit(this.irr, vector))\n    {\n        dbg_log(\"Not delivered: irr already set, vector=\" + h(vector, 2), LOG_APIC);\n        return;\n    }\n\n    this.register_set_bit(this.irr, vector);\n\n    if(is_level)\n    {\n        this.register_set_bit(this.tmr, vector);\n    }\n    else\n    {\n        this.register_clear_bit(this.tmr, vector);\n    }\n\n    this.check_vector();\n};\n\nAPIC.prototype.highest_irr = function()\n{\n    var highest = this.register_get_highest_bit(this.irr);\n    dbg_assert(highest !== 0xFF);\n    dbg_assert(highest >= 0x10 || highest === -1);\n    return highest;\n};\n\nAPIC.prototype.highest_isr = function()\n{\n    var highest = this.register_get_highest_bit(this.isr);\n    dbg_assert(highest !== 0xFF);\n    dbg_assert(highest >= 0x10 || highest === -1);\n    return highest;\n};\n\nAPIC.prototype.check_vector = function()\n{\n    var highest_irr = this.highest_irr();\n\n    if(highest_irr === -1)\n    {\n        return;\n    }\n\n    var highest_isr = this.highest_isr();\n\n    if(highest_isr >= highest_irr)\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"Higher isr, isr=\" + h(highest_isr) + \" irr=\" + h(highest_irr), LOG_APIC);\n        return;\n    }\n\n    if((highest_irr & 0xF0) <= (this.tpr & 0xF0))\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"Higher tpr, tpr=\" + h(this.tpr & 0xF0) + \" irr=\" + h(highest_irr), LOG_APIC);\n        return;\n    }\n\n    this.cpu.handle_irqs();\n};\n\nAPIC.prototype.acknowledge_irq = function()\n{\n    var highest_irr = this.highest_irr();\n\n    if(highest_irr === -1)\n    {\n        //dbg_log(\"Spurious\", LOG_APIC);\n        return;\n    }\n\n    var highest_isr = this.highest_isr();\n\n    if(highest_isr >= highest_irr)\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"Higher isr, isr=\" + h(highest_isr) + \" irr=\" + h(highest_irr), LOG_APIC);\n        return;\n    }\n\n    if((highest_irr & 0xF0) <= (this.tpr & 0xF0))\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"Higher tpr, tpr=\" + h(this.tpr & 0xF0) + \" irr=\" + h(highest_irr), LOG_APIC);\n        return;\n    }\n\n    this.register_clear_bit(this.irr, highest_irr);\n    this.register_set_bit(this.isr, highest_irr);\n\n    APIC_LOG_VERBOSE && dbg_log(\"Calling vector \" + h(highest_irr), LOG_APIC);\n    this.cpu.pic_call_irq(highest_irr);\n\n    this.check_vector();\n};\n\nAPIC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.apic_id;\n    state[1] = this.timer_divider;\n    state[2] = this.timer_divider_shift;\n    state[3] = this.timer_initial_count;\n    state[4] = this.timer_current_count;\n    state[5] = this.next_tick;\n    state[6] = this.lvt_timer;\n    state[7] = this.lvt_perf_counter;\n    state[8] = this.lvt_int0;\n    state[9] = this.lvt_int1;\n    state[10] = this.lvt_error;\n    state[11] = this.tpr;\n    state[12] = this.icr0;\n    state[13] = this.icr1;\n    state[14] = this.irr;\n    state[15] = this.isr;\n    state[16] = this.tmr;\n    state[17] = this.spurious_vector;\n    state[18] = this.destination_format;\n    state[19] = this.local_destination;\n    state[20] = this.error;\n    state[21] = this.read_error;\n\n    return state;\n};\n\nAPIC.prototype.set_state = function(state)\n{\n    this.apic_id = state[0];\n    this.timer_divider = state[1];\n    this.timer_divider_shift = state[2];\n    this.timer_initial_count = state[3];\n    this.timer_current_count = state[4];\n    this.next_tick = state[5];\n    this.lvt_timer = state[6];\n    this.lvt_perf_counter = state[7];\n    this.lvt_int0 = state[8];\n    this.lvt_int1 = state[9];\n    this.lvt_error = state[10];\n    this.tpr = state[11];\n    this.icr0 = state[12];\n    this.icr1 = state[13];\n    this.irr = state[14];\n    this.isr = state[15];\n    this.tmr = state[16];\n    this.spurious_vector = state[17];\n    this.destination_format = state[18];\n    this.local_destination = state[19];\n    this.error = state[20];\n    this.read_error = state[21];\n};\n\n// functions operating on 256-bit registers (for irr, isr, tmr)\nAPIC.prototype.register_get_bit = function(v, bit)\n{\n    dbg_assert(bit >= 0 && bit < 256);\n    return v[bit >> 5] >> (bit & 31) & 1;\n};\n\nAPIC.prototype.register_set_bit = function(v, bit)\n{\n    dbg_assert(bit >= 0 && bit < 256);\n    v[bit >> 5] |= 1 << (bit & 31);\n};\n\nAPIC.prototype.register_clear_bit = function(v, bit)\n{\n    dbg_assert(bit >= 0 && bit < 256);\n    v[bit >> 5] &= ~(1 << (bit & 31));\n};\n\nAPIC.prototype.register_get_highest_bit = function(v)\n{\n    for(var i = 7; i >= 0; i--)\n    {\n        var word = v[i];\n\n        if(word)\n        {\n            return v86util.int_log2(word >>> 0) | i << 5;\n        }\n    }\n\n    return -1;\n};\n","\"use strict\";\n\n// http://download.intel.com/design/chipsets/datashts/29056601.pdf\n\n/** @const */\nvar IOAPIC_ADDRESS = 0xFEC00000;\n\n/** @const */\nvar IOREGSEL = 0;\n\n/** @const */\nvar IOWIN = 0x10;\n\n/** @const */\nvar IOAPIC_IRQ_COUNT = 24;\n\n/** @const */\nvar IOAPIC_ID = 0; // must match value in seabios\n\n\n/** @const */\nvar IOAPIC_CONFIG_TRIGGER_MODE_LEVEL = 1 << 15;\n\n/** @const */\nvar IOAPIC_CONFIG_MASKED = 1 << 16;\n\n/** @const */\nvar IOAPIC_CONFIG_DELIVS = 1 << 12;\n\n/** @const */\nvar IOAPIC_CONFIG_REMOTE_IRR = 1 << 14;\n\n/** @const */\nvar IOAPIC_CONFIG_READONLY_MASK = IOAPIC_CONFIG_REMOTE_IRR | IOAPIC_CONFIG_DELIVS | 0xFFFE0000;\n\n/** @const */\nvar IOAPIC_DELIVERY_FIXED = 0;\n\n/** @const */\nvar IOAPIC_DELIVERY_LOWEST_PRIORITY = 1;\n\n/** @const */\nvar IOAPIC_DELIVERY_NMI = 4;\n\n/** @const */\nvar IOAPIC_DELIVERY_INIT = 5;\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction IOAPIC(cpu)\n{\n    /** @type {CPU} */\n    this.cpu = cpu;\n\n    this.ioredtbl_config = new Int32Array(IOAPIC_IRQ_COUNT);\n    this.ioredtbl_destination = new Int32Array(IOAPIC_IRQ_COUNT);\n\n    for(var i = 0; i < this.ioredtbl_config.length; i++)\n    {\n        // disable interrupts\n        this.ioredtbl_config[i] = IOAPIC_CONFIG_MASKED;\n    }\n\n    // IOAPIC register selection\n    this.ioregsel = 0;\n\n    this.ioapic_id = IOAPIC_ID;\n\n    this.irr = 0;\n    this.irq_value = 0;\n\n    dbg_assert(MMAP_BLOCK_SIZE >= 0x20);\n    cpu.io.mmap_register(IOAPIC_ADDRESS, MMAP_BLOCK_SIZE,\n        (addr) =>\n        {\n            dbg_assert(false, \"unsupported read8 from ioapic: \" + h(addr));\n            return 0;\n        },\n        (addr, value) =>\n        {\n            dbg_assert(false, \"unsupported write8 from ioapic: \" + h(addr));\n        },\n        (addr) =>\n        {\n            addr = addr - IOAPIC_ADDRESS | 0;\n\n            if(addr === IOREGSEL)\n            {\n                return this.ioregsel;\n            }\n            else if(addr === IOWIN)\n            {\n                return this.read(this.ioregsel);\n            }\n            else\n            {\n                dbg_log(\"Unexpected IOAPIC register read: \" + h(addr), LOG_APIC);\n                dbg_assert(false);\n                return 0;\n            }\n        },\n        (addr, value) =>\n        {\n            addr = addr - IOAPIC_ADDRESS | 0;\n\n            if(addr === IOREGSEL)\n            {\n                this.ioregsel = value;\n            }\n            else if(addr === IOWIN)\n            {\n                this.write(this.ioregsel, value);\n            }\n            else\n            {\n                dbg_log(\"Unexpected IOAPIC register write: \" + h(addr) + \" <- \" + h(value >>> 0, 8), LOG_APIC);\n                dbg_assert(false);\n            }\n        });\n}\n\nIOAPIC.prototype.remote_eoi = function(vector)\n{\n    for(var i = 0; i < IOAPIC_IRQ_COUNT; i++)\n    {\n        var config = this.ioredtbl_config[i];\n\n        if((config & 0xFF) === vector && (config & IOAPIC_CONFIG_REMOTE_IRR))\n        {\n            dbg_log(\"Clear remote IRR for irq=\" + h(i), LOG_APIC);\n            this.ioredtbl_config[i] &= ~IOAPIC_CONFIG_REMOTE_IRR;\n            this.check_irq(i);\n        }\n    }\n};\n\nIOAPIC.prototype.check_irq = function(irq)\n{\n    var mask = 1 << irq;\n\n    if((this.irr & mask) === 0)\n    {\n        return;\n    }\n\n    var config = this.ioredtbl_config[irq];\n\n    if((config & IOAPIC_CONFIG_MASKED) === 0)\n    {\n        var delivery_mode = config >> 8 & 7;\n        var destination_mode = config >> 11 & 1;\n        var vector = config & 0xFF;\n        var destination = this.ioredtbl_destination[irq] >>> 24;\n        var is_level = (config & IOAPIC_CONFIG_TRIGGER_MODE_LEVEL) === IOAPIC_CONFIG_TRIGGER_MODE_LEVEL;\n\n        if((config & IOAPIC_CONFIG_TRIGGER_MODE_LEVEL) === 0)\n        {\n            this.irr &= ~mask;\n        }\n        else\n        {\n            this.ioredtbl_config[irq] |= IOAPIC_CONFIG_REMOTE_IRR;\n\n            if(config & IOAPIC_CONFIG_REMOTE_IRR)\n            {\n                dbg_log(\"No route: level interrupt and remote IRR still set\", LOG_APIC);\n                return;\n            }\n        }\n\n        if(delivery_mode === IOAPIC_DELIVERY_FIXED || delivery_mode === IOAPIC_DELIVERY_LOWEST_PRIORITY)\n        {\n            this.cpu.devices.apic.route(vector, delivery_mode, is_level, destination, destination_mode);\n        }\n        else\n        {\n            dbg_assert(false, \"TODO\");\n        }\n\n        this.ioredtbl_config[irq] &= ~IOAPIC_CONFIG_DELIVS;\n    }\n};\n\nIOAPIC.prototype.set_irq = function(i)\n{\n    if(i >= IOAPIC_IRQ_COUNT)\n    {\n        dbg_assert(false, \"Bad irq: \" + i, LOG_APIC);\n        return;\n    }\n\n    var mask = 1 << i;\n\n    if((this.irq_value & mask) === 0)\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"apic set irq \" + i, LOG_APIC);\n\n        this.irq_value |= mask;\n\n        var config = this.ioredtbl_config[i];\n        if((config & (IOAPIC_CONFIG_TRIGGER_MODE_LEVEL|IOAPIC_CONFIG_MASKED)) ===\n                        IOAPIC_CONFIG_MASKED)\n        {\n            // edge triggered and masked\n            return;\n        }\n\n        this.irr |= mask;\n\n        this.check_irq(i);\n    }\n};\n\nIOAPIC.prototype.clear_irq = function(i)\n{\n    if(i >= IOAPIC_IRQ_COUNT)\n    {\n        dbg_assert(false, \"Bad irq: \" + i, LOG_APIC);\n        return;\n    }\n\n    var mask = 1 << i;\n\n    if((this.irq_value & mask) === mask)\n    {\n        this.irq_value &= ~mask;\n\n        var config = this.ioredtbl_config[i];\n        if(config & IOAPIC_CONFIG_TRIGGER_MODE_LEVEL)\n        {\n            this.irr &= ~mask;\n        }\n    }\n};\n\nIOAPIC.prototype.read = function(reg)\n{\n    if(reg === 0)\n    {\n        dbg_log(\"IOAPIC Read id\", LOG_APIC);\n        return this.ioapic_id << 24;\n    }\n    else if(reg === 1)\n    {\n        dbg_log(\"IOAPIC Read version\", LOG_APIC);\n        return 0x11 | IOAPIC_IRQ_COUNT - 1 << 16;\n    }\n    else if(reg === 2)\n    {\n        dbg_log(\"IOAPIC Read arbitration id\", LOG_APIC);\n        return this.ioapic_id << 24;\n    }\n    else if(reg >= 0x10 && reg < 0x10 + 2 * IOAPIC_IRQ_COUNT)\n    {\n        var irq = reg - 0x10 >> 1;\n        var index = reg & 1;\n\n        if(index)\n        {\n            var value = this.ioredtbl_destination[irq];\n            dbg_log(\"IOAPIC Read destination irq=\" + h(irq) + \" -> \" + h(value, 8), LOG_APIC);\n        }\n        else\n        {\n            var value = this.ioredtbl_config[irq];\n            dbg_log(\"IOAPIC Read config irq=\" + h(irq) + \" -> \" + h(value, 8), LOG_APIC);\n        }\n        return value;\n    }\n    else\n    {\n        dbg_log(\"IOAPIC register read outside of range \" + h(reg), LOG_APIC);\n        dbg_assert(false);\n        return 0;\n    }\n};\n\nIOAPIC.prototype.write = function(reg, value)\n{\n    //dbg_log(\"IOAPIC write \" + h(reg) + \" <- \" + h(value, 8), LOG_APIC);\n\n    if(reg === 0)\n    {\n        this.ioapic_id = value >>> 24 & 0x0F;\n    }\n    else if(reg === 1 || reg === 2)\n    {\n        dbg_log(\"Invalid write: \" + reg, LOG_APIC);\n    }\n    else if(reg >= 0x10 && reg < 0x10 + 2 * IOAPIC_IRQ_COUNT)\n    {\n        var irq = reg - 0x10 >> 1;\n        var index = reg & 1;\n\n        if(index)\n        {\n            this.ioredtbl_destination[irq] = value & 0xFF000000;\n            dbg_log(\"Write destination \" + h(value >>> 0, 8) + \" irq=\" + h(irq) + \" dest=\" + h(value >>> 24, 2), LOG_APIC);\n        }\n        else\n        {\n            var old_value = this.ioredtbl_config[irq];\n            this.ioredtbl_config[irq] = value & ~IOAPIC_CONFIG_READONLY_MASK | old_value & IOAPIC_CONFIG_READONLY_MASK;\n\n            var vector = value & 0xFF;\n            var delivery_mode = value >> 8 & 7;\n            var destination_mode = value >> 11 & 1;\n            var is_level = value >> 15 & 1;\n            var disabled = value >> 16 & 1;\n\n            dbg_log(\"Write config \" + h(value >>> 0, 8) +\n                    \" irq=\" + h(irq) +\n                    \" vector=\" + h(vector, 2) +\n                    \" deliverymode=\" + DELIVERY_MODES[delivery_mode] +\n                    \" destmode=\" + DESTINATION_MODES[destination_mode] +\n                    \" is_level=\" + is_level +\n                    \" disabled=\" + disabled, LOG_APIC);\n\n            this.check_irq(irq);\n        }\n    }\n    else\n    {\n        dbg_log(\"IOAPIC register write outside of range \" + h(reg) + \": \" + h(value >>> 0, 8), LOG_APIC);\n        dbg_assert(false);\n    }\n};\n\nIOAPIC.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.ioredtbl_config;\n    state[1] = this.ioredtbl_destination;\n    state[2] = this.ioregsel;\n    state[3] = this.ioapic_id;\n    state[4] = this.irr;\n    state[5] = this.irq_value;\n    return state;\n};\n\nIOAPIC.prototype.set_state = function(state)\n{\n    this.ioredtbl_config = state[0];\n    this.ioredtbl_destination = state[1];\n    this.ioregsel = state[2];\n    this.ioapic_id = state[3];\n    this.irr = state[4];\n    this.irq_value = state[5];\n};\n","\"use strict\";\n\n/** @const */\nvar STATE_VERSION = 5;\n\n/** @const */\nvar STATE_MAGIC = 0x86768676|0;\n\n/** @const */\nvar STATE_INDEX_MAGIC = 0;\n\n/** @const */\nvar STATE_INDEX_VERSION = 1;\n\n/** @const */\nvar STATE_INDEX_TOTAL_LEN = 2;\n\n/** @const */\nvar STATE_INDEX_INFO_LEN = 3;\n\n/** @const */\nvar STATE_INFO_BLOCK_START = 16;\n\n\n/** @constructor */\nfunction StateLoadError(msg)\n{\n    this.message = msg;\n}\nStateLoadError.prototype = new Error;\n\n\nfunction save_object(obj, saved_buffers)\n{\n    if(typeof obj !== \"object\" || obj === null || obj instanceof Array)\n    {\n        return obj;\n    }\n\n    dbg_assert(obj.constructor !== Object);\n\n    if(obj.BYTES_PER_ELEMENT)\n    {\n        // Uint8Array, etc.\n        var buffer = new Uint8Array(obj.buffer, obj.byteOffset, obj.length * obj.BYTES_PER_ELEMENT);\n\n        return {\n            \"__state_type__\": obj.constructor.name,\n            \"buffer_id\": saved_buffers.push(buffer) - 1,\n        };\n    }\n\n    if(DEBUG && !obj.get_state)\n    {\n        console.log(\"Object without get_state: \", obj);\n    }\n\n    var state = obj.get_state();\n    var result = [];\n\n    for(var i = 0; i < state.length; i++)\n    {\n        var value = state[i];\n\n        dbg_assert(typeof value !== \"function\");\n\n        result[i] = save_object(value, saved_buffers);\n    }\n\n    return result;\n}\n\nfunction restore_object(base, obj, buffers)\n{\n    // recursively restore obj into base\n\n    if(typeof obj !== \"object\" || obj === null)\n    {\n        return obj;\n    }\n\n    if(base instanceof Array)\n    {\n        return obj;\n    }\n\n    var type = obj[\"__state_type__\"];\n\n    if(type === undefined)\n    {\n        if(DEBUG && base === undefined)\n        {\n            console.log(\"Cannot restore (base doesn't exist)\", obj);\n            dbg_assert(false);\n        }\n\n        if(DEBUG && !base.get_state)\n        {\n            console.log(\"No get_state:\", base);\n        }\n\n        var current = base.get_state();\n\n        dbg_assert(current.length === obj.length, \"Cannot restore: Different number of properties\");\n\n        for(var i = 0; i < obj.length; i++)\n        {\n            obj[i] = restore_object(current[i], obj[i], buffers);\n        }\n\n        base.set_state(obj);\n\n        return base;\n    }\n    else\n    {\n        var table = {\n            \"Uint8Array\": Uint8Array,\n            \"Int8Array\": Int8Array,\n            \"Uint16Array\": Uint16Array,\n            \"Int16Array\": Int16Array,\n            \"Uint32Array\": Uint32Array,\n            \"Int32Array\": Int32Array,\n            \"Float32Array\": Float32Array,\n            \"Float64Array\": Float64Array,\n        };\n\n        var constructor = table[type];\n        dbg_assert(constructor, \"Unkown type: \" + type);\n\n        var info = buffers.infos[obj[\"buffer_id\"]];\n\n        dbg_assert(base);\n        dbg_assert(base.constructor === constructor);\n\n        // restore large buffers by just returning a view on the state blob\n        if(info.length >= 1024 * 1024 && constructor === Uint8Array)\n        {\n            return new Uint8Array(buffers.full, info.offset, info.length);\n        }\n        // XXX: Disabled, unpredictable since it updates in-place, breaks pci\n        //      and possibly also breaks restore -> save -> restore again\n        // avoid a new allocation if possible\n        //else if(base &&\n        //        base.constructor === constructor &&\n        //        base.byteOffset === 0 &&\n        //        base.byteLength === info.length)\n        //{\n        //    new Uint8Array(base.buffer).set(\n        //        new Uint8Array(buffers.full, info.offset, info.length),\n        //        base.byteOffset\n        //    );\n        //    return base;\n        //}\n        else\n        {\n            var buf = buffers.full.slice(info.offset, info.offset + info.length);\n            return new constructor(buf);\n        }\n    }\n}\n\nCPU.prototype.save_state = function()\n{\n    var saved_buffers = [];\n    var state = save_object(this, saved_buffers);\n\n    var buffer_infos = [];\n    var total_buffer_size = 0;\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var len = saved_buffers[i].byteLength;\n\n        buffer_infos[i] = {\n            offset: total_buffer_size,\n            length: len,\n        };\n\n        total_buffer_size += len;\n\n        // align\n        total_buffer_size = total_buffer_size + 3 & ~3;\n    }\n\n    var info_object = JSON.stringify({\n        \"buffer_infos\": buffer_infos,\n        \"state\": state,\n    });\n\n    var buffer_block_start = STATE_INFO_BLOCK_START + 2 * info_object.length;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n    var total_size = buffer_block_start + total_buffer_size;\n\n    //console.log(\"State: json_size=\" + Math.ceil(buffer_block_start / 1024 / 1024) + \"MB \" +\n    //               \"buffer_size=\" + Math.ceil(total_buffer_size / 1024 / 1024) + \"MB\");\n\n    var result = new ArrayBuffer(total_size);\n\n    var header_block = new Int32Array(\n        result,\n        0,\n        STATE_INFO_BLOCK_START / 4\n    );\n    var info_block = new Uint16Array(\n        result,\n        STATE_INFO_BLOCK_START,\n        info_object.length\n    );\n    var buffer_block = new Uint8Array(\n        result,\n        buffer_block_start\n    );\n\n    header_block[STATE_INDEX_MAGIC] = STATE_MAGIC;\n    header_block[STATE_INDEX_VERSION] = STATE_VERSION;\n    header_block[STATE_INDEX_TOTAL_LEN] = total_size;\n    header_block[STATE_INDEX_INFO_LEN] = info_object.length * 2;\n\n    for(var i = 0; i < info_object.length; i++)\n    {\n        info_block[i] = info_object.charCodeAt(i);\n    }\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var buffer = saved_buffers[i];\n        dbg_assert(buffer.constructor === Uint8Array);\n        buffer_block.set(buffer, buffer_infos[i].offset);\n    }\n\n    return result;\n};\n\nCPU.prototype.restore_state = function(state)\n{\n    var len = state.byteLength;\n\n    if(len < STATE_INFO_BLOCK_START)\n    {\n        throw new StateLoadError(\"Invalid length: \" + len);\n    }\n\n    var header_block = new Int32Array(state, 0, 4);\n\n    if(header_block[STATE_INDEX_MAGIC] !== STATE_MAGIC)\n    {\n        throw new StateLoadError(\"Invalid header: \" + h(header_block[STATE_INDEX_MAGIC] >>> 0));\n    }\n\n    if(header_block[STATE_INDEX_VERSION] !== STATE_VERSION)\n    {\n        throw new StateLoadError(\n                \"Version mismatch: dump=\" + header_block[STATE_INDEX_VERSION] +\n                \" we=\" + STATE_VERSION);\n    }\n\n    if(header_block[STATE_INDEX_TOTAL_LEN] !== len)\n    {\n        throw new StateLoadError(\n                \"Length doesn't match header: \" +\n                \"real=\" + len + \" header=\" + header_block[STATE_INDEX_TOTAL_LEN]);\n    }\n\n    var info_block_len = header_block[STATE_INDEX_INFO_LEN];\n\n    if(info_block_len < 0 ||\n       info_block_len + 12 >= len ||\n       info_block_len % 2)\n    {\n        throw new StateLoadError(\"Invalid info block length: \" + info_block_len);\n    }\n\n    var info_block_str_len = info_block_len / 2;\n    var info_block_buffer = new Uint16Array(state, STATE_INFO_BLOCK_START, info_block_str_len);\n    var info_block = \"\";\n\n    for(var i = 0; i < info_block_str_len - 8; )\n    {\n        info_block += String.fromCharCode(\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++]\n        );\n    }\n\n    for(; i < info_block_str_len; )\n    {\n        info_block += String.fromCharCode(info_block_buffer[i++]);\n    }\n\n    var info_block_obj = JSON.parse(info_block);\n    var state_object = info_block_obj[\"state\"];\n    var buffer_infos = info_block_obj[\"buffer_infos\"];\n    var buffer_block_start = STATE_INFO_BLOCK_START + info_block_len;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n\n    for(var i = 0; i < buffer_infos.length; i++)\n    {\n        buffer_infos[i].offset += buffer_block_start;\n    }\n\n    var buffers = {\n        full: state,\n        infos: buffer_infos,\n    };\n\n    restore_object(this, state_object, buffers);\n};\n","\"use strict\";\n\n\n/** @const */ var E8390_CMD = 0x00 /* The command register (for all pages) */\n\n/* Page 0 register offsets. */\n/** @const */ var EN0_CLDALO = 0x01 /* Low byte of current local dma addr RD */\n/** @const */ var EN0_STARTPG = 0x01 /* Starting page of ring bfr WR */\n/** @const */ var EN0_CLDAHI = 0x02 /* High byte of current local dma addr RD */\n/** @const */ var EN0_STOPPG = 0x02 /* Ending page +1 of ring bfr WR */\n/** @const */ var EN0_BOUNDARY = 0x03 /* Boundary page of ring bfr RD WR */\n/** @const */ var EN0_TSR = 0x04 /* Transmit status reg RD */\n/** @const */ var EN0_TPSR = 0x04 /* Transmit starting page WR */\n/** @const */ var EN0_NCR = 0x05 /* Number of collision reg RD */\n/** @const */ var EN0_TCNTLO = 0x05 /* Low byte of tx byte count WR */\n/** @const */ var EN0_FIFO = 0x06 /* FIFO RD */\n/** @const */ var EN0_TCNTHI = 0x06 /* High byte of tx byte count WR */\n/** @const */ var EN0_ISR = 0x07 /* Interrupt status reg RD WR */\n/** @const */ var EN0_CRDALO = 0x08 /* low byte of current remote dma address RD */\n/** @const */ var EN0_RSARLO = 0x08 /* Remote start address reg 0 */\n/** @const */ var EN0_CRDAHI = 0x09 /* high byte, current remote dma address RD */\n/** @const */ var EN0_RSARHI = 0x09 /* Remote start address reg 1 */\n/** @const */ var EN0_RCNTLO = 0x0a /* Remote byte count reg WR */\n/** @const */ var EN0_RCNTHI = 0x0b /* Remote byte count reg WR */\n/** @const */ var EN0_RSR = 0x0c /* rx status reg RD */\n/** @const */ var EN0_RXCR = 0x0c /* RX configuration reg WR */\n/** @const */ var EN0_TXCR = 0x0d /* TX configuration reg WR */\n/** @const */ var EN0_COUNTER0 = 0x0d /* Rcv alignment error counter RD */\n/** @const */ var EN0_DCFG = 0x0e /* Data configuration reg WR */\n/** @const */ var EN0_COUNTER1 = 0x0e /* Rcv CRC error counter RD */\n/** @const */ var EN0_IMR = 0x0f /* Interrupt mask reg WR */\n/** @const */ var EN0_COUNTER2 = 0x0f /* Rcv missed frame error counter RD */\n\n/** @const */ var NE_DATAPORT = 0x10 /* NatSemi-defined port window offset. */\n/** @const */ var NE_RESET = 0x1f /* Issue a read to reset, a write to clear. */\n\n/* Bits in EN0_ISR - Interrupt status register */\n/** @const */ var ENISR_RX = 0x01 /* Receiver, no error */\n/** @const */ var ENISR_TX = 0x02 /* Transmitter, no error */\n/** @const */ var ENISR_RX_ERR = 0x04 /* Receiver, with error */\n/** @const */ var ENISR_TX_ERR = 0x08 /* Transmitter, with error */\n/** @const */ var ENISR_OVER = 0x10 /* Receiver overwrote the ring */\n/** @const */ var ENISR_COUNTERS = 0x20 /* Counters need emptying */\n/** @const */ var ENISR_RDC = 0x40 /* remote dma complete */\n/** @const */ var ENISR_RESET = 0x80 /* Reset completed */\n/** @const */ var ENISR_ALL = 0x3f /* Interrupts we will enable */\n\n/** @const */ var ENRSR_RXOK = 0x01 /* Received a good packet */\n\n/** @const */ var START_PAGE = 0x40;\n/** @const */ var START_RX_PAGE = 0x40 + 12;\n/** @const */ var STOP_PAGE = 0x80;\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction Ne2k(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n    this.bus.register(\"net0-receive\", function(data)\n    {\n        this.receive(data);\n    }, this);\n\n    this.port = 0x300;\n\n    this.name = \"ne2k\";\n\n    /** @const */\n    var use_pci = true;\n\n    if(use_pci)\n    {\n        this.pci_space = [\n            0xec, 0x10, 0x29, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\n            this.port & 0xFF | 1, this.port >> 8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x00, 0x11,\n            0x00, 0x00, 0xb8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n        ];\n        this.pci_id = 0x05 << 3;\n        this.pci_bars = [\n            {\n                size: 32,\n            },\n        ];\n    }\n\n    this.isr = 0;\n    this.imr = 0; // interrupt mask register\n\n    this.cr = 1;\n\n    this.dcfg = 0;\n\n    this.rcnt = 0;\n\n    this.tcnt = 0;\n    this.tpsr = 0;\n    this.memory = new Uint8Array(256 * 0x80);\n\n    this.rxcr = 0;\n    this.txcr = 0;\n    this.tsr = 1;\n\n    // mac address\n    var mac = [\n        0x00, 0x22, 0x15,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n    ];\n\n    for(var i = 0; i < 6; i++)\n    {\n        this.memory[i << 1] = this.memory[i << 1 | 1] = mac[i];\n    }\n\n    this.memory[14] = this.memory[15] = 0x57;\n\n    dbg_log(\"Mac: \" + h(mac[0], 2) + \":\" +\n                      h(mac[1], 2) + \":\" +\n                      h(mac[2], 2) + \":\" +\n                      h(mac[3], 2) + \":\" +\n                      h(mac[4], 2) + \":\" +\n                      h(mac[5], 2), LOG_NET);\n\n    this.rsar = 0;\n\n    this.pstart = START_PAGE;\n    this.pstop = STOP_PAGE;\n\n    this.curpg = START_RX_PAGE;\n    this.boundary = START_RX_PAGE;\n\n    var io = cpu.io;\n\n    io.register_read(this.port | E8390_CMD, this, function()\n    {\n        dbg_log(\"Read cmd\", LOG_NET);\n        return this.cr;\n    });\n\n    io.register_write(this.port | E8390_CMD, this, function(data_byte)\n    {\n        this.cr = data_byte & ~4;\n        dbg_log(\"Write command: \" + h(data_byte, 2) + \" newpg=\" + (this.cr >> 6) + \" txcr=\" + h(this.txcr, 2), LOG_NET);\n\n        if(this.cr & 1)\n        {\n            return;\n        }\n\n        if((data_byte | 0x18) && this.rcnt === 0)\n        {\n            this.do_interrupt(ENISR_RDC);\n        }\n\n        if(data_byte & 4)\n        {\n            var start = this.tpsr << 8;\n            var data = this.memory.subarray(start, start + this.tcnt);\n            this.bus.send(\"net0-send\", data);\n            this.bus.send(\"eth-transmit-end\", [data.length]);\n            this.do_interrupt(ENISR_TX);\n\n            dbg_log(\"Command: Transfer. length=\" + h(data.byteLength), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_COUNTER0, this, function()\n    {\n        dbg_log(\"Read counter0\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER1, this, function()\n    {\n        dbg_log(\"Read counter1\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER2, this, function()\n    {\n        dbg_log(\"Read counter2\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | NE_RESET, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read reset\", LOG_NET);\n            this.do_interrupt(ENISR_RESET);\n        }\n        else\n        {\n            dbg_log(\"Read pg1/1f\", LOG_NET);\n        }\n        return 0;\n    });\n\n    io.register_write(this.port | NE_RESET, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write reset: \" + h(data_byte, 2), LOG_NET);\n            //this.isr &= ~ENISR_RESET;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/1f: \" + h(data_byte), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STARTPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"start page: \" + h(data_byte, 2), LOG_NET);\n            this.pstart = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/1: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STOPPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"stop page: \" + h(data_byte, 2), LOG_NET);\n            this.pstop = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/2: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_ISR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read isr: \" + h(this.isr, 2), LOG_NET);\n            return this.isr;\n        }\n        else\n        {\n            dbg_log(\"Read curpg: \" + h(this.curpg, 2), LOG_NET);\n            return this.curpg;\n        }\n    });\n\n    io.register_write(this.port | EN0_ISR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            // acknowledge interrupts where bit is set\n            dbg_log(\"Write isr: \" + h(data_byte, 2), LOG_NET);\n            this.isr &= ~data_byte\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write curpg: \" + h(data_byte, 2), LOG_NET);\n            this.curpg = data_byte\n        }\n    });\n\n    io.register_write(this.port | EN0_TXCR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            this.txcr = data_byte;\n            dbg_log(\"Write tx config: \" + h(data_byte, 2), LOG_NET);\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0d \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_DCFG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write data configuration: \" + h(data_byte, 2), LOG_NET);\n            this.dcfg = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0e \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count low: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0a \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count high: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0b \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote start address low: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x08 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write start address count high: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x09 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_IMR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write interrupt mask register: \" + h(data_byte, 2) + \" isr=\" + h(this.isr, 2), LOG_NET);\n            this.imr = data_byte;\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0f \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_BOUNDARY, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read boundary: \" + h(this.boundary, 2), LOG_NET);\n            return this.boundary;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x03\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_BOUNDARY, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write boundary: \" + h(data_byte, 2), LOG_NET);\n            this.boundary = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x03 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_TSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return this.tsr;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x04\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_TPSR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tpsr: \" + h(data_byte, 2), LOG_NET);\n            this.tpsr = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x04 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt low: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & ~0xFF | data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x05 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt high: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & 0xFF | data_byte << 8;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x06 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_RSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return 1 | 1 << 3; // receive status ok\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x0c\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_RXCR, this, function(data_byte)\n    {\n        dbg_log(\"RX configuration reg write: \" + h(data_byte, 2), LOG_NET);\n        this.rxcr = data_byte;\n    });\n\n    io.register_read(this.port | NE_DATAPORT | 0, this,\n            this.data_port_read8,\n            this.data_port_read16,\n            this.data_port_read32);\n    io.register_write(this.port | NE_DATAPORT | 0, this,\n            this.data_port_write16,\n            this.data_port_write16,\n            this.data_port_write32);\n\n    if(use_pci)\n    {\n        cpu.devices.pci.register_device(this);\n    }\n}\n\nNe2k.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.isr;\n    state[1] = this.imr;\n    state[2] = this.cr;\n    state[3] = this.dcfg;\n    state[4] = this.rcnt;\n    state[5] = this.tcnt;\n    state[6] = this.tpsr;\n    state[7] = this.rsar;\n    state[8] = this.pstart;\n    state[9] = this.curpg;\n    state[10] = this.boundary;\n\n    return state;\n};\n\nNe2k.prototype.set_state = function(state)\n{\n    this.isr = state[0];\n    this.imr = state[1];\n    this.cr = state[2];\n    this.dcfg = state[3];\n    this.rcnt = state[4];\n    this.tcnt = state[5];\n    this.tpsr = state[6];\n    this.rsar = state[7];\n    this.pstart = state[8];\n    this.curpg = state[9];\n    this.boundary = state[10];\n};\n\nNe2k.prototype.do_interrupt = function(ir_mask)\n{\n    dbg_log(\"Do interrupt \" + h(ir_mask, 2), LOG_NET);\n    this.isr |= ir_mask;\n    this.update_irq();\n};\n\nNe2k.prototype.update_irq = function()\n{\n    if(this.imr & this.isr)\n    {\n        this.pci.raise_irq(this.pci_id);\n    }\n    else\n    {\n        this.pci.lower_irq(this.pci_id);\n    }\n};\n\nNe2k.prototype.data_port_write = function(data_byte)\n{\n    dbg_log(\"Write data port: data=\" + h(data_byte & 0xFF, 2) +\n                            \" rsar=\" + h(this.rsar, 4) +\n                            \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n\n    if(this.rsar > 0x10 && this.rsar < (START_PAGE << 8))\n    {\n        // unmapped\n        return;\n    }\n\n    this.rcnt--;\n    this.memory[this.rsar++] = data_byte;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n};\n\nNe2k.prototype.data_port_write16 = function(data)\n{\n    this.data_port_write(data);\n\n    if(this.dcfg & 1)\n    {\n        this.data_port_write(data >> 8);\n    }\n};\n\nNe2k.prototype.data_port_write32 = function(data)\n{\n    this.data_port_write(data);\n    this.data_port_write(data >> 8);\n    this.data_port_write(data >> 16);\n    this.data_port_write(data >> 24);\n};\n\nNe2k.prototype.data_port_read = function()\n{\n    var data = this.memory[this.rsar++];\n\n    dbg_log(\"Read data port: data=\" + h(data, 2) +\n                           \" rsar=\" + h(this.rsar - 1, 4) +\n                           \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n    this.rcnt--;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n\n    return data;\n};\n\nNe2k.prototype.data_port_read8 = function()\n{\n    return this.data_port_read16() & 0xFF;\n};\n\nNe2k.prototype.data_port_read16 = function()\n{\n    if(this.dcfg & 1)\n    {\n        return this.data_port_read() | this.data_port_read() << 8;\n    }\n    else\n    {\n        return this.data_port_read();\n    }\n};\n\nNe2k.prototype.data_port_read32 = function()\n{\n    return this.data_port_read() | this.data_port_read() << 8 |\n            this.data_port_read() << 16 | this.data_port_read() << 24;\n};\n\nNe2k.prototype.receive = function(data)\n{\n    // called from the adapter when data is received over the network\n\n    if(this.cr & 1)\n    {\n        // stop bit set\n        return;\n    }\n\n    this.bus.send(\"eth-receive-end\", [data.length]);\n\n    if(this.rxcr & 0x10)\n    {\n        // promiscuous\n    }\n    else if((this.rxcr & 4) &&\n            data[0] === 0xFF && data[1] === 0xFF && data[2] === 0xFF &&\n            data[3] === 0xFF && data[4] === 0xFF && data[5] === 0xFF)\n    {\n        // broadcast\n    }\n    else if((this.rxcr & 8) && (data[0] & 1) === 1)\n    {\n        // multicast\n        // XXX\n        return;\n    }\n    else if(data[0] === this.memory[0] && data[1] === this.memory[2] &&\n            data[2] === this.memory[4] && data[3] === this.memory[6] &&\n            data[4] === this.memory[8] && data[5] === this.memory[10])\n    {\n    }\n    else\n    {\n        return;\n    }\n\n    var packet_length = Math.max(60, data.length);\n\n    var offset = this.curpg << 8;\n    var total_length = packet_length + 4;\n    var data_start = offset + 4;\n    var next = this.curpg + 1 + (total_length >> 8);\n\n    var end = offset + total_length;\n\n    if(end > this.memory.length)\n    {\n        // shouldn't happen because at this size it can't cross a page\n        dbg_assert(data.length >= 60);\n\n        var cut = this.memory.length - data_start;\n        this.memory.set(data.subarray(0, cut), data_start);\n        this.memory.set(data.subarray(cut), START_RX_PAGE);\n        dbg_log(\"rcv cut=\" + h(cut), LOG_NET);\n    }\n    else\n    {\n        this.memory.set(data, data_start);\n\n        if(data.length < 60)\n        {\n            for(var i = data.length; i < 60; i++)\n            {\n                this.memory[data_start + i] = 0;\n            }\n        }\n    }\n\n    if(next >= this.pstop)\n    {\n        next += this.pstart - this.pstop;\n    }\n\n    // write packet header\n    this.memory[offset] = ENRSR_RXOK; // status\n    this.memory[offset + 1] = next;\n    this.memory[offset + 2] = total_length;\n    this.memory[offset + 3] = total_length >> 8;\n\n    this.curpg = next;\n\n    dbg_log(\"rcv offset=\" + h(offset) + \" len=\" + h(total_length) + \" next=\" + h(next), LOG_NET);\n\n    this.do_interrupt(ENISR_RX);\n};\n\nNe2k.prototype.get_page = function()\n{\n    return this.cr & 0xC0;\n};\n","\"use strict\";\n\n// Useful documentation, articles, and source codes for reference:\n// ===============================================================\n//\n// Official Hardware Programming Guide\n// -> https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n//\n// Official Yamaha YMF262 Manual\n// -> http://map.grauw.nl/resources/sound/yamaha_ymf262.pdf\n//\n// OPL3 Programming Guide\n// -> http://www.fit.vutbr.cz/~arnost/opl/opl3.html\n//\n// DOSBox\n// -> https://sourceforge.net/p/dosbox/code-0/HEAD/tree/dosbox/branches/mamesound/src/hardware/sblaster.cpp\n// -> https://github.com/duganchen/dosbox/blob/master/src/hardware/sblaster.cpp\n// -> https://github.com/joncampbell123/dosbox-x/blob/master/src/hardware/sblaster.cpp\n//\n// QEMU\n// -> https://github.com/qemu/qemu/blob/master/hw/audio/sb16.c\n// -> https://github.com/hackndev/qemu/blob/master/hw/sb16.c\n//\n// VirtualBox\n// -> https://www.virtualbox.org/svn/vbox/trunk/src/VBox/Devices/Audio/DevSB16.cpp\n// -> https://github.com/mdaniel/virtualbox-org-svn-vbox-trunk/blob/master/src/VBox/Devices/Audio/DevSB16.cpp\n\nvar\n\n    // Used for drivers to identify device (DSP command 0xE3).\n/** @const */ DSP_COPYRIGHT = \"COPYRIGHT (C) CREATIVE TECHNOLOGY LTD, 1992.\",\n\n    // Value of the current DSP command that indicates that the\n    // next command/data write in port 2xC should be interpreted\n    // as a command number.\n/** @const */ DSP_NO_COMMAND = 0,\n\n    // Size (bytes) of the DSP write/read buffers\n/** @const */ DSP_BUFSIZE = 64,\n\n    // Size (bytes) of the buffers containing floating point linear PCM audio.\n/** @const */ DSP_DACSIZE = 65536,\n\n    // Size (bytes) of the buffer in which DMA transfers are temporarily\n    // stored before being processed.\n/** @const */ SB_DMA_BUFSIZE = 65536,\n\n    // Number of samples to attempt to retrieve per transfer.\n/** @const */ SB_DMA_BLOCK_SAMPLES = 1024,\n\n    // Usable DMA channels.\n/** @const */ SB_DMA0 = 0,\n/** @const */ SB_DMA1 = 1,\n/** @const */ SB_DMA3 = 3,\n/** @const */ SB_DMA5 = 5,\n/** @const */ SB_DMA6 = 6,\n/** @const */ SB_DMA7 = 7,\n\n    // Default DMA channels.\n/** @const */ SB_DMA_CHANNEL_8BIT = SB_DMA1,\n/** @const */ SB_DMA_CHANNEL_16BIT = SB_DMA5,\n\n    // Usable IRQ channels.\n/** @const */ SB_IRQ2 = 2,\n/** @const */ SB_IRQ5 = 5,\n/** @const */ SB_IRQ7 = 7,\n/** @const */ SB_IRQ10 = 10,\n\n    // Default IRQ channel.\n/** @const */ SB_IRQ = SB_IRQ5,\n\n    // Indices to the irq_triggered register.\n/** @const */ SB_IRQ_8BIT = 0x1,\n/** @const */ SB_IRQ_16BIT = 0x2,\n/** @const */ SB_IRQ_MIDI = 0x1,\n/** @const */ SB_IRQ_MPU = 0x4;\n\n\n// Probably less efficient, but it's more maintainable, instead\n// of having a single large unorganised and decoupled table.\nvar DSP_COMMAND_SIZES = new Uint8Array(256);\nvar DSP_COMMAND_HANDLERS = [];\nvar MIXER_READ_HANDLERS = [];\nvar MIXER_WRITE_HANDLERS = [];\nvar MIXER_REGISTER_IS_LEGACY = new Uint8Array(256);\nvar FM_HANDLERS = [];\n\n\n/**\n * Sound Blaster 16 Emulator, or so it seems.\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction SB16(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    // I/O Buffers.\n    this.write_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer_lastvalue = 0;\n\n    // Current DSP command info.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    // Mixer.\n    this.mixer_current_address = 0;\n    this.mixer_registers = new Uint8Array(256);\n    this.mixer_reset();\n\n    // Dummy status and test registers.\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    // DSP state.\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    // DAC buffer.\n    // The final destination for audio data before being sent off\n    // to Web Audio APIs.\n    // Format:\n    // Floating precision linear PCM, nominal between -1 and 1.\n    this.dac_buffers = [\n      new FloatQueue(DSP_DACSIZE),\n      new FloatQueue(DSP_DACSIZE),\n    ];\n\n    // Direct Memory Access transfer info.\n    this.dma = cpu.devices.dma;\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_channel_8bit = SB_DMA_CHANNEL_8BIT;\n    this.dma_channel_16bit = SB_DMA_CHANNEL_16BIT;\n    this.dma_autoinit = false;\n    this.dma_buffer = new ArrayBuffer(SB_DMA_BUFSIZE);\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_uint8 = new Uint8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n    this.sampling_rate = 22050;\n    bus.send(\"dac-tell-sampling-rate\", this.sampling_rate);\n    this.bytes_per_sample = 1;\n\n    // DMA identification data.\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    // ASP data: not understood by me.\n    this.asp_registers = new Uint8Array(256);\n\n    // MPU.\n    this.mpu_read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.mpu_read_buffer_lastvalue = 0;\n\n    // FM Synthesizer.\n    this.fm_current_address0 = 0;\n    this.fm_current_address1 = 0;\n    this.fm_waveform_select_enable = false;\n\n    // Interrupts.\n    this.irq = SB_IRQ;\n    this.irq_triggered = new Uint8Array(0x10);\n\n    // IO Ports.\n    // http://homepages.cae.wisc.edu/~brodskye/sb16doc/sb16doc.html#DSPPorts\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n\n    cpu.io.register_read_consecutive(0x220, this,\n        this.port2x0_read, this.port2x1_read, this.port2x2_read, this.port2x3_read);\n    cpu.io.register_read_consecutive(0x388, this,\n        this.port2x0_read, this.port2x1_read);\n\n    cpu.io.register_read_consecutive(0x224, this,\n        this.port2x4_read, this.port2x5_read);\n\n    cpu.io.register_read(0x226, this, this.port2x6_read);\n    cpu.io.register_read(0x227, this, this.port2x7_read);\n    cpu.io.register_read(0x228, this, this.port2x8_read);\n    cpu.io.register_read(0x229, this, this.port2x9_read);\n\n    cpu.io.register_read(0x22A, this, this.port2xA_read);\n    cpu.io.register_read(0x22B, this, this.port2xB_read);\n    cpu.io.register_read(0x22C, this, this.port2xC_read);\n    cpu.io.register_read(0x22D, this, this.port2xD_read);\n\n    cpu.io.register_read_consecutive(0x22E, this,\n        this.port2xE_read, this.port2xF_read);\n\n    cpu.io.register_write_consecutive(0x220, this,\n        this.port2x0_write, this.port2x1_write, this.port2x2_write, this.port2x3_write);\n    cpu.io.register_write_consecutive(0x388, this,\n        this.port2x0_write, this.port2x1_write);\n\n    cpu.io.register_write_consecutive(0x224, this,\n        this.port2x4_write, this.port2x5_write);\n\n    cpu.io.register_write(0x226, this, this.port2x6_write);\n    cpu.io.register_write(0x227, this, this.port2x7_write);\n\n    cpu.io.register_write_consecutive(0x228, this,\n        this.port2x8_write, this.port2x9_write);\n\n    cpu.io.register_write(0x22A, this, this.port2xA_write);\n    cpu.io.register_write(0x22B, this, this.port2xB_write);\n    cpu.io.register_write(0x22C, this, this.port2xC_write);\n    cpu.io.register_write(0x22D, this, this.port2xD_write);\n    cpu.io.register_write(0x22E, this, this.port2xE_write);\n    cpu.io.register_write(0x22F, this, this.port2xF_write);\n\n    cpu.io.register_read_consecutive(0x330, this, this.port3x0_read, this.port3x1_read);\n    cpu.io.register_write_consecutive(0x330, this, this.port3x0_write, this.port3x1_write);\n\n    this.dma.on_unmask(this.dma_on_unmask, this);\n\n    bus.register(\"dac-request-data\", function()\n    {\n        this.dac_handle_request();\n    }, this);\n    bus.register(\"speaker-has-initialized\", function()\n    {\n        this.mixer_reset();\n    }, this);\n    bus.send(\"speaker-confirm-initialized\");\n\n    this.dsp_reset();\n}\n\n//\n// General\n//\n\nSB16.prototype.dsp_reset = function()\n{\n    this.write_buffer.clear();\n    this.read_buffer.clear();\n\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    this.dac_buffers[0].clear();\n    this.dac_buffers[1].clear();\n\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_autoinit = false;\n    this.dma_buffer_uint8.fill(0);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    this.sampling_rate = 22050;\n    this.bytes_per_sample = 1;\n\n    this.lower_irq(SB_IRQ_8BIT);\n    this.irq_triggered.fill(0);\n\n    this.asp_registers.fill(0);\n    this.asp_registers[5] = 0x01;\n    this.asp_registers[9] = 0xF8;\n};\n\nSB16.prototype.get_state = function()\n{\n    var state = [];\n\n    // state[0] = this.write_buffer;\n    // state[1] = this.read_buffer;\n    state[2] = this.read_buffer_lastvalue;\n\n    state[3] = this.command;\n    state[4] = this.command_size;\n\n    state[5] = this.mixer_current_address;\n    state[6] = this.mixer_registers;\n\n    state[7] = this.dummy_speaker_enabled;\n    state[8] = this.test_register;\n\n    state[9] = this.dsp_highspeed;\n    state[10] = this.dsp_stereo;\n    state[11] = this.dsp_16bit;\n    state[12] = this.dsp_signed;\n\n    // state[13] = this.dac_buffers;\n    //state[14]\n\n    state[15] = this.dma_sample_count;\n    state[16] = this.dma_bytes_count;\n    state[17] = this.dma_bytes_left;\n    state[18] = this.dma_bytes_block;\n    state[19] = this.dma_irq;\n    state[20] = this.dma_channel;\n    state[21] = this.dma_channel_8bit;\n    state[22] = this.dma_channel_16bit;\n    state[23] = this.dma_autoinit;\n    state[24] = this.dma_buffer_uint8;\n    state[25] = this.dma_waiting_transfer;\n    state[26] = this.dma_paused;\n    state[27] = this.sampling_rate;\n    state[28] = this.bytes_per_sample;\n\n    state[29] = this.e2_value;\n    state[30] = this.e2_count;\n\n    state[31] = this.asp_registers;\n\n    // state[32] = this.mpu_read_buffer;\n    state[33] = this.mpu_read_buffer_last_value;\n\n    state[34] = this.irq;\n    state[35] = this.irq_triggered;\n    //state[36]\n\n    return state;\n};\n\nSB16.prototype.set_state = function(state)\n{\n    // this.write_buffer = state[0];\n    // this.read_buffer = state[1];\n    this.read_buffer_lastvalue = state[2];\n\n    this.command = state[3];\n    this.command_size = state[4];\n\n    this.mixer_current_address = state[5];\n    this.mixer_registers = state[6];\n    this.mixer_full_update();\n\n    this.dummy_speaker_enabled = state[7];\n    this.test_register = state[8];\n\n    this.dsp_highspeed = state[9];\n    this.dsp_stereo = state[10];\n    this.dsp_16bit = state[11];\n    this.dsp_signed = state[12];\n\n    // this.dac_buffers = state[13];\n    //state[14]\n\n    this.dma_sample_count = state[15];\n    this.dma_bytes_count = state[16];\n    this.dma_bytes_left = state[17];\n    this.dma_bytes_block = state[18];\n    this.dma_irq = state[19];\n    this.dma_channel = state[20];\n    this.dma_channel_8bit = state[21];\n    this.dma_channel_16bit = state[22];\n    this.dma_autoinit = state[23];\n    this.dma_buffer_uint8 = state[24];\n    this.dma_waiting_transfer = state[25];\n    this.dma_paused = state[26];\n    this.sampling_rate = state[27];\n    this.bytes_per_sample = state[28];\n\n    this.e2_value = state[29];\n    this.e2_count = state[30];\n\n    this.asp_registers = state[31];\n\n    // this.mpu_read_buffer = state[32];\n    this.mpu_read_buffer_last_value = state[33];\n\n    this.irq = state[34];\n    this.irq_triggered = state[35];\n    //state[36];\n\n    this.dma_buffer = this.dma_buffer_uint8.buffer;\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n\n    if(this.dma_paused)\n    {\n        this.bus.send(\"dac-disable\");\n    }\n    else\n    {\n        this.bus.send(\"dac-enable\");\n    }\n};\n\n//\n// I/O handlers\n//\n\nSB16.prototype.port2x0_read = function()\n{\n    dbg_log(\"220 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x1_read = function()\n{\n    dbg_log(\"221 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x2_read = function()\n{\n    dbg_log(\"222 read: advanced fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x3_read = function()\n{\n    dbg_log(\"223 read: advanced music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_read = function()\n{\n    dbg_log(\"224 read: mixer address port\", LOG_SB16);\n    return this.mixer_current_address;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_read = function()\n{\n    dbg_log(\"225 read: mixer data port\", LOG_SB16);\n    return this.mixer_read(this.mixer_current_address);\n};\n\nSB16.prototype.port2x6_read = function()\n{\n    dbg_log(\"226 read: (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x7_read = function()\n{\n    dbg_log(\"227 read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x8_read = function()\n{\n    dbg_log(\"228 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x9_read = function()\n{\n    dbg_log(\"229 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read Data.\n// Used to access in-bound DSP data.\nSB16.prototype.port2xA_read = function()\n{\n    dbg_log(\"22A read: read data\", LOG_SB16);\n    if(this.read_buffer.length)\n    {\n        this.read_buffer_lastvalue = this.read_buffer.shift();\n    }\n    dbg_log(\" <- \" + this.read_buffer_lastvalue + \" \" + h(this.read_buffer_lastvalue) + \" '\" + String.fromCharCode(this.read_buffer_lastvalue) + \"'\", LOG_SB16);\n    return this.read_buffer_lastvalue;\n};\n\nSB16.prototype.port2xB_read = function()\n{\n    dbg_log(\"22B read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Write-Buffer Status.\n// Indicates whether the DSP is ready to accept commands or data.\nSB16.prototype.port2xC_read = function()\n{\n    dbg_log(\"22C read: write-buffer status\", LOG_SB16);\n    // Always return ready (bit-7 set to low)\n    return 0x7F;\n};\n\nSB16.prototype.port2xD_read = function()\n{\n    dbg_log(\"22D read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read-Buffer Status.\n// Indicates whether there is any in-bound data available for reading.\n// Also used to acknowledge DSP 8-bit interrupt.\nSB16.prototype.port2xE_read = function()\n{\n    dbg_log(\"22E read: read-buffer status / irq 8bit ack.\", LOG_SB16);\n    if(this.irq_triggered[SB_IRQ_8BIT])\n    {\n        this.lower_irq(SB_IRQ_8BIT);\n    }\n    var ready = this.read_buffer.length && !this.dsp_highspeed;\n    return (ready << 7) | 0x7F;\n};\n\n// DSP 16-bit interrupt acknowledgement.\nSB16.prototype.port2xF_read = function()\n{\n    dbg_log(\"22F read: irq 16bit ack\", LOG_SB16);\n    this.lower_irq(SB_IRQ_16BIT);\n    return 0;\n};\n\n\n// FM Address Port - primary register.\nSB16.prototype.port2x0_write = function(value)\n{\n    dbg_log(\"220 write: (unimplemented) fm register 0 address = \" + h(value), LOG_SB16);\n    this.fm_current_address0 = 0;\n};\n\n// FM Data Port - primary register.\nSB16.prototype.port2x1_write = function(value)\n{\n    dbg_log(\"221 write: (unimplemented) fm register 0 data = \" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address0];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 0, this.fm_current_address0);\n};\n\n// FM Address Port - secondary register.\nSB16.prototype.port2x2_write = function(value)\n{\n    dbg_log(\"222 write: (unimplemented) fm register 1 address = \" + h(value), LOG_SB16);\n    this.fm_current_address1 = 0;\n};\n\n// FM Data Port - secondary register.\nSB16.prototype.port2x3_write = function(value)\n{\n    dbg_log(\"223 write: (unimplemented) fm register 1 data =\" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address1];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 1, this.fm_current_address1);\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_write = function(value)\n{\n    dbg_log(\"224 write: mixer address = \" + h(value), LOG_SB16);\n    this.mixer_current_address = value;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_write = function(value)\n{\n    dbg_log(\"225 write: mixer data = \" + h(value), LOG_SB16);\n    this.mixer_write(this.mixer_current_address, value);\n};\n\n// Reset.\n// Used to reset the DSP to its default state and to exit highspeed mode.\nSB16.prototype.port2x6_write = function(yesplease)\n{\n    dbg_log(\"226 write: reset = \" + h(yesplease), LOG_SB16);\n\n    if(this.dsp_highspeed)\n    {\n        dbg_log(\" -> exit highspeed\", LOG_SB16);\n        this.dsp_highspeed = false;\n    }\n    else if(yesplease)\n    {\n        dbg_log(\" -> reset\", LOG_SB16);\n        this.dsp_reset();\n    }\n\n    // Signal completion.\n    this.read_buffer.clear();\n    this.read_buffer.push(0xAA);\n};\n\nSB16.prototype.port2x7_write = function(value)\n{\n    dbg_log(\"227 write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2x8_write = function(value)\n{\n    dbg_log(\"228 write: fm music register port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2x9_write = function(value)\n{\n    dbg_log(\"229 write: fm music data port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2xA_write = function(value)\n{\n    dbg_log(\"22A write: dsp read data port (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xB_write = function(value)\n{\n    dbg_log(\"22B write: undocumented\", LOG_SB16);\n};\n\n// Write Command/Data.\n// Used to send commands or data to the DSP.\nSB16.prototype.port2xC_write = function(value)\n{\n    dbg_log(\"22C write: write command/data\", LOG_SB16);\n\n    if(this.command === DSP_NO_COMMAND)\n    {\n        // New command.\n        dbg_log(\"22C write: command = \" + h(value), LOG_SB16);\n        this.command = value;\n        this.write_buffer.clear();\n        this.command_size = DSP_COMMAND_SIZES[value];\n    }\n    else\n    {\n        // More data for current command.\n        dbg_log(\"22C write: data: \" + h(value), LOG_SB16);\n        this.write_buffer.push(value);\n    }\n\n    // Perform command when we have all the needed data.\n    if(this.write_buffer.length >= this.command_size)\n    {\n        this.command_do();\n    }\n};\n\nSB16.prototype.port2xD_write = function(value)\n{\n    dbg_log(\"22D write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2xE_write = function(value)\n{\n    dbg_log(\"22E write: dsp read buffer status (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xF_write = function(value)\n{\n    dbg_log(\"22F write: undocumented\", LOG_SB16);\n};\n\n\n// MPU UART Mode - Data Port\nSB16.prototype.port3x0_read = function()\n{\n    dbg_log(\"330 read: mpu data\", LOG_SB16);\n\n    if(this.mpu_read_buffer.length)\n    {\n        this.mpu_read_buffer_lastvalue = this.mpu_read_buffer.shift();\n    }\n    dbg_log(\" <- \" + h(this.mpu_read_buffer_lastvalue), LOG_SB16);\n\n    return this.mpu_read_buffer_lastvalue;\n};\nSB16.prototype.port3x0_write = function(value)\n{\n    dbg_log(\"330 write: mpu data (unimplemented) : \" + h(value), LOG_SB16);\n};\n\n// MPU UART Mode - Status Port\nSB16.prototype.port3x1_read = function()\n{\n    dbg_log(\"331 read: mpu status\", LOG_SB16);\n\n    var status = 0;\n    status |= 0x40 * 0; // Output Ready\n    status |= 0x80 * !this.mpu_read_buffer.length; // Input Ready\n\n    return status;\n};\n\n// MPU UART Mode - Command Port\nSB16.prototype.port3x1_write = function(value)\n{\n    dbg_log(\"331 write: mpu command: \" + h(value), LOG_SB16);\n    if(value == 0xFF)\n    {\n        // Command acknowledge.\n        this.mpu_read_buffer.clear();\n        this.mpu_read_buffer.push(0xFE);\n    }\n};\n\n//\n// DSP command handlers\n//\n\nSB16.prototype.command_do = function()\n{\n    var handler = DSP_COMMAND_HANDLERS[this.command];\n    if(!handler)\n    {\n        handler = this.dsp_default_handler;\n    }\n    handler.call(this);\n\n    // Reset Inputs.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n    this.write_buffer.clear();\n};\n\nSB16.prototype.dsp_default_handler = function()\n{\n    dbg_log(\"Unhandled command: \" + h(this.command), LOG_SB16);\n};\n\n/**\n * @param {Array} commands\n * @param {number} size\n * @param {function()=} handler\n */\nfunction register_dsp_command(commands, size, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.dsp_default_handler;\n    }\n    for(var i = 0; i < commands.length; i++)\n    {\n        DSP_COMMAND_SIZES[commands[i]] = size;\n        DSP_COMMAND_HANDLERS[commands[i]] = handler;\n    }\n}\n\nfunction any_first_digit(base)\n{\n    var commands = [];\n    for(var i = 0; i < 16; i++)\n    {\n        commands.push(base + i);\n    }\n    return commands;\n}\n\n// ASP set register\nregister_dsp_command([0x0E], 2, function()\n{\n    this.asp_registers[this.write_buffer.shift()] = this.write_buffer.shift();\n});\n\n// ASP get register\nregister_dsp_command([0x0F], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.asp_registers[this.write_buffer.shift()]);\n});\n\n// 8-bit direct mode single byte digitized sound output.\nregister_dsp_command([0x10], 1, function()\n{\n    var value = audio_normalize(this.write_buffer.shift(), 127.5, -1);\n\n    this.dac_buffers[0].push(value);\n    this.dac_buffers[1].push(value);\n    this.bus.send(\"dac-enable\");\n});\n\n// 8-bit single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x14, 0x15], 2, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = false;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x16], 2);\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output\n// with reference byte.\nregister_dsp_command([0x17], 2);\n\n// 8-bit auto-init DMA mode digitized sound output.\nregister_dsp_command([0x1C], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x1F], 0);\n\n// 8-bit direct mode single byte digitized sound input.\nregister_dsp_command([0x20], 0, function()\n{\n    // Fake silent input.\n    this.read_buffer.clear();\n    this.read_buffer.push(0x7f);\n});\n\n// 8-bit single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x24], 2);\n\n// 8-bit auto-init DMA mode digitized sound input.\nregister_dsp_command([0x2C], 0);\n\n// Polling mode MIDI input.\nregister_dsp_command([0x30], 0);\n\n// Interrupt mode MIDI input.\nregister_dsp_command([0x31], 0);\n\n// UART polling mode MIDI I/O.\nregister_dsp_command([0x34], 0);\n\n// UART interrupt mode MIDI I/O.\nregister_dsp_command([0x35], 0);\n\n// UART polling mode MIDI I/O with time stamping.\nregister_dsp_command([0x36], 0);\n\n// UART interrupt mode MIDI I/O with time stamping.\nregister_dsp_command([0x37], 0);\n\n// MIDI output.\nregister_dsp_command([0x38], 0);\n\n// Set digitized sound transfer Time Constant.\nregister_dsp_command([0x40], 1, function()\n{\n    // Note: bTimeConstant = 256 * time constant\n    this.sampling_rate_change(\n        1000000\n        / (256 - this.write_buffer.shift())\n        / this.get_channel_count()\n    );\n});\n\n// Set digitized sound output sampling rate.\n// Set digitized sound input sampling rate.\nregister_dsp_command([0x41, 0x42], 2, function()\n{\n    this.sampling_rate_change((this.write_buffer.shift() << 8) | this.write_buffer.shift());\n});\n\n// Set DSP block transfer size.\nregister_dsp_command([0x48], 2, function()\n{\n    // TODO: should be in bytes, but if this is only used\n    // for 8 bit transfers, then this number is the same\n    // as number of samples?\n    // Wrong: e.g. stereo requires two bytes per sample.\n    this.dma_transfer_size_set();\n});\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x74], 2);\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x75], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x76], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x77], 2);\n\n// Creative 8-bit to 4-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7D], 0);\n\n// Creative 8-bit to 3-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7F], 0);\n\n// Pause DAC for a duration.\nregister_dsp_command([0x80], 2);\n\n// 8-bit high-speed auto-init DMA mode digitized sound output.\nregister_dsp_command([0x90], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_highspeed = true;\n    this.dsp_16bit = false;\n    this.dma_transfer_start();\n});\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x91], 0);\n\n// 8-bit high-speed auto-init DMA mode digitized sound input.\nregister_dsp_command([0x98], 0);\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x99], 0);\n\n// Set input mode to mono.\nregister_dsp_command([0xA0], 0);\n\n// Set input mode to stereo.\nregister_dsp_command([0xA8], 0);\n\n// Program 16-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xB0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_16BIT;\n    this.dma_channel = this.dma_channel_16bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = true;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Program 8-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xC0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Pause 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD0], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"dac-disable\");\n});\n\n// Turn on speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD1], 0, function()\n{\n    this.dummy_speaker_enabled = true;\n});\n\n// Turn off speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD3], 0, function()\n{\n    this.dummy_speaker_enabled = false;\n});\n\n// Continue 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD4], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n});\n\n// Pause 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD5], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"dac-disable\");\n});\n\n// Continue 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD6], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n});\n\n// Get speaker status.\nregister_dsp_command([0xD8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.dummy_speaker_enabled * 0xFF);\n});\n\n// Exit 16-bit auto-init DMA mode digitized sound I/O.\n// Exit 8-bit auto-init mode digitized sound I/O.\nregister_dsp_command([0xD9, 0xDA], 0, function()\n{\n    this.dma_autoinit = false;\n});\n\n// DSP identification\nregister_dsp_command([0xE0], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(~this.write_buffer.shift());\n});\n\n// Get DSP version number.\nregister_dsp_command([0xE1], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(4);\n    this.read_buffer.push(5);\n});\n\n// DMA identification.\nregister_dsp_command([0xE2], 1);\n\n// Get DSP copyright.\nregister_dsp_command([0xE3], 0, function()\n{\n    this.read_buffer.clear();\n    for(var i = 0; i < DSP_COPYRIGHT.length; i++)\n    {\n        this.read_buffer.push(DSP_COPYRIGHT.charCodeAt(i));\n    }\n    // Null terminator.\n    this.read_buffer.push(0);\n});\n\n// Write test register.\nregister_dsp_command([0xE4], 1, function()\n{\n    this.test_register = this.write_buffer.shift();\n});\n\n// Read test register.\nregister_dsp_command([0xE8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.test_register);\n});\n\n// Trigger IRQ\nregister_dsp_command([0xF2, 0xF3], 0, function()\n{\n    this.raise_irq();\n});\n\n// ASP - unknown function\nvar SB_F9 = new Uint8Array(256);\nSB_F9[0x0E] = 0xFF;\nSB_F9[0x0F] = 0x07;\nSB_F9[0x37] = 0x38;\nregister_dsp_command([0xF9], 1, function()\n{\n    var input = this.write_buffer.shift();\n    dbg_log(\"dsp 0xf9: unknown function. input: \" + input, LOG_SB16);\n\n    this.read_buffer.clear();\n    this.read_buffer.push(SB_F9[input]);\n});\n\n//\n// Mixer Handlers (CT1745)\n//\n\nSB16.prototype.mixer_read = function(address)\n{\n    var handler = MIXER_READ_HANDLERS[address];\n    var data;\n    if(handler)\n    {\n        data = handler.call(this);\n    }\n    else\n    {\n        data = this.mixer_registers[address];\n        dbg_log(\"unhandled mixer register read. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    }\n    return data;\n};\n\nSB16.prototype.mixer_write = function(address, data)\n{\n    var handler = MIXER_WRITE_HANDLERS[address];\n    if(handler)\n    {\n        handler.call(this, data);\n    }\n    else\n    {\n        dbg_log(\"unhandled mixer register write. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    }\n};\n\nSB16.prototype.mixer_default_read = function()\n{\n    dbg_log(\"mixer register read. addr:\" + h(this.mixer_current_address), LOG_SB16);\n    return this.mixer_registers[this.mixer_current_address];\n};\n\nSB16.prototype.mixer_default_write = function(data)\n{\n    dbg_log(\"mixer register write. addr:\" + h(this.mixer_current_address) + \" data:\" + h(data), LOG_SB16);\n    this.mixer_registers[this.mixer_current_address] = data;\n};\n\nSB16.prototype.mixer_reset = function()\n{\n    // Values intentionally in decimal.\n    // Default values available at\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n    this.mixer_registers[0x04] = 12 << 4 | 12;\n    this.mixer_registers[0x22] = 12 << 4 | 12;\n    this.mixer_registers[0x26] = 12 << 4 | 12;\n    this.mixer_registers[0x28] = 0;\n    this.mixer_registers[0x2E] = 0;\n    this.mixer_registers[0x0A] = 0;\n    this.mixer_registers[0x30] = 24 << 3;\n    this.mixer_registers[0x31] = 24 << 3;\n    this.mixer_registers[0x32] = 24 << 3;\n    this.mixer_registers[0x33] = 24 << 3;\n    this.mixer_registers[0x34] = 24 << 3;\n    this.mixer_registers[0x35] = 24 << 3;\n    this.mixer_registers[0x36] = 0;\n    this.mixer_registers[0x37] = 0;\n    this.mixer_registers[0x38] = 0;\n    this.mixer_registers[0x39] = 0;\n    this.mixer_registers[0x3B] = 0;\n    this.mixer_registers[0x3C] = 0x1F;\n    this.mixer_registers[0x3D] = 0x15;\n    this.mixer_registers[0x3E] = 0x0B;\n    this.mixer_registers[0x3F] = 0;\n    this.mixer_registers[0x40] = 0;\n    this.mixer_registers[0x41] = 0;\n    this.mixer_registers[0x42] = 0;\n    this.mixer_registers[0x43] = 0;\n    this.mixer_registers[0x44] = 8 << 4;\n    this.mixer_registers[0x45] = 8 << 4;\n    this.mixer_registers[0x46] = 8 << 4;\n    this.mixer_registers[0x47] = 8 << 4;\n\n    this.mixer_full_update();\n};\n\nSB16.prototype.mixer_full_update = function()\n{\n    // Start at 1. Don't re-reset.\n    for(var i = 1; i < this.mixer_registers.length; i++)\n    {\n        if(MIXER_REGISTER_IS_LEGACY[i])\n        {\n            // Legacy registers are actually mapped to other register locations. Update\n            // using the new registers rather than the legacy registers.\n            continue;\n        }\n        this.mixer_write(i, this.mixer_registers[i]);\n    }\n};\n\n/**\n * @param{number} address\n * @param{function():number=} handler\n */\nfunction register_mixer_read(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_read;\n    }\n    MIXER_READ_HANDLERS[address] = handler;\n}\n\n/**\n * @param{number} address\n * @param{function(number)=} handler\n */\nfunction register_mixer_write(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_write;\n    }\n    MIXER_WRITE_HANDLERS[address] = handler;\n}\n\n// Legacy registers map each nibble to the last 4 bits of the new registers\nfunction register_mixer_legacy(address_old, address_new_left, address_new_right)\n{\n    MIXER_REGISTER_IS_LEGACY[address_old] = 1;\n\n    /** @this {SB16} */\n    MIXER_READ_HANDLERS[address_old] = function()\n    {\n        var left = this.mixer_registers[address_new_left] & 0xF0;\n        var right = this.mixer_registers[address_new_right] >>> 4;\n        return left | right;\n    };\n\n    /** @this {SB16} */\n    MIXER_WRITE_HANDLERS[address_old] = function(data)\n    {\n        this.mixer_registers[address_old] = data;\n        var prev_left = this.mixer_registers[address_new_left];\n        var prev_right = this.mixer_registers[address_new_right];\n        var left = (data & 0xF0) | (prev_left & 0x0F);\n        var right = (data << 4 & 0xF0) | (prev_right & 0x0F);\n\n        this.mixer_write(address_new_left, left);\n        this.mixer_write(address_new_right, right);\n    };\n}\n\n/**\n * @param {number} address\n * @param {number} mixer_source\n * @param {number} channel\n */\nfunction register_mixer_volume(address, mixer_source, channel)\n{\n    MIXER_READ_HANDLERS[address] = SB16.prototype.mixer_default_read;\n\n    /** @this {SB16} */\n    MIXER_WRITE_HANDLERS[address] = function(data)\n    {\n        this.mixer_registers[address] = data;\n        this.bus.send(\"mixer-volume\",\n        [\n            mixer_source,\n            channel,\n            (data >>> 2) - 62\n        ]);\n    };\n}\n\n// Reset.\nregister_mixer_read(0x00, function()\n{\n    this.mixer_reset();\n    return 0;\n});\nregister_mixer_write(0x00);\n\n// Legacy Voice Volume Left/Right.\nregister_mixer_legacy(0x04, 0x32, 0x33);\n\n// Legacy Mic Volume. TODO.\n//register_mixer_read(0x0A);\n//register_mixer_write(0x0A, function(data)\n//{\n//    this.mixer_registers[0x0A] = data;\n//    var prev = this.mixer_registers[0x3A];\n//    this.mixer_write(0x3A, data << 5 | (prev & 0x0F));\n//});\n\n// Legacy Master Volume Left/Right.\nregister_mixer_legacy(0x22, 0x30, 0x31);\n// Legacy Midi Volume Left/Right.\nregister_mixer_legacy(0x26, 0x34, 0x35);\n// Legacy CD Volume Left/Right.\nregister_mixer_legacy(0x28, 0x36, 0x37);\n// Legacy Line Volume Left/Right.\nregister_mixer_legacy(0x2E, 0x38, 0x39);\n\n// Master Volume Left.\nregister_mixer_volume(0x30, MIXER_SRC_MASTER, MIXER_CHANNEL_LEFT);\n// Master Volume Right.\nregister_mixer_volume(0x31, MIXER_SRC_MASTER, MIXER_CHANNEL_RIGHT);\n// Voice Volume Left.\nregister_mixer_volume(0x32, MIXER_SRC_DAC, MIXER_CHANNEL_LEFT);\n// Voice Volume Right.\nregister_mixer_volume(0x33, MIXER_SRC_DAC, MIXER_CHANNEL_RIGHT);\n// MIDI Volume Left. TODO.\n//register_mixer_volume(0x34, MIXER_SRC_SYNTH, MIXER_CHANNEL_LEFT);\n// MIDI Volume Right. TODO.\n//register_mixer_volume(0x35, MIXER_SRC_SYNTH, MIXER_CHANNEL_RIGHT);\n// CD Volume Left. TODO.\n//register_mixer_volume(0x36, MIXER_SRC_CD, MIXER_CHANNEL_LEFT);\n// CD Volume Right. TODO.\n//register_mixer_volume(0x37, MIXER_SRC_CD, MIXER_CHANNEL_RIGHT);\n// Line Volume Left. TODO.\n//register_mixer_volume(0x38, MIXER_SRC_LINE, MIXER_CHANNEL_LEFT);\n// Line Volume Right. TODO.\n//register_mixer_volume(0x39, MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT);\n// Mic Volume. TODO.\n//register_mixer_volume(0x3A, MIXER_SRC_MIC, MIXER_CHANNEL_BOTH);\n\n// PC Speaker Volume.\nregister_mixer_read(0x3B);\nregister_mixer_write(0x3B, function(data)\n{\n    this.mixer_registers[0x3B] = data;\n    this.bus.send(\"mixer-volume\", [MIXER_SRC_PCSPEAKER, MIXER_CHANNEL_BOTH, (data >>> 6) * 6 - 18]);\n});\n\n// Output Mixer Switches. TODO.\n//register_mixer_read(0x3C);\n//register_mixer_write(0x3C, function(data)\n//{\n//    this.mixer_registers[0x3C] = data;\n//\n//    if(data & 0x01) this.bus.send(\"mixer-connect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\n//\n//    if(data & 0x02) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\n//\n//    if(data & 0x04) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\n//\n//    if(data & 0x08) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\n//\n//    if(data & 0x10) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\n//});\n\n// Input Mixer Left Switches. TODO.\n//register_mixer_read(0x3D);\n//register_mixer_write(0x3D);\n\n// Input Mixer Right Switches. TODO.\n//register_mixer_read(0x3E);\n//register_mixer_write(0x3E);\n\n// Input Gain Left. TODO.\n//register_mixer_read(0x3F);\n//register_mixer_write(0x3F);\n\n// Input Gain Right. TODO.\n//register_mixer_read(0x40);\n//register_mixer_write(0x40);\n\n// Output Gain Left.\nregister_mixer_read(0x41);\nregister_mixer_write(0x41, function(data)\n{\n    this.mixer_registers[0x41] = data;\n    this.bus.send(\"mixer-gain-left\", (data >>> 6) * 6);\n});\n\n// Output Gain Right.\nregister_mixer_read(0x42);\nregister_mixer_write(0x42, function(data)\n{\n    this.mixer_registers[0x42] = data;\n    this.bus.send(\"mixer-gain-right\", (data >>> 6) * 6);\n});\n\n// Mic AGC. TODO.\n//register_mixer_read(0x43);\n//register_mixer_write(0x43);\n\n// Treble Left.\nregister_mixer_read(0x44);\nregister_mixer_write(0x44, function(data)\n{\n    this.mixer_registers[0x44] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-treble-left\", data - (data < 16 ? 14 : 16));\n});\n\n// Treble Right.\nregister_mixer_read(0x45);\nregister_mixer_write(0x45, function(data)\n{\n    this.mixer_registers[0x45] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-treble-right\", data - (data < 16 ? 14 : 16));\n});\n\n// Bass Left.\nregister_mixer_read(0x46);\nregister_mixer_write(0x46, function(data)\n{\n    this.mixer_registers[0x46] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\n});\n\n// Bass Right.\nregister_mixer_read(0x47);\nregister_mixer_write(0x47, function(data)\n{\n    this.mixer_registers[0x47] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\n});\n\n// IRQ Select.\nregister_mixer_read(0x80, function()\n{\n    switch(this.irq)\n    {\n        case SB_IRQ2: return 0x1;\n        case SB_IRQ5: return 0x2;\n        case SB_IRQ7: return 0x4;\n        case SB_IRQ10: return 0x8;\n        default: return 0x0;\n    }\n});\nregister_mixer_write(0x80, function(bits)\n{\n    if(bits & 0x1) this.irq = SB_IRQ2;\n    if(bits & 0x2) this.irq = SB_IRQ5;\n    if(bits & 0x4) this.irq = SB_IRQ7;\n    if(bits & 0x8) this.irq = SB_IRQ10;\n});\n\n// DMA Select.\nregister_mixer_read(0x81, function()\n{\n    var ret = 0;\n    switch(this.dma_channel_8bit)\n    {\n        case SB_DMA0: ret |= 0x1; break;\n        case SB_DMA1: ret |= 0x2; break;\n        // Channel 2 is hardwired to floppy disk.\n        case SB_DMA3: ret |= 0x8; break;\n    }\n    switch(this.dma_channel_16bit)\n    {\n        // Channel 4 cannot be used.\n        case SB_DMA5: ret |= 0x20; break;\n        case SB_DMA6: ret |= 0x40; break;\n        case SB_DMA7: ret |= 0x80; break;\n    }\n    return ret;\n});\nregister_mixer_write(0x81, function(bits)\n{\n    if(bits & 0x1) this.dma_channel_8bit = SB_DMA0;\n    if(bits & 0x2) this.dma_channel_8bit = SB_DMA1;\n    if(bits & 0x8) this.dma_channel_8bit = SB_DMA3;\n    if(bits & 0x20) this.dma_channel_16bit = SB_DMA5;\n    if(bits & 0x40) this.dma_channel_16bit = SB_DMA6;\n    if(bits & 0x80) this.dma_channel_16bit = SB_DMA7;\n});\n\n// IRQ Status.\nregister_mixer_read(0x82, function()\n{\n    var ret = 0x20;\n    for(var i = 0; i < 16; i++)\n    {\n        ret |= i * this.irq_triggered[i];\n    }\n    return ret;\n});\n\n//\n// FM Handlers\n//\n\nSB16.prototype.fm_default_write = function(data, register, address)\n{\n    dbg_log(\"unhandled fm register write. addr:\" + register + \"|\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    // No need to save into a dummy register as the registers are write-only.\n};\n\n/**\n * @param{Array} addresses\n * @param{function(number, number, number)=} handler\n */\nfunction register_fm_write(addresses, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.fm_default_write;\n    }\n    for(var i = 0; i < addresses.length; i++)\n    {\n        FM_HANDLERS[addresses[i]] = handler;\n    }\n}\n\nfunction between(start, end)\n{\n    var a = [];\n    for(var i = start; i <= end; i++)\n    {\n        a.push(i);\n    }\n    return a;\n}\n\n/** @const */ var SB_FM_OPERATORS_BY_OFFSET = new Uint8Array(32);\nSB_FM_OPERATORS_BY_OFFSET[0x00] = 0;\nSB_FM_OPERATORS_BY_OFFSET[0x01] = 1;\nSB_FM_OPERATORS_BY_OFFSET[0x02] = 2;\nSB_FM_OPERATORS_BY_OFFSET[0x03] = 3;\nSB_FM_OPERATORS_BY_OFFSET[0x04] = 4;\nSB_FM_OPERATORS_BY_OFFSET[0x05] = 5;\nSB_FM_OPERATORS_BY_OFFSET[0x08] = 6;\nSB_FM_OPERATORS_BY_OFFSET[0x09] = 7;\nSB_FM_OPERATORS_BY_OFFSET[0x0A] = 8;\nSB_FM_OPERATORS_BY_OFFSET[0x0B] = 9;\nSB_FM_OPERATORS_BY_OFFSET[0x0C] = 10;\nSB_FM_OPERATORS_BY_OFFSET[0x0D] = 11;\nSB_FM_OPERATORS_BY_OFFSET[0x10] = 12;\nSB_FM_OPERATORS_BY_OFFSET[0x11] = 13;\nSB_FM_OPERATORS_BY_OFFSET[0x12] = 14;\nSB_FM_OPERATORS_BY_OFFSET[0x13] = 15;\nSB_FM_OPERATORS_BY_OFFSET[0x14] = 16;\nSB_FM_OPERATORS_BY_OFFSET[0x15] = 17;\n\nfunction get_fm_operator(register, offset)\n{\n    return register * 18 + SB_FM_OPERATORS_BY_OFFSET[offset];\n}\n\nregister_fm_write([0x01], function(bits, register, address)\n{\n    this.fm_waveform_select_enable[register] = bits & 0x20 > 0;\n    this.fm_update_waveforms();\n});\n\n// Timer 1 Count.\nregister_fm_write([0x02]);\n\n// Timer 2 Count.\nregister_fm_write([0x03]);\n\nregister_fm_write([0x04], function(bits, register, address)\n{\n    switch(register)\n    {\n        case 0:\n            // if(bits & 0x80)\n            // {\n            //     // IQR Reset\n            // }\n            // else\n            // {\n            //     // Timer masks and on/off\n            // }\n            break;\n        case 1:\n            // Four-operator enable\n            break;\n    }\n});\n\nregister_fm_write([0x05], function(bits, register, address)\n{\n    if(register === 0)\n    {\n        // No registers documented here.\n        this.fm_default_write(bits, register, address);\n        return;\n    }\n    // OPL3 Mode Enable\n});\n\nregister_fm_write([0x08], function(bits, register, address)\n{\n    // Composite sine wave on/off\n    // Note select (keyboard split selection method)\n});\n\nregister_fm_write(between(0x20, 0x35), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x20);\n    // Tremolo\n    // Vibrato\n    // Sustain\n    // KSR Envelope Scaling\n    // Frequency Multiplication Factor\n});\n\nregister_fm_write(between(0x40, 0x55), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x40);\n    // Key Scale Level\n    // Output Level\n});\n\nregister_fm_write(between(0x60, 0x75), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x60);\n    // Attack Rate\n    // Decay Rate\n});\n\nregister_fm_write(between(0x80, 0x95), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x80);\n    // Sustain Level\n    // Release Rate\n});\n\nregister_fm_write(between(0xA0, 0xA8), function(bits, register, address)\n{\n    var channel = address - 0xA0;\n    // Frequency Number (Lower 8 bits)\n});\n\nregister_fm_write(between(0xB0, 0xB8), function(bits, register, address)\n{\n    // Key-On\n    // Block Number\n    // Frequency Number (Higher 2 bits)\n});\n\nregister_fm_write([0xBD], function(bits, register, address)\n{\n    // Tremelo Depth\n    // Vibrato Depth\n    // Percussion Mode\n    // Bass Drum Key-On\n    // Snare Drum Key-On\n    // Tom-Tom Key-On\n    // Cymbal Key-On\n    // Hi-Hat Key-On\n});\n\nregister_fm_write(between(0xC0, 0xC8), function(bits, register, address)\n{\n    // Right Speaker Enable\n    // Left Speaker Enable\n    // Feedback Modulation Factor\n    // Synthesis Type\n});\n\nregister_fm_write(between(0xE0, 0xF5), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0xE0);\n    // Waveform Select\n});\n\n//\n// FM behaviours\n//\n\nSB16.prototype.fm_update_waveforms = function()\n{\n    // To be implemented.\n};\n\n//\n// General behaviours\n//\n\nSB16.prototype.sampling_rate_change = function(rate)\n{\n    this.sampling_rate = rate;\n    this.bus.send(\"dac-tell-sampling-rate\", rate);\n};\n\nSB16.prototype.get_channel_count = function()\n{\n    return this.dsp_stereo ? 2 : 1;\n};\n\nSB16.prototype.dma_transfer_size_set = function()\n{\n    this.dma_sample_count = 1 + (this.write_buffer.shift() << 0) + (this.write_buffer.shift() << 8);\n};\n\nSB16.prototype.dma_transfer_start = function()\n{\n    dbg_log(\"begin dma transfer\", LOG_SB16);\n\n    // (1) Setup appropriate settings.\n\n    this.bytes_per_sample = 1;\n    if(this.dsp_16bit) this.bytes_per_sample *= 2;\n\n    // Don't count stereo interleaved bits apparently.\n    // Disabling this line is needed for sounds to work correctly,\n    // especially double buffering autoinit mode.\n    // Learnt the hard way.\n    // if(this.dsp_stereo) this.bytes_per_sample *= 2;\n\n    this.dma_bytes_count = this.dma_sample_count * this.bytes_per_sample;\n    this.dma_bytes_block = SB_DMA_BLOCK_SAMPLES * this.bytes_per_sample;\n\n    // Ensure block size is small enough but not too small, and is divisible by 4\n    var max_bytes_block = Math.max(this.dma_bytes_count >> 2 & ~0x3, 32);\n    this.dma_bytes_block = Math.min(max_bytes_block, this.dma_bytes_block);\n\n    // (2) Wait until channel is unmasked (if not already)\n    this.dma_waiting_transfer = true;\n    if(!this.dma.channel_mask[this.dma_channel])\n    {\n        this.dma_on_unmask(this.dma_channel);\n    }\n};\n\nSB16.prototype.dma_on_unmask = function(channel)\n{\n    if(channel !== this.dma_channel || !this.dma_waiting_transfer)\n    {\n        return;\n    }\n\n    // (3) Configure amount of bytes left to transfer and tell speaker adapter\n    // to start requesting transfers\n    this.dma_waiting_transfer = false;\n    this.dma_bytes_left = this.dma_bytes_count;\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n};\n\nSB16.prototype.dma_transfer_next = function()\n{\n    dbg_log(\"dma transfering next block\", LOG_SB16);\n\n    var size = Math.min(this.dma_bytes_left, this.dma_bytes_block);\n    var samples = Math.floor(size / this.bytes_per_sample);\n\n    this.dma.do_write(this.dma_syncbuffer, 0, size, this.dma_channel, (error) =>\n    {\n        dbg_log(\"dma block transfer \" + (error ? \"unsuccessful\" : \"successful\"), LOG_SB16);\n        if(error) return;\n\n        this.dma_to_dac(samples);\n        this.dma_bytes_left -= size;\n\n        if(!this.dma_bytes_left)\n        {\n            // Completed requested transfer of given size.\n            this.raise_irq(this.dma_irq);\n\n            if(this.dma_autoinit)\n            {\n                // Restart the transfer.\n                this.dma_bytes_left = this.dma_bytes_count;\n            }\n        }\n    });\n};\n\nSB16.prototype.dma_to_dac = function(sample_count)\n{\n    var amplitude = this.dsp_16bit ? 32767.5 : 127.5;\n    var offset = this.dsp_signed ? 0 : -1;\n    var repeats = this.dsp_stereo ? 1 : 2;\n\n    var buffer;\n    if(this.dsp_16bit)\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int16 : this.dma_buffer_uint16;\n    }\n    else\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int8 : this.dma_buffer_uint8;\n    }\n\n    var channel = 0;\n    for(var i = 0; i < sample_count; i++)\n    {\n        var sample = audio_normalize(buffer[i], amplitude, offset);\n        for(var j = 0; j < repeats; j++)\n        {\n            this.dac_buffers[channel].push(sample);\n            channel ^= 1;\n        }\n    }\n\n    this.dac_send();\n};\n\nSB16.prototype.dac_handle_request = function()\n{\n    if(!this.dma_bytes_left || this.dma_paused)\n    {\n        // No more data to transfer or is paused. Send whatever is in the buffers.\n        this.dac_send();\n    }\n    else\n    {\n        this.dma_transfer_next();\n    }\n};\n\nSB16.prototype.dac_send = function()\n{\n    if(!this.dac_buffers[0].length)\n    {\n        return;\n    }\n\n    var out0 = this.dac_buffers[0].shift_block(this.dac_buffers[0].length);\n    var out1 = this.dac_buffers[1].shift_block(this.dac_buffers[1].length);\n    this.bus.send(\"dac-send-data\", [out0, out1], [out0.buffer, out1.buffer]);\n};\n\nSB16.prototype.raise_irq = function(type)\n{\n    dbg_log(\"raise irq\", LOG_SB16);\n    this.irq_triggered[type] = 1;\n    this.cpu.device_raise_irq(this.irq);\n};\n\nSB16.prototype.lower_irq = function(type)\n{\n    dbg_log(\"lower irq\", LOG_SB16);\n    this.irq_triggered[type] = 0;\n    this.cpu.device_lower_irq(this.irq);\n};\n\n//\n// Helpers\n//\n\nfunction audio_normalize(value, amplitude, offset)\n{\n    return audio_clip(value / amplitude + offset, -1, 1);\n}\n\nfunction audio_clip(value, low, high)\n{\n    return (value < low) * low + (value > high) * high + (low <= value && value <= high) * value;\n}\n","\"use strict\";\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {FS} filesystem\n */\nfunction VirtIO(cpu, bus, filesystem)\n{\n    // http://ozlabs.org/~rusty/virtio-spec/virtio-0.9.5.pdf\n\n    this.pci_space = [\n        0xf4, 0x1a, 0x09, 0x10, 0x07, 0x05, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x01, 0xa8, 0x00, 0x00, 0x00, 0x10, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x09, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x06 << 3;\n    this.pci_bars = [\n        {\n            size: 256,\n        },\n    ];\n    this.name = \"virtio\";\n\n    var io = cpu.io;\n\n    io.register_read(0xA800, this,\n        function() {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        },\n        undefined,\n        function()\n        {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        }\n    );\n\n    io.register_write(0xA804, this, undefined, undefined, function(data)\n    {\n        // write guest features\n        dbg_log(\"Guest feature selection: \" + h(data, 8), LOG_VIRTIO);\n    });\n\n    io.register_write(0xA80E, this, undefined, function(data)\n    {\n        // rw queue select\n        dbg_log(\"Queue select: \" + h(data, 4), LOG_VIRTIO);\n        this.queue_select = data;\n    }, undefined);\n\n    io.register_read(0xA80C, this, undefined, function()\n    {\n        // read queue size\n        dbg_log(\"Read queue size\", LOG_VIRTIO);\n        return this.queue_size;\n    }, undefined);\n\n    io.register_read(0xA808, this, undefined, undefined, function()\n    {\n        // rw queue address\n        dbg_log(\"Read queue address\", LOG_VIRTIO);\n\n        if(this.queue_select === 0)\n        {\n            return this.queue_address;\n        }\n        else\n        {\n            // queue does not exist\n            return 0;\n        }\n    });\n\n    io.register_write(0xA808, this, undefined, undefined, function(data)\n    {\n        // rw queue address\n        dbg_log(\"Write queue address: \" + h(data, 8), LOG_VIRTIO);\n        this.queue_address = data;\n    });\n\n    io.register_write(0xA812, this, function(data)\n    {\n        dbg_log(\"Write device status: \" + h(data, 2), LOG_VIRTIO);\n\n        if(data === 0)\n        {\n            dbg_log(\"Reset\", LOG_VIRTIO);\n            this.reset();\n        }\n        else if(data & 0x80)\n        {\n            dbg_log(\"Warning: Device status failed\", LOG_VIRTIO);\n        }\n        else\n        {\n            dbg_log(((data & 1) ? \"ACKNOWLEDGE \" : \"\") +\n                    ((data & 2) ? \"DRIVER \" : \"\") +\n                    ((data & 4) ? \"DRIVER_OK\" : \"\"),\n                    LOG_VIRTIO);\n\n        }\n\n        this.device_status = data;\n    });\n\n    io.register_read(0xA812, this, function()\n    {\n        dbg_log(\"Read device status: \" + h(this.device_status), LOG_VIRTIO);\n        return this.device_status;\n    });\n\n    io.register_read(0xA813, this, function()\n    {\n        dbg_log(\"Read isr\", LOG_VIRTIO);\n\n        // reading resets the isr\n        var isr = this.isr;\n        this.isr = 0;\n        this.pci.lower_irq(this.pci_id);\n        return isr;\n    });\n\n    io.register_write(0xA810, this, undefined, function(data)\n    {\n        dbg_log(\"Write queue notify: \" + h(data, 4), LOG_VIRTIO);\n\n        // only queue 0 supported\n        dbg_assert(data === 0);\n\n        var queue_start = this.queue_address << 12;\n        var ring_start = queue_start + 16 * this.queue_size;\n        var ring_desc_start = ring_start + 4;\n\n        var //flags = this.cpu.read16(ring_start),\n            // index of the next free ring\n            idx = this.cpu.read16(ring_start + 2);\n\n        dbg_log(\"idx=\" + h(idx, 4), LOG_VIRTIO);\n        //dbg_assert(idx < this.queue_size);\n\n        var mask = this.queue_size - 1;\n        idx &= mask;\n\n        while(this.last_idx !== idx)\n        {\n            var desc_idx = this.cpu.read16(ring_desc_start + this.last_idx * 2);\n            this.handle_descriptor(desc_idx);\n\n            this.last_idx = this.last_idx + 1 & mask;\n        }\n    });\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    // these should be stored per queue if there is more than one queue\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n\n    for(var i = 0; i < 128; i++)\n    {\n        io.register_read(0xA814 + i, this, function(port)\n        {\n            dbg_log(\"Read device \" + h(port), LOG_VIRTIO);\n\n            if(port < this.device.configspace.length)\n            {\n                return this.device.configspace[port];\n            }\n            else\n            {\n                return 0;\n            }\n        }.bind(this, i), undefined, undefined);\n\n        io.register_write(0xA814 + i, this, function(port, data)\n        {\n            dbg_log(\"Write device \" + h(port) + \": \" + h(data, 2), LOG_VIRTIO);\n        }.bind(this, i), undefined, undefined);\n    }\n\n    // should be generalized to support more devices than just the filesystem\n    this.device = new Virtio9p(filesystem, bus);\n    this.device.SendReply = this.device_reply.bind(this);\n\n    cpu.devices.pci.register_device(this);\n}\n\nVirtIO.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = 0; // unused\n    state[1] = this.queue_select;\n    state[2] = this.device_status;\n    state[3] = this.isr;\n    state[4] = this.last_idx;\n    state[5] = this.queue_size;\n    state[6] = this.queue_address;\n    state[7] = this.device;\n\n    return state;\n};\n\nVirtIO.prototype.set_state = function(state)\n{\n    this.queue_select = state[1];\n    this.device_status = state[2];\n    this.isr = state[3];\n    this.last_idx = state[4];\n    this.queue_size = state[5];\n    this.queue_address = state[6];\n\n    this.device = state[7];\n    this.device.SendReply = this.device_reply.bind(this);\n};\n\nVirtIO.prototype.reset = function()\n{\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n};\n\nVirtIO.prototype.handle_descriptor = function(idx)\n{\n    var next = idx;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if(flags & VRING_DESC_F_WRITE)\n        {\n            break;\n        }\n\n        if(flags & VRING_DESC_F_INDIRECT) {\n            dbg_assert(false, \"unsupported\");\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            next = -1;\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    var infos = {\n        start: idx,\n        next: next,\n    };\n\n    this.device.ReceiveRequest(infos, function()\n    {\n        // return one byte\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Read more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        return this.cpu.read8(addr_low + pointer++);\n    }.bind(this));\n};\n\nVirtIO.prototype.device_reply = function(queueidx, infos)\n{\n    if(infos.next === -1)\n    {\n        dbg_log(\"Reply to invalid index\", LOG_VIRTIO);\n        return;\n    }\n\n    var mask = this.queue_size - 1;\n    var result_length = this.device.replybuffersize;\n\n    var next = infos.next;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if((flags & VRING_DESC_F_WRITE) === 0)\n        {\n            dbg_log(\"Bug: Readonly ring after writeonly ring\", LOG_VIRTIO);\n            break;\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    for(var i = 0; i < result_length; i++)\n    {\n        var data = this.device.replybuffer[i];\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Write more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        this.cpu.write8(addr_low + pointer++, data);\n    }\n\n    var used_desc_start = (this.queue_address << 12) + 16 * this.queue_size + 4 + 2 * this.queue_size;\n    used_desc_start = used_desc_start + 4095 & ~4095;\n\n    var flags = this.cpu.read16(used_desc_start);\n    var used_idx = this.cpu.read16(used_desc_start + 2);\n    this.cpu.write16(used_desc_start + 2, used_idx + 1);\n\n    dbg_log(\"used descriptor: addr=\" + h(used_desc_start, 8) + \" flags=\" + h(flags, 4) + \" idx=\" + h(used_idx, 4), LOG_VIRTIO);\n\n    used_idx &= mask;\n    var used_desc_offset = used_desc_start + 4 + used_idx * 8;\n    this.cpu.write32(used_desc_offset, infos.start);\n    this.cpu.write32(used_desc_offset + 4, result_length);\n\n    this.isr |= 1;\n    this.pci.raise_irq(this.pci_id);\n};\n","\"use strict\";\n\nvar Bus = {};\n\n/** @constructor */\nfunction BusConnector()\n{\n    this.listeners = {};\n    this.pair = undefined;\n}\n\n/**\n * @param {string} name\n * @param {function(?)} fn\n * @param {Object} this_value\n */\nBusConnector.prototype.register = function(name, fn, this_value)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        listeners = this.listeners[name] = [];\n    }\n\n    listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\n/**\n * Unregister one message with the given name and callback\n *\n * @param {string} name\n * @param {function()} fn\n */\nBusConnector.prototype.unregister = function(name, fn)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    this.listeners[name] = listeners.filter(function(l)\n    {\n        return l.fn !== fn;\n    });\n};\n\n/**\n * Send (\"emit\") a message\n *\n * @param {string} name\n * @param {*=} value\n * @param {*=} unused_transfer\n */\nBusConnector.prototype.send = function(name, value, unused_transfer)\n{\n    if(!this.pair)\n    {\n        return;\n    }\n\n    var listeners = this.pair.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    for(var i = 0; i < listeners.length; i++)\n    {\n        var listener = listeners[i];\n        listener.fn.call(listener.this_value, value);\n    }\n};\n\n/**\n * Send a message, guaranteeing that it is received asynchronously\n *\n * @param {string} name\n * @param {Object=} value\n */\nBusConnector.prototype.send_async = function(name, value)\n{\n    dbg_assert(arguments.length === 1 || arguments.length === 2);\n\n    setTimeout(this.send.bind(this, name, value), 0);\n};\n\nBus.create = function()\n{\n    var c0 = new BusConnector();\n    var c1 = new BusConnector();\n\n    c0.pair = c1;\n    c1.pair = c0;\n\n    return [c0, c1];\n};\n\n","\"use strict\";\n\nvar log_data = [];\n\nfunction do_the_log(message)\n{\n    if(LOG_TO_FILE)\n    {\n        log_data.push(message, \"\\n\");\n    }\n    else\n    {\n        console.log(message);\n    }\n}\n\n/**\n * @type {function((string|number), number=)}\n * @const\n */\nvar dbg_log = (function()\n{\n    if(!DEBUG)\n    {\n        return function() {};\n    }\n\n    /** @const @type {Object.<number, string>} */\n    var dbg_names = LOG_NAMES.reduce(function(a, x)\n    {\n        a[x[0]] = x[1];\n        return a;\n    }, {});\n\n    var log_last_message = \"\";\n    var log_message_repetitions = 0;\n\n    /**\n     * @param {number=} level\n     */\n    function dbg_log_(stuff, level)\n    {\n        if(!DEBUG) return;\n\n        level = level || 1;\n\n        if(level & LOG_LEVEL)\n        {\n            var level_name = dbg_names[level] || \"\",\n                message = \"[\" + v86util.pads(level_name, 4) + \"] \" + stuff;\n\n            if(message === log_last_message)\n            {\n                log_message_repetitions++;\n\n                if(log_message_repetitions < 2048)\n                {\n                    return;\n                }\n            }\n\n            var now = new Date();\n            var time_str = v86util.pad0(now.getHours(), 2) + \":\" +\n                           v86util.pad0(now.getMinutes(), 2) + \":\" +\n                           v86util.pad0(now.getSeconds(), 2) + \"+\" +\n                           v86util.pad0(now.getMilliseconds(), 3) + \" \";\n\n            if(log_message_repetitions)\n            {\n                if(log_message_repetitions === 1)\n                {\n                    do_the_log(time_str + log_last_message);\n                }\n                else\n                {\n                    do_the_log(\"Previous message repeated \" + log_message_repetitions + \" times\");\n                }\n\n                log_message_repetitions = 0;\n            }\n\n            do_the_log(time_str + message);\n            log_last_message = message;\n        }\n    }\n\n    return dbg_log_;\n})();\n\n/**\n * @param {number=} level\n */\nfunction dbg_trace(level)\n{\n    if(!DEBUG) return;\n\n    dbg_log(Error().stack.replace(/(?:(?:t|t16|t32)\\.\\(anonymous function\\)\\.)+/g, \"t.(anonymous function).\"), level);\n}\n\n/**\n * console.assert is fucking slow\n * @param {string=} msg\n * @param {number=} level\n */\nfunction dbg_assert(cond, msg, level)\n{\n    if(!DEBUG) return;\n\n    if(!cond)\n    {\n        dbg_assert_failed(msg);\n    }\n};\n\n\nfunction dbg_assert_failed(msg)\n{\n    debugger;\n    console.trace();\n\n    if(msg)\n    {\n        throw \"Assert failed: \" + msg;\n    }\n    else\n    {\n        throw \"Assert failed\";\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar CPU_LOG_VERBOSE = false;\n\n\n// Resources:\n// https://pdos.csail.mit.edu/6.828/2006/readings/i386/toc.htm\n// https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\n// http://ref.x86asm.net/geek32.html\n\n\n// exception bits in the MXCSR Register\nvar\n    /** @const */\n    CPU_EX_P = 1 << 5,\n    /** @const */\n    CPU_EX_U = 1 << 4,\n    /** @const */\n    CPU_EX_O = 1 << 3,\n    /** @const */\n    CPU_EX_Z = 1 << 2,\n    /** @const */\n    CPU_EX_D = 1 << 1,\n    /** @const */\n    CPU_EX_I = 1 << 0;\n\n/** @constructor */\nfunction CPU(bus)\n{\n    /** @type {number} */\n    this.memory_size = 0;\n\n    // Note: Currently unused (degrades performance and not required by any OS\n    //       that we support)\n    this.a20_enabled = true;\n\n    this.mem_page_infos = undefined;\n\n    this.mem8 = new Uint8Array(0);\n    this.mem16 = new Uint16Array(this.mem8.buffer);\n    this.mem32s = new Int32Array(this.mem8.buffer);\n\n    this.segment_is_null = new Uint8Array(8);\n    this.segment_limits = new Uint32Array(8);\n    //this.segment_infos = new Uint32Array(8);\n    this.segment_offsets = new Int32Array(8);\n\n    /**\n     * Translation Lookaside Buffer\n     * @const\n     */\n    this.tlb_data = new Int32Array(1 << 20);\n\n    /**\n     * Information about which pages are cached in the tlb.\n     * By bit:\n     *   0 system, read\n     *   1 system, write\n     *   2 user, read\n     *   3 user, write\n     * @const\n     */\n    this.tlb_info = new Uint8Array(1 << 20);\n\n    /**\n     * Same as tlb_info, except it only contains global pages\n     * @const\n     */\n    this.tlb_info_global = new Uint8Array(1 << 20);\n\n    /**\n     * Wheter or not in protected mode\n     * @type {boolean}\n     */\n    this.protected_mode = false;\n\n    /**\n     * interrupt descriptor table\n     * @type {number}\n     */\n    this.idtr_size = 0;\n    /** @type {number} */\n    this.idtr_offset = 0;\n\n    /**\n     * global descriptor table register\n     * @type {number}\n     */\n    this.gdtr_size = 0;\n    /** @type {number} */\n    this.gdtr_offset = 0;\n\n    this.tss_size_32 = false;\n\n    /*\n     * whether or not a page fault occured\n     */\n    this.page_fault = false;\n\n    this.cr = new Int32Array(8);\n\n    /** @type {number} */\n    this.cr[0] = 0;\n    /** @type {number} */\n    this.cr[2] = 0;\n    /** @type {number} */\n    this.cr[3] = 0;\n    /** @type {number} */\n    this.cr[4] = 0;\n\n    // current privilege level\n    /** @type {number} */\n    this.cpl = 0;\n\n    // if false, pages are 4 KiB, else 4 Mib\n    /** @type {number} */\n    this.page_size_extensions = 0;\n\n    // current operand/address size\n    /** @type {boolean} */\n    this.is_32 = false;\n\n    /** @type {boolean} */\n    this.stack_size_32 = false;\n\n    /**\n     * Was the last instruction a hlt?\n     * @type {boolean}\n     */\n    this.in_hlt = false;\n\n    /** @type {number} */\n    this.last_virt_eip = 0;\n\n    /** @type {number} */\n    this.eip_phys = 0;\n\n    /** @type {number} */\n    this.last_virt_esp = 0;\n\n    /** @type {number} */\n    this.esp_phys = 0;\n\n\n    /** @type {number} */\n    this.sysenter_cs = 0;\n\n    /** @type {number} */\n    this.sysenter_esp = 0;\n\n    /** @type {number} */\n    this.sysenter_eip = 0;\n\n    /** @type {number} */\n    this.prefixes = 0;\n\n    /** @type {number} */\n    this.flags = 0;\n\n    /**\n     * bitmap of flags which are not updated in the flags variable\n     * changed by arithmetic instructions, so only relevant to arithmetic flags\n     * @type {number}\n     */\n    this.flags_changed = 0;\n\n    /**\n     * the last 2 operators and the result and size of the last arithmetic operation\n     * @type {number}\n     */\n    this.last_op1 = 0;\n    /** @type {number} */\n    this.last_op2 = 0;\n    /** @type {number} */\n    this.last_op_size = 0;\n\n    /** @type {number} */\n    this.last_add_result = 0;\n\n    /** @type {number} */\n    this.last_result = 0;\n\n    this.div32_result = new Float64Array(2);\n\n    this.tsc_offset = 0;\n\n    /** @type {number} */\n    this.modrm_byte = 0;\n\n    /** @type {number} */\n    this.phys_addr = 0;\n\n    /** @type {number} */\n    this.phys_addr_high = 0;\n\n    /** @type {!Object} */\n    this.devices = {};\n\n    this.table = [];\n\n    // paging enabled\n    /** @type {boolean} */\n    this.paging = false;\n\n    /** @type {number} */\n    this.instruction_pointer = 0;\n\n    /** @type {number} */\n    this.previous_ip = 0;\n\n    this.apic_enabled = true;\n\n    /**\n     * @type {number}\n     */\n    this.timestamp_counter = 0;\n\n    // registers\n    this.reg32s = new Int32Array(8);\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    // mm0-mm7 split up into 32 bit pairs\n    this.reg_mmxs = new Int32Array(16);\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n\n    this.reg_xmm32s = new Int32Array(8 * 4);\n    this.mxcsr = 0x1F80;\n\n    // segment registers, tr and ldtr\n    this.sreg = new Uint16Array(8);\n\n    // debug registers\n    this.dreg = new Int32Array(8);\n\n\n    // managed in io.js\n    /** @const */ this.memory_map_read8 = [];\n    /** @const */ this.memory_map_write8 = [];\n    /** @const */ this.memory_map_read32 = [];\n    /** @const */ this.memory_map_write32 = [];\n\n    /**\n     * @const\n     * @type {{main: ArrayBuffer, vga: ArrayBuffer}}\n     */\n    this.bios = {\n        main: null,\n        vga: null,\n    };\n\n    /** @type {number} */\n    this.fw_value = 0;\n\n    this.io = undefined;\n    this.fpu = undefined;\n\n    this.bus = bus;\n\n    dbg_assert(this.table16 && this.table32);\n    dbg_assert(this.table0F_16 && this.table0F_32);\n\n    this.update_operand_size();\n\n    this.tsc_offset = v86.microtick();\n\n    this.debug_init();\n\n    this.init2();\n\n    //Object.seal(this);\n}\n\nCPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.memory_size;\n    state[1] = this.segment_is_null;\n    state[2] = this.segment_offsets;\n    state[3] = this.segment_limits;\n    state[4] = this.protected_mode;\n    state[5] = this.idtr_offset;\n    state[6] = this.idtr_size;\n    state[7] = this.gdtr_offset;\n    state[8] = this.gdtr_size;\n    state[9] = this.page_fault;\n    state[10] = this.cr;\n    state[11] = this.cpl;\n    state[12] = this.page_size_extensions;\n    state[13] = this.is_32;\n\n    state[16] = this.stack_size_32;\n    state[17] = this.in_hlt;\n    state[18] = this.last_virt_eip;\n    state[19] = this.eip_phys;\n    state[20] = this.last_virt_esp;\n    state[21] = this.esp_phys;\n    state[22] = this.sysenter_cs;\n    state[23] = this.sysenter_eip;\n    state[24] = this.sysenter_esp;\n    state[25] = this.prefixes;\n    state[26] = this.flags;\n    state[27] = this.flags_changed;\n    state[28] = this.last_op1;\n    state[29] = this.last_op2;\n    state[30] = this.last_op_size;\n    state[31] = this.last_add_result;\n    state[32] = this.modrm_byte;\n\n    state[36] = this.paging;\n    state[37] = this.instruction_pointer;\n    state[38] = this.previous_ip;\n    state[39] = this.reg32s;\n    state[40] = this.sreg;\n    state[41] = this.dreg;\n    state[42] = this.mem8;\n    state[43] = this.fpu;\n\n    state[45] = this.devices.virtio;\n    state[46] = this.devices.apic;\n    state[47] = this.devices.rtc;\n    state[48] = this.devices.pci;\n    state[49] = this.devices.dma;\n    state[50] = this.devices.acpi;\n    state[51] = this.devices.hpet;\n    state[52] = this.devices.vga;\n    state[53] = this.devices.ps2;\n    state[54] = this.devices.uart0;\n    state[55] = this.devices.fdc;\n    state[56] = this.devices.cdrom;\n    state[57] = this.devices.hda;\n    state[58] = this.devices.pit;\n    state[59] = this.devices.net;\n    state[60] = this.devices.pic;\n    state[61] = this.devices.sb16;\n\n    state[62] = this.a20_enabled;\n    state[63] = this.fw_value;\n\n    state[64] = this.devices.ioapic;\n\n    state[65] = this.tss_size_32;\n\n    state[66] = this.reg_mmxs;\n\n    state[67] = this.devices.uart1;\n    state[68] = this.devices.uart2;\n    state[69] = this.devices.uart3;\n\n    return state;\n};\n\nCPU.prototype.set_state = function(state)\n{\n    this.memory_size = state[0];\n    this.segment_is_null = state[1];\n    this.segment_offsets = state[2];\n    this.segment_limits = state[3];\n    this.protected_mode = state[4];\n    this.idtr_offset = state[5];\n    this.idtr_size = state[6];\n    this.gdtr_offset = state[7];\n    this.gdtr_size = state[8];\n    this.page_fault = state[9];\n    this.cr = state[10];\n    this.cpl = state[11];\n    this.page_size_extensions = state[12];\n    this.is_32 = state[13];\n\n    this.stack_size_32 = state[16];\n\n    this.in_hlt = state[17];\n    this.last_virt_eip = state[18];\n    this.eip_phys = state[19];\n    this.last_virt_esp = state[20];\n    this.esp_phys = state[21];\n    this.sysenter_cs = state[22];\n    this.sysenter_eip = state[23];\n    this.sysenter_esp = state[24];\n    this.prefixes = state[25];\n\n    this.flags = state[26];\n    this.flags_changed = state[27];\n    this.last_op1 = state[28];\n    this.last_op2 = state[29];\n    this.last_op_size = state[30];\n    this.last_add_result = state[31];\n    this.modrm_byte = state[32];\n\n    this.paging = state[36];\n    this.instruction_pointer = state[37];\n    this.previous_ip = state[38];\n    this.reg32s = state[39];\n    this.sreg = state[40];\n    this.dreg = state[41];\n    this.mem8 = state[42];\n    this.fpu = state[43];\n\n    this.devices.virtio = state[45];\n    this.devices.apic = state[46];\n    this.devices.rtc = state[47];\n    this.devices.pci = state[48];\n    this.devices.dma = state[49];\n    this.devices.acpi = state[50];\n    this.devices.hpet = state[51];\n    this.devices.vga = state[52];\n    this.devices.ps2 = state[53];\n    this.devices.uart0 = state[54];\n    this.devices.fdc = state[55];\n    this.devices.cdrom = state[56];\n    this.devices.hda = state[57];\n    this.devices.pit = state[58];\n    this.devices.net = state[59];\n    this.devices.pic = state[60];\n    this.devices.sb16 = state[61];\n\n    this.a20_enabled = state[62];\n    this.fw_value = state[63];\n\n    this.devices.ioapic = state[64];\n\n    this.tss_size_32 = state[65];\n\n    this.reg_mmxs = state[66];\n\n    this.devices.uart1 = state[67];\n    this.devices.uart2 = state[68];\n    this.devices.uart3 = state[69];\n\n    this.mem16 = new Uint16Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 1);\n    this.mem32s = new Int32Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 2);\n\n\n    this.full_clear_tlb();\n    // tsc_offset?\n\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n    this.update_operand_size();\n};\n\n\n/**\n * @return {number} time in ms until this method should becalled again\n */\nCPU.prototype.main_run = function()\n{\n    if(this.in_hlt)\n    {\n        //if(false)\n        //{\n        //    var _t = this.hlt_loop();\n        //    var t = 0;\n        //}\n        //else\n        //{\n            var t = this.hlt_loop();\n        //}\n\n        if(this.in_hlt)\n        {\n            return t;\n        }\n    }\n\n    this.do_run();\n\n    return 0;\n};\n\nCPU.prototype.exception_cleanup = function(e)\n{\n    if(e === MAGIC_CPU_EXCEPTION)\n    {\n        // A legit CPU exception (for instance, a page fault happened)\n        // call_interrupt_vector has already been called at this point,\n        // so we just need to reset some state\n\n        this.page_fault = false;\n\n        // restore state from prefixes\n        this.clear_prefixes();\n    }\n    else\n    {\n        console.log(e);\n        console.log(e.stack);\n        //var e = new Error(e.message);\n        //Error.captureStackTrace && Error.captureStackTrace(e);\n        throw e;\n    }\n};\n\nCPU.prototype.reboot_internal = function()\n{\n    this.reset();\n    this.load_bios();\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.reset = function()\n{\n    this.a20_enabled = true;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.segment_is_null[i] = 0;\n        this.segment_limits[i] = 0;\n        //this.segment_infos = new Uint32Array(8);\n        this.segment_offsets[i] = 0;\n    }\n\n    this.full_clear_tlb();\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg32s[i] = 0;\n        this.sreg[i] = 0;\n        this.cr[i] = 0;\n        this.dreg[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_mmxs.length; i++)\n    {\n        this.reg_mmxs[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_xmm32s.length; i++)\n    {\n        this.reg_xmm32s[i] = 0;\n    }\n    this.mxcsr = 0x1F80;\n\n    this.protected_mode = false;\n\n    // http://www.sandpile.org/x86/initial.htm\n    this.idtr_size = 0;\n    this.idtr_offset = 0;\n\n    this.gdtr_size = 0;\n    this.gdtr_offset = 0;\n\n    this.page_fault = false;\n    this.cr[0] = 1 << 30 | 1 << 29 | 1 << 4;\n    this.cr[2] = 0;\n    this.cr[3] = 0;\n    this.cr[4] = 0;\n    this.dreg[6] = 0xFFFF0FF0|0;\n    this.dreg[7] = 0x400;\n    this.cpl = 0;\n    this.paging = false;\n    this.page_size_extensions = 0;\n    this.is_32 = false;\n    this.stack_size_32 = false;\n    this.prefixes = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.update_operand_size();\n\n    this.timestamp_counter = 0;\n    this.previous_ip = 0;\n    this.in_hlt = false;\n\n    this.sysenter_cs = 0;\n    this.sysenter_esp = 0;\n    this.sysenter_eip = 0;\n\n    this.flags = flags_default;\n    this.flags_changed = 0;\n\n    this.last_result = 0;\n    this.last_add_result = 0;\n    this.last_op1 = 0;\n    this.last_op2 = 0;\n    this.last_op_size = 0;\n\n    this.tsc_offset = v86.microtick();\n\n    this.instruction_pointer = 0xFFFF0;\n    this.switch_cs_real_mode(0xF000);\n\n    this.switch_seg(reg_ss, 0x30);\n    this.reg16[reg_sp] = 0x100;\n\n    if(this.devices.virtio)\n    {\n        this.devices.virtio.reset();\n    }\n\n    this.fw_value = 0;\n};\n\n/** @export */\nCPU.prototype.create_memory = function(size)\n{\n    if(size < 1024 * 1024)\n    {\n        size = 1024 * 1024;\n    }\n    else if((size | 0) < 0)\n    {\n        size = Math.pow(2, 31) - MMAP_BLOCK_SIZE;\n    }\n\n    size = ((size - 1) | (MMAP_BLOCK_SIZE - 1)) + 1 | 0;\n    dbg_assert((size | 0) > 0);\n    dbg_assert((size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    this.memory_size = size;\n\n    var buffer = new ArrayBuffer(size);\n\n    this.mem8 = new Uint8Array(buffer);\n    this.mem16 = new Uint16Array(buffer);\n    this.mem32s = new Int32Array(buffer);\n};\n\nCPU.prototype.init = function(settings, device_bus)\n{\n    this.create_memory(typeof settings.memory_size === \"number\" ?\n        settings.memory_size : 1024 * 1024 * 64);\n\n    this.reset();\n\n    var io = new IO(this);\n    this.io = io;\n\n    this.bios.main = settings.bios;\n    this.bios.vga = settings.vga_bios;\n\n    this.load_bios();\n\n    var a20_byte = 0;\n\n    io.register_read(0xB3, this, function()\n    {\n        // seabios smm_relocate_and_restore\n        dbg_log(\"port 0xB3 read\");\n        return 0;\n    });\n\n    io.register_read(0x92, this, function()\n    {\n        return a20_byte;\n    });\n\n    io.register_write(0x92, this, function(out_byte)\n    {\n        a20_byte = out_byte;\n    });\n\n    io.register_read(0x511, this, function()\n    {\n        // bios config port (used by seabios and kvm-unit-test)\n        let result = this.fw_value & 0xFF;\n        this.fw_value >>>= 8;\n        return result;\n    });\n    io.register_write(0x510, this, undefined, function(value)\n    {\n        dbg_log(\"bios config port, index=\" + h(value));\n\n        if(value === FW_CFG_SIGNATURE)\n        {\n            // We could pretend to be QEMU here to control certain options in\n            // seabios, but for now this isn't needed\n            this.fw_value = 0xfab0fab0|0;\n        }\n        else if(value === FW_CFG_RAM_SIZE)\n        {\n            this.fw_value = this.memory_size;\n        }\n        else if(value === FW_CFG_NB_CPUS)\n        {\n            this.fw_value = 1;\n        }\n        else\n        {\n            dbg_assert(false, \"Unimplemented fw index: \" + h(value));\n            this.fw_value = 0;\n        }\n    });\n\n    if(DEBUG)\n    {\n        // Use by linux for port-IO delay\n        // Avoid generating tons of debug messages\n        io.register_write(0x80, this, function(out_byte)\n        {\n        });\n    }\n\n    this.devices = {};\n\n    // TODO: Make this more configurable\n    if(settings.load_devices)\n    {\n        this.devices.pic = new PIC(this);\n        this.devices.pci = new PCI(this);\n\n        if(ENABLE_ACPI)\n        {\n            this.devices.ioapic = new IOAPIC(this);\n            this.devices.apic = new APIC(this);\n            this.devices.acpi = new ACPI(this);\n        }\n\n        this.devices.rtc = new RTC(this);\n        this.fill_cmos(this.devices.rtc, settings);\n\n        this.devices.dma = new DMA(this);\n\n        if(ENABLE_HPET)\n        {\n            this.devices.hpet = new HPET(this);\n        }\n\n        this.devices.vga = new VGAScreen(this, device_bus,\n                settings.vga_memory_size || 8 * 1024 * 1024);\n\n        this.fpu = new FPU(this);\n\n        this.devices.ps2 = new PS2(this, device_bus);\n\n        this.devices.uart0 = new UART(this, 0x3F8, device_bus);\n\n        if(settings.uart1)\n        {\n            this.devices.uart1 = new UART(this, 0x2F8, device_bus);\n        }\n        if(settings.uart2)\n        {\n            this.devices.uart2 = new UART(this, 0x3E8, device_bus);\n        }\n        if(settings.uart3)\n        {\n            this.devices.uart3 = new UART(this, 0x3E8, device_bus);\n        }\n\n        this.devices.fdc = new FloppyController(this, settings.fda, settings.fdb);\n\n        var ide_device_count = 0;\n\n        if(settings.hda)\n        {\n            this.devices.hda = new IDEDevice(this, settings.hda, settings.hdb, false, ide_device_count++, device_bus);\n        }\n\n        if(settings.cdrom)\n        {\n            this.devices.cdrom = new IDEDevice(this, settings.cdrom, undefined, true, ide_device_count++, device_bus);\n        }\n\n        this.devices.pit = new PIT(this, device_bus);\n\n        if(settings.enable_ne2k)\n        {\n            this.devices.net = new Ne2k(this, device_bus);\n        }\n\n        if(settings.fs9p)\n        {\n            this.devices.virtio = new VirtIO(this, device_bus, settings.fs9p);\n        }\n\n        if(true)\n        {\n            this.devices.sb16 = new SB16(this, device_bus);\n        }\n    }\n\n    if(settings.multiboot)\n    {\n        dbg_assert(settings.multiboot.buffer);\n        this.load_multiboot(settings.multiboot.buffer);\n    }\n\n    if(DEBUG)\n    {\n        this.debug.init();\n    }\n};\n\nCPU.prototype.load_multiboot = function(buffer)\n{\n    // https://www.gnu.org/software/grub/manual/multiboot/multiboot.html\n\n    dbg_log(\"Trying multiboot from buffer of size \" + buffer.byteLength, LOG_CPU);\n\n    const MAGIC = 0x1BADB002;\n    const ELF_MAGIC = 0x464C457F;\n    const MULTIBOOT_HEADER_ADDRESS = 0x10000;\n    const MULTIBOOT_SEARCH_BYTES = 8192;\n\n    if(buffer.byteLength < MULTIBOOT_SEARCH_BYTES)\n    {\n        var buf32 = new Int32Array(MULTIBOOT_SEARCH_BYTES / 4);\n        new Uint8Array(buf32.buffer).set(new Uint8Array(buffer));\n    }\n    else\n    {\n        var buf32 = new Int32Array(buffer, 0, MULTIBOOT_SEARCH_BYTES / 4);\n    }\n\n    for(var offset = 0; offset < MULTIBOOT_SEARCH_BYTES; offset += 4)\n    {\n        if(buf32[offset >> 2] === MAGIC)\n        {\n            var flags = buf32[offset + 4 >> 2];\n            var checksum = buf32[offset + 8 >> 2];\n            var total = MAGIC + flags + checksum | 0;\n\n            if(total)\n            {\n                dbg_log(\"Multiboot checksum check failed\", LOG_CPU);\n                continue;\n            }\n        }\n        else\n        {\n            continue;\n        }\n\n        dbg_log(\"Multiboot magic found, flags: \" + h(flags >>> 0, 8), LOG_CPU);\n        dbg_assert((flags & ~MULTIBOOT_HEADER_ADDRESS) === 0, \"TODO\");\n\n        this.reg32s[reg_eax] = 0x2BADB002;\n\n        let multiboot_info_addr = 0x7C00;\n        this.reg32s[reg_ebx] = multiboot_info_addr;\n        this.write32(multiboot_info_addr, 0);\n\n        this.cr[0] = 1;\n        this.protected_mode = true;\n        this.flags = flags_default;\n        this.update_cs_size(true);\n        this.stack_size_32 = true;\n\n        for(var i = 0; i < 6; i++)\n        {\n            this.segment_is_null[i] = 0;\n            this.segment_offsets[i] = 0;\n            this.segment_limits[i] = 0xFFFFFFFF;\n\n            // Value doesn't matter, OS isn't allowed to reload without setting\n            // up a proper GDT\n            this.sreg[i] = 0xB002;\n        }\n\n        if(flags & MULTIBOOT_HEADER_ADDRESS)\n        {\n            dbg_log(\"Multiboot specifies its own address table\", LOG_CPU);\n\n            var header_addr = buf32[offset + 12 >> 2];\n            var load_addr = buf32[offset + 16 >> 2];\n            var load_end_addr = buf32[offset + 20 >> 2];\n            var bss_end_addr = buf32[offset + 24 >> 2];\n            var entry_addr = buf32[offset + 28 >> 2];\n\n            dbg_log(\"header=\" + h(header_addr, 8) +\n                    \" load=\" + h(load_addr, 8) +\n                    \" load_end=\" + h(load_end_addr, 8) +\n                    \" bss_end=\" + h(bss_end_addr, 8) +\n                    \" entry=\" + h(entry_addr, 8));\n\n            dbg_assert(load_addr <= header_addr);\n\n            var file_start = offset - (header_addr - load_addr);\n\n            if(load_end_addr === 0)\n            {\n                var length = undefined;\n            }\n            else\n            {\n                dbg_assert(load_end_addr >= load_addr);\n                var length = load_end_addr - load_addr;\n            }\n\n            let blob = new Uint8Array(buffer, file_start, length);\n            this.write_blob(blob, load_addr);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + entry_addr | 0;\n        }\n        else if(buf32[0] === ELF_MAGIC)\n        {\n            dbg_log(\"Multiboot image is in elf format\", LOG_CPU);\n\n            let elf = read_elf(buffer);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + elf.header.entry | 0;\n\n            for(let program of elf.program_headers)\n            {\n                if(program.type === 0)\n                {\n                    // null\n                }\n                else if(program.type === 1)\n                {\n                    // load\n\n                    // Since multiboot specifies that paging is disabled,\n                    // virtual and physical address must be equal\n                    dbg_assert(program.paddr === program.vaddr);\n                    dbg_assert(program.filesz <= program.memsz);\n\n                    let blob = new Uint8Array(buffer, program.offset, program.filesz);\n                    this.write_blob(blob, program.paddr);\n                }\n                else if(program.type === 4 ||\n                        program.type === 0x6474e550 ||\n                        program.type === 0x6474e551)\n                {\n                    // ignore for now\n                }\n                else\n                {\n                    dbg_assert(false, \"unimplemented elf section type\");\n                }\n            }\n        }\n        else\n        {\n            dbg_assert(false, \"Not a bootable multiboot format\");\n        }\n\n        // only for kvm-unit-test\n        this.io.register_write_consecutive(0xF4, this,\n            function(value)\n            {\n                console.log(\"Test exited with code \" + h(value, 2));\n                throw \"HALT\";\n            },\n            function() {},\n            function() {},\n            function() {});\n\n        // only for kvm-unit-test\n        for(let i = 0xE; i <= 0xF; i++)\n        {\n            this.io.register_write(0x2000 + i, this,\n                function(value)\n                {\n                    dbg_log(\"kvm-unit-test: Set irq \" + h(i) + \" to \" + h(value, 2));\n                    if(value)\n                    {\n                        this.device_raise_irq(i);\n                    }\n                    else\n                    {\n                        this.device_lower_irq(i);\n                    }\n                });\n        }\n\n        dbg_log(\"Starting multiboot kernel at:\", LOG_CPU);\n        this.debug.dump_state();\n        this.debug.dump_regs();\n\n        break;\n    }\n};\n\nCPU.prototype.fill_cmos = function(rtc, settings)\n{\n    var boot_order = settings.boot_order || 0x213;\n\n    // Used by seabios to determine the boot order\n    //   Nibble\n    //   1: FloppyPrio\n    //   2: HDPrio\n    //   3: CDPrio\n    //   4: BEVPrio\n    // bootflag 1, high nibble, lowest priority\n    // Low nibble: Disable floppy signature check (1)\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG1 , 1 | boot_order >> 4 & 0xF0);\n\n    // bootflag 2, both nibbles, high and middle priority\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG2, boot_order & 0xFF);\n\n    // 640k or less if less memory is used\n    rtc.cmos_write(CMOS_MEM_BASE_LOW, 640 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_BASE_HIGH, 640 >> 8);\n\n    var memory_above_1m = 0; // in k\n    if(this.memory_size >= 1024 * 1024)\n    {\n        memory_above_1m = (this.memory_size - 1024 * 1024) >> 10;\n        memory_above_1m = Math.min(memory_above_1m, 0xFFFF);\n    }\n\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_HIGH, memory_above_1m >> 8 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_HIGH, memory_above_1m >> 8 & 0xFF);\n\n    var memory_above_16m = 0; // in 64k blocks\n    if(this.memory_size >= 16 * 1024 * 1024)\n    {\n        memory_above_16m = (this.memory_size - 16 * 1024 * 1024) >> 16;\n        memory_above_16m = Math.min(memory_above_16m, 0xFFFF);\n    }\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_LOW, memory_above_16m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_HIGH, memory_above_16m >> 8 & 0xFF);\n\n    // memory above 4G (not supported by this emulator)\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_LOW, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_MID, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_HIGH, 0);\n\n    rtc.cmos_write(CMOS_EQUIPMENT_INFO, 0x2F);\n\n    rtc.cmos_write(CMOS_BIOS_SMP_COUNT, 0);\n\n    // Used by bochs BIOS to skip the boot menu delay.\n    if (settings.fastboot) rtc.cmos_write(0x3f, 0x01);\n};\n\nCPU.prototype.load_bios = function()\n{\n    var bios = this.bios.main;\n    var vga_bios = this.bios.vga;\n\n    if(!bios)\n    {\n        dbg_log(\"Warning: No BIOS\");\n        return;\n    }\n\n    // load bios\n    var data = new Uint8Array(bios),\n        start = 0x100000 - bios.byteLength;\n\n    this.write_blob(data, start);\n\n    if(vga_bios)\n    {\n        // load vga bios\n        var vga_bios8 = new Uint8Array(vga_bios);\n\n        // older versions of seabios\n        this.write_blob(vga_bios8, 0xC0000);\n\n        // newer versions of seabios (needs to match pci rom address, see vga.js)\n        this.io.mmap_register(0xFEB00000, 0x100000,\n            function(addr)\n            {\n                addr = (addr - 0xFEB00000) | 0;\n                if(addr < vga_bios8.length)\n                {\n                    return vga_bios8[addr];\n                }\n                else\n                {\n                    return 0;\n                }\n            },\n            function(addr, value)\n            {\n                dbg_assert(false, \"Unexpected write to VGA rom\");\n            });\n    }\n    else\n    {\n        dbg_log(\"Warning: No VGA BIOS\");\n    }\n\n    // seabios expects the bios to be mapped to 0xFFF00000 also\n    this.io.mmap_register(0xFFF00000, 0x100000,\n        function(addr)\n        {\n            addr &= 0xFFFFF;\n            return this.mem8[addr];\n        }.bind(this),\n        function(addr, value)\n        {\n            addr &= 0xFFFFF;\n            this.mem8[addr] = value;\n        }.bind(this));\n};\n\nCPU.prototype.do_run = function()\n{\n    /** @type {number} */\n    var start = v86.microtick();\n\n    /** @type {number} */\n    var now = start;\n\n    // outer loop:\n    // runs cycles + timers\n    for(; now - start < TIME_PER_FRAME;)\n    {\n        this.run_hardware_timers(now);\n        this.handle_irqs();\n\n        this.do_many_cycles();\n\n        if(this.in_hlt)\n        {\n            return;\n        }\n\n        now = v86.microtick();\n    }\n};\n\nCPU.prototype.do_many_cycles = function()\n{\n    try {\n        this.do_many_cycles_unsafe();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.do_many_cycles_unsafe = function()\n{\n    // inner loop:\n    // runs only cycles\n    for(var k = LOOP_COUNTER; k--;)\n    {\n        this.cycle_internal();\n    }\n};\n\n/** @const */\nvar PROFILING = false;\n\nif(PROFILING)\n{\n    var instruction_total = new Float64Array(256);\n    var instruction_count = new Float64Array(256);\n\n    window[\"print_profiling\"] = function print_profiling()\n    {\n        var prof_instructions = [];\n        for(var i = 0; i < 256; i++) prof_instructions[i] = {\n            n: h(i, 2),\n            total: instruction_total[i],\n            count: instruction_count[i],\n            per: (instruction_total[i] / instruction_count[i]) || 0,\n        };\n\n        console.log(\"count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.count - p0.count));\n\n        console.log(\"time:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.total - p0.total));\n\n        console.log(\"time/count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.per - p0.per));\n    };\n}\n\n/**\n * execute a single instruction cycle on the cpu\n * this includes reading all prefixes and the whole instruction\n */\nCPU.prototype.cycle_internal = function()\n{\n    this.previous_ip = this.instruction_pointer;\n\n    this.timestamp_counter++;\n\n    if(PROFILING)\n    {\n        var start = performance.now();\n    }\n\n    var opcode = this.read_imm8();\n    //this.translate_address_read(this.instruction_pointer + 15|0)\n\n    if(DEBUG)\n    {\n        this.debug.logop(this.instruction_pointer - 1 >>> 0, opcode);\n    }\n\n    // call the instruction\n    this.table[opcode](this);\n\n    if(PROFILING)\n    {\n        var end = performance.now();\n        instruction_total[opcode] += end - start;\n        instruction_count[opcode]++;\n    }\n\n    if(this.flags & flag_trap)\n    {\n        // TODO\n        dbg_log(\"Trap flag: Ignored\", LOG_CPU);\n    }\n};\n\n/** @export */\nCPU.prototype.cycle = function()\n{\n    try\n    {\n        this.cycle_internal();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.segment_prefix_op = function(sreg)\n{\n    dbg_assert(sreg <= 5);\n    this.prefixes |= sreg + 1;\n    this.run_prefix_instruction();\n    this.prefixes = 0;\n};\n\nCPU.prototype.run_prefix_instruction = function()\n{\n    if(this.is_osize_32())\n    {\n        this.table32[this.read_imm8()](this);\n    }\n    else\n    {\n        this.table16[this.read_imm8()](this);\n    }\n};\n\nCPU.prototype.hlt_loop = function()\n{\n    dbg_assert(this.flags & flag_interrupt);\n    //dbg_log(\"In HLT loop\", LOG_CPU);\n\n    this.run_hardware_timers(v86.microtick());\n    this.handle_irqs();\n\n    return 0;\n};\n\nCPU.prototype.run_hardware_timers = function(now)\n{\n    if(ENABLE_HPET)\n    {\n        var pit_time = this.devices.pit.timer(now, this.devices.hpet.legacy_mode);\n        var rtc_time = this.devices.rtc.timer(now, this.devices.hpet.legacy_mode);\n        this.devices.hpet.timer(now);\n    }\n    else\n    {\n        var pit_time = this.devices.pit.timer(now, false);\n        var rtc_time = this.devices.rtc.timer(now, false);\n    }\n\n    if(ENABLE_ACPI)\n    {\n        this.devices.acpi.timer(now);\n        this.devices.apic.timer(now);\n    }\n};\n\nCPU.prototype.clear_prefixes = function()\n{\n    this.prefixes = 0;\n};\n\nCPU.prototype.set_cr0 = function(cr0)\n{\n    //dbg_log(\"cr0 = \" + h(this.cr[0] >>> 0), LOG_CPU);\n\n    if((cr0 & (CR0_PE | CR0_PG)) === CR0_PG)\n    {\n        // cannot load PG without PE\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.cr[0] = cr0;\n\n    if(!this.fpu)\n    {\n        // if there's no FPU, keep emulation set\n        this.cr[0] |= CR0_EM;\n    }\n    this.cr[0] |= CR0_ET;\n\n    var new_paging = (this.cr[0] & CR0_PG) === CR0_PG;\n\n    dbg_assert(typeof this.paging === \"boolean\");\n    if(new_paging !== this.paging)\n    {\n        this.paging = new_paging;\n        this.full_clear_tlb();\n    }\n\n    this.protected_mode = (this.cr[0] & CR0_PE) === CR0_PE;\n};\n\nCPU.prototype.set_cr4 = function(cr4)\n{\n    if(cr4 & (1 << 11 | 1 << 12 | 1 << 15 | 1 << 16 | 1 << 19 | 0xFFC00000))\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.cr[4] ^ cr4) & CR4_PGE)\n    {\n        if(cr4 & CR4_PGE)\n        {\n            // The PGE bit has been enabled. The global TLB is\n            // still empty, so we only have to copy it over\n            this.clear_tlb();\n        }\n        else\n        {\n            // Clear the global TLB\n            this.full_clear_tlb();\n        }\n    }\n\n    this.cr[4] = cr4;\n    this.page_size_extensions = (cr4 & CR4_PSE) ? PSE_ENABLED : 0;\n\n    if(cr4 & CR4_PAE)\n    {\n        throw this.debug.unimpl(\"PAE\");\n    }\n\n    if(cr4 & 0xFFFFF900)\n    {\n        dbg_assert(false, \"Unimplemented CR4 bits: \" + h(cr4));\n        this.trigger_ud();\n    }\n\n    dbg_log(\"cr4=\" + h(cr4 >>> 0), LOG_CPU);\n};\n\nCPU.prototype.cpl_changed = function()\n{\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.read_imm8 = function()\n{\n    if((this.instruction_pointer & ~0xFFF) ^ this.last_virt_eip)\n    {\n        this.eip_phys = this.translate_address_read(this.instruction_pointer) ^ this.instruction_pointer;\n        this.last_virt_eip = this.instruction_pointer & ~0xFFF;\n    }\n\n    var data8 = this.read8(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 1 | 0;\n\n    return data8;\n};\n\nCPU.prototype.read_imm8s = function()\n{\n    return this.read_imm8() << 24 >> 24;\n};\n\nCPU.prototype.read_imm16 = function()\n{\n    // Two checks in one comparison:\n    //    1. Did the high 20 bits of eip change\n    // or 2. Are the low 12 bits of eip 0xFFF (and this read crosses a page boundary)\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFE)\n    {\n        return this.read_imm8() | this.read_imm8() << 8;\n    }\n\n    var data16 = this.read16(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 2 | 0;\n\n    return data16;\n};\n\nCPU.prototype.read_imm32s = function()\n{\n    // Analogue to the above comment\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFC)\n    {\n        return this.read_imm16() | this.read_imm16() << 16;\n    }\n\n    var data32 = this.read32s(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 4 | 0;\n\n    return data32;\n};\n\n/*\n * Create an internal data unit to represent 64 bits of data\n */\nCPU.prototype.create_atom64s = function(low, high)\n{\n    let data = new Int32Array(2);\n    data[0] = low;\n    data[1] = high;\n    return data;\n};\n\nCPU.prototype.create_atom128s = function(d0, d1, d2, d3)\n{\n    let data = new Int32Array(4);\n    data[0] = d0;\n    data[1] = d1;\n    data[2] = d2;\n    data[3] = d3;\n    return data;\n}\n\nCPU.prototype.read_modrm_byte = function()\n{\n    this.modrm_byte = this.read_imm8();\n};\n\nCPU.prototype.read_op0F = CPU.prototype.read_imm8;\nCPU.prototype.read_sib = CPU.prototype.read_imm8;\nCPU.prototype.read_op8 = CPU.prototype.read_imm8;\nCPU.prototype.read_op8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_op16 = CPU.prototype.read_imm16;\nCPU.prototype.read_op32s = CPU.prototype.read_imm32s;\nCPU.prototype.read_disp8 = CPU.prototype.read_imm8;\nCPU.prototype.read_disp8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_disp16 = CPU.prototype.read_imm16;\nCPU.prototype.read_disp32s = CPU.prototype.read_imm32s;\n\nCPU.prototype.init2 = function () {};\nCPU.prototype.branch_taken = function () {};\nCPU.prototype.branch_not_taken = function () {};\nCPU.prototype.diverged = function () {};\n\nCPU.prototype.modrm_resolve = function(modrm_byte)\n{\n    dbg_assert(modrm_byte < 0xC0);\n\n    return (this.is_asize_32() ? this.modrm_table32 : this.modrm_table16)[modrm_byte](this);\n};\n\nCPU.prototype.sib_resolve = function(mod)\n{\n    return this.sib_table[this.read_sib()](this, mod);\n};\n\nCPU.prototype.clear_instruction_cache = function() {};\n\n// read word from a page boundary, given 2 physical addresses\nCPU.prototype.virt_boundary_read16 = function(low, high)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    return this.read8(low) | this.read8(high) << 8;\n};\n\n// read doubleword from a page boundary, given 2 addresses\nCPU.prototype.virt_boundary_read32s = function(low, high)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    var mid;\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            mid = this.read_aligned16(high - 2 >> 1);\n        }\n        else\n        {\n            // 0xFFD\n            mid = this.read_aligned16(low + 1 >> 1);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        mid = this.virt_boundary_read16(low + 1 | 0, high - 1 | 0);\n    }\n\n    return this.read8(low) | mid << 8 | this.read8(high) << 24;\n};\n\nCPU.prototype.virt_boundary_write16 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    this.write8(low, value);\n    this.write8(high, value >> 8);\n};\n\nCPU.prototype.virt_boundary_write32 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    this.write8(low, value);\n    this.write8(high, value >> 24);\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            this.write8(high - 2, value >> 8);\n            this.write8(high - 1, value >> 16);\n        }\n        else\n        {\n            // 0xFFD\n            this.write8(low + 1 | 0, value >> 8);\n            this.write8(low + 2 | 0, value >> 16);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        this.write8(low + 1 | 0, value >> 8);\n        this.write8(high - 1, value >> 16);\n    }\n};\n\n// safe_read, safe_write\n// read or write byte, word or dword to the given *virtual* address,\n// and be safe on page boundaries\n\nCPU.prototype.safe_read8 = function(addr)\n{\n    dbg_assert(addr < 0x80000000);\n    return this.read8(this.translate_address_read(addr));\n};\n\nCPU.prototype.safe_read16 = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) === 0xFFF)\n    {\n        return this.safe_read8(addr) | this.safe_read8(addr + 1 | 0) << 8;\n    }\n    else\n    {\n        return this.read16(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read32s = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) >= 0xFFD)\n    {\n        return this.safe_read16(addr) | this.safe_read16(addr + 2 | 0) << 16;\n    }\n    else\n    {\n        return this.read32s(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read64s = function(addr)\n{\n    let data = this.create_atom64s(0, 0);\n    if(this.paging && (addr & 0xFFF) >= 0xFF9)\n    {\n        data[0] = this.safe_read32s(addr);\n        data[1] = this.safe_read32s(addr + 4 | 0);\n    }\n    else\n    {\n        data[0] = this.read32s(this.translate_address_read(addr));\n        data[1] = this.read32s(this.translate_address_read(addr + 4 | 0));\n    }\n    return data;\n};\n\nCPU.prototype.safe_read128s_aligned = function(addr)\n{\n    dbg_assert((addr & 0xF) === 0);\n    let phys = this.translate_address_read(addr);\n    return this.create_atom128s(\n        this.read32s(phys),\n        this.read32s(phys + 4 | 0),\n        this.read32s(phys + 8 | 0),\n        this.read32s(phys + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_read128s_unaligned = function(addr)\n{\n    return this.create_atom128s(\n        this.safe_read32s(addr),\n        this.safe_read32s(addr + 4 | 0),\n        this.safe_read32s(addr + 8 | 0),\n        this.safe_read32s(addr + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_write8 = function(addr, value)\n{\n    dbg_assert(addr < 0x80000000);\n    this.write8(this.translate_address_write(addr), value);\n};\n\nCPU.prototype.safe_write16 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) === 0xFFF)\n    {\n        this.virt_boundary_write16(phys_low, this.translate_address_write(addr + 1 | 0), value);\n    }\n    else\n    {\n        this.write16(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write32 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) >= 0xFFD)\n    {\n        // XXX\n        this.virt_boundary_write32(phys_low, this.translate_address_write(addr + 3 & ~3) | (addr + 3) & 3, value);\n    }\n    else\n    {\n        this.write32(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write64 = function(addr, low, high)\n{\n    this.writable_or_pagefault(addr, 8);\n    this.safe_write32(addr, low);\n    this.safe_write32(addr + 4 | 0, high);\n};\n\nCPU.prototype.safe_write128 = function(addr, d0, d1, d2, d3)\n{\n    this.writable_or_pagefault(addr, 16);\n    this.safe_write32(addr, d0);\n    this.safe_write32(addr + 4 | 0, d1);\n    this.safe_write32(addr + 8 | 0, d2);\n    this.safe_write32(addr + 12 | 0, d3);\n};\n\n\n// read 2 or 4 byte from ip, depending on address size attribute\nCPU.prototype.read_moffs = function()\n{\n    if(this.is_asize_32())\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op32s() | 0;\n    }\n    else\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op16() | 0;\n    }\n};\n\nCPU.prototype.getiopl = function()\n{\n    return this.flags >> 12 & 3;\n};\n\nCPU.prototype.vm86_mode = function()\n{\n    return !!(this.flags & flag_vm);\n};\n\nCPU.prototype.get_eflags = function()\n{\n    return (this.flags & ~flags_all) | !!this.getcf() | !!this.getpf() << 2 | !!this.getaf() << 4 |\n                                  !!this.getzf() << 6 | !!this.getsf() << 7 | !!this.getof() << 11;\n};\n\n/**\n * Update the flags register depending on iopl and cpl\n */\nCPU.prototype.update_eflags = function(new_flags)\n{\n    var dont_update = flag_rf | flag_vm | flag_vip | flag_vif,\n        clear = ~flag_vip & ~flag_vif & flags_mask;\n\n    if(this.flags & flag_vm)\n    {\n        // other case needs to be handled in popf or iret\n        dbg_assert(this.getiopl() === 3);\n\n        dont_update |= flag_iopl;\n\n        // don't clear vip or vif\n        clear |= flag_vip | flag_vif;\n    }\n    else\n    {\n        if(!this.protected_mode) dbg_assert(this.cpl === 0);\n\n        if(this.cpl)\n        {\n            // cpl > 0\n            // cannot update iopl\n            dont_update |= flag_iopl;\n\n            if(this.cpl > this.getiopl())\n            {\n                // cpl > iopl\n                // cannot update interrupt flag\n                dont_update |= flag_interrupt;\n            }\n        }\n    }\n\n    this.flags = (new_flags ^ ((this.flags ^ new_flags) & dont_update)) & clear | flags_default;\n\n    this.flags_changed = 0;\n};\n\nCPU.prototype.get_stack_reg = function()\n{\n    if(this.stack_size_32)\n    {\n        return this.reg32s[reg_esp];\n    }\n    else\n    {\n        return this.reg16[reg_sp];\n    }\n};\n\nCPU.prototype.set_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] = value;\n    }\n    else\n    {\n        this.reg16[reg_sp] = value;\n    }\n};\n\nCPU.prototype.adjust_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] += value;\n    }\n    else\n    {\n        this.reg16[reg_sp] += value;\n    }\n};\n\nCPU.prototype.get_stack_pointer = function(mod)\n{\n    if(this.stack_size_32)\n    {\n        return this.get_seg(reg_ss) + this.reg32s[reg_esp] + mod | 0;\n    }\n    else\n    {\n        return this.get_seg(reg_ss) + (this.reg16[reg_sp] + mod & 0xFFFF) | 0;\n    }\n};\n\n/*\n * returns the \"real\" instruction pointer,\n * without segment offset\n */\nCPU.prototype.get_real_eip = function()\n{\n    return this.instruction_pointer - this.get_seg(reg_cs) | 0;\n};\n\nCPU.prototype.call_interrupt_vector = function(interrupt_nr, is_software_int, error_code)\n{\n    //dbg_log(\"int \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int \" + h(interrupt_nr) + \" start\" +\n        \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\");\n    CPU_LOG_VERBOSE && this.debug.dump_regs();\n\n    this.debug.debug_interrupt(interrupt_nr);\n\n    dbg_assert(error_code === false || typeof error_code === \"number\");\n\n    // we have to leave hlt_loop at some point, this is a\n    // good place to do it\n    //this.in_hlt && dbg_log(\"Leave HLT loop\", LOG_CPU);\n    this.in_hlt = false;\n\n    if(this.protected_mode)\n    {\n        if(this.vm86_mode() && (this.cr[4] & CR4_VME))\n        {\n            throw this.debug.unimpl(\"VME\");\n        }\n\n        if(this.vm86_mode() && is_software_int && this.getiopl() < 3)\n        {\n            dbg_log(\"call_interrupt_vector #GP. vm86 && software int && iopl < 3\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if((interrupt_nr << 3 | 7) > this.idtr_size)\n        {\n            dbg_log(interrupt_nr, LOG_CPU);\n            dbg_trace(LOG_CPU);\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var addr = this.idtr_offset + (interrupt_nr << 3) | 0;\n        dbg_assert((addr & 0xFFF) < 0xFF8);\n\n        if(this.paging)\n        {\n            addr = this.translate_address_system_read(addr);\n        }\n\n        var base = this.read16(addr) | this.read16(addr + 6 | 0) << 16;\n        var selector = this.read16(addr + 2 | 0);\n        var access = this.read8(addr + 5 | 0);\n        var dpl = access >> 5 & 3;\n        var type = access & 31;\n\n        if((access & 0x80) === 0)\n        {\n            // present bit not set\n            throw this.debug.unimpl(\"#NP handler\");\n        }\n\n        if(is_software_int && dpl < this.cpl)\n        {\n            dbg_log(\"#gp software interrupt (\" + h(interrupt_nr, 2) + \") and dpl < cpl\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(interrupt_nr << 3 | 2);\n        }\n\n        if(type === 5)\n        {\n            // task gate\n            dbg_log(\"interrupt to task gate: int=\" + h(interrupt_nr, 2) + \" sel=\" + h(selector, 4) + \" dpl=\" + dpl, LOG_CPU);\n            dbg_trace(LOG_CPU);\n\n            this.do_task_switch(selector, error_code);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n            return;\n        }\n\n        if((type & ~1 & ~8) !== 6)\n        {\n            // invalid type\n            dbg_trace(LOG_CPU);\n            dbg_log(\"invalid type: \" + h(type));\n            dbg_log(h(addr) + \" \" + h(base >>> 0) + \" \" + h(selector));\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var is_trap = (type & 1) === 1;\n        var is_16 = (type & 8) === 0;\n\n        var info = this.lookup_segment_selector(selector);\n\n        dbg_assert((base >>> 0) <= info.effective_limit);\n        dbg_assert(info.is_valid);\n\n        if(info.is_null)\n        {\n            dbg_log(\"is null\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_executable || info.dpl > this.cpl)\n        {\n            dbg_log(\"not exec\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_present)\n        {\n            // kvm-unit-test\n            dbg_log(\"not present\");\n            this.trigger_np(interrupt_nr << 3 | 2);\n        }\n\n        var old_flags = this.get_eflags();\n\n        //dbg_log(\"interrupt \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware) from cpl=\" + this.cpl + \" vm=\" + (this.flags & flag_vm) + \" cs:eip=\" + h(this.sreg[reg_cs], 4) + \":\" + h(this.get_real_eip(), 8) + \" to cpl=\"\n\n        if(!info.dc_bit && info.dpl < this.cpl)\n        {\n            // inter privilege level interrupt\n            // interrupt from vm86 mode\n\n            //dbg_log(\"Inter privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) + \" trap=\" + is_trap + \" 16bit=\" + is_16, LOG_CPU);\n            //this.debug.dump_regs();\n            var tss_stack_addr = this.get_tss_stack_addr(info.dpl);\n\n            if(this.tss_size_32)\n            {\n                var new_esp = this.read32s(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 4 | 0);\n            }\n            else\n            {\n                var new_esp = this.read16(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 2 | 0);\n            }\n            var ss_info = this.lookup_segment_selector(new_ss);\n\n            // Disabled: Incorrect handling of direction bit\n            // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n            //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n            //    debugger;\n            //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n            dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n            if(ss_info.is_null)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.rpl !== info.dpl) // xxx: 0 in v86 mode\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.dpl !== info.dpl || !ss_info.rw_bit)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(!ss_info.is_present)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n\n            var old_esp = this.reg32s[reg_esp];\n            var old_ss = this.sreg[reg_ss];\n\n            if(old_flags & flag_vm)\n            {\n                //dbg_log(\"return from vm86 mode\");\n                //this.debug.dump_regs();\n                dbg_assert(info.dpl === 0, \"switch to non-0 dpl from vm86 mode\");\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (5 + (error_code !== false) + 4 * ((old_flags & flag_vm) === flag_vm));\n            var new_stack_pointer = ss_info.base + (ss_info.size ? new_esp - stack_space : (new_esp - stack_space & 0xFFFF));\n\n            // XXX: with new cpl or with cpl 0?\n            this.translate_address_system_write(new_stack_pointer);\n            this.translate_address_system_write(ss_info.base + new_esp - 1);\n\n            // no exceptions below\n\n            this.cpl = info.dpl;\n            this.cpl_changed();\n\n            this.update_cs_size(info.size);\n\n            this.flags &= ~flag_vm & ~flag_rf;\n\n            this.switch_seg(reg_ss, new_ss);\n            this.set_stack_reg(new_esp);\n\n            if(old_flags & flag_vm)\n            {\n                if(is_16)\n                {\n                    dbg_assert(false);\n                }\n                else\n                {\n                    this.push32(this.sreg[reg_gs]);\n                    this.push32(this.sreg[reg_fs]);\n                    this.push32(this.sreg[reg_ds]);\n                    this.push32(this.sreg[reg_es]);\n                }\n            }\n\n            if(is_16)\n            {\n                this.push16(old_ss);\n                this.push16(old_esp);\n            }\n            else\n            {\n                this.push32(old_ss);\n                this.push32(old_esp);\n            }\n        }\n        else if(info.dc_bit || info.dpl === this.cpl)\n        {\n            // intra privilege level interrupt\n\n            //dbg_log(\"Intra privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) +\n            //        \" trap=\" + is_trap + \" 16bit=\" + is_16 +\n            //        \" cpl=\" + this.cpl + \" dpl=\" + info.dpl + \" conforming=\" + +info.dc_bit, LOG_CPU);\n            //this.debug.dump_regs();\n\n            if(this.flags & flag_vm)\n            {\n                dbg_assert(false, \"check error code\");\n                this.trigger_gp(selector & ~3);\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (3 + (error_code !== false));\n\n            // XXX: with current cpl or with cpl 0?\n            this.writable_or_pagefault(this.get_stack_pointer(-stack_space), stack_space);\n\n            // no exceptions below\n        }\n        else\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        if(is_16)\n        {\n            this.push16(old_flags);\n            this.push16(this.sreg[reg_cs]);\n            this.push16(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push16(error_code);\n            }\n\n            base &= 0xFFFF;\n        }\n        else\n        {\n            this.push32(old_flags);\n            this.push32(this.sreg[reg_cs]);\n            this.push32(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push32(error_code);\n            }\n        }\n\n        if(old_flags & flag_vm)\n        {\n            this.switch_seg(reg_gs, 0);\n            this.switch_seg(reg_fs, 0);\n            this.switch_seg(reg_ds, 0);\n            this.switch_seg(reg_es, 0);\n        }\n\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n        dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n        this.update_cs_size(info.size);\n\n        this.segment_limits[reg_cs] = info.effective_limit;\n        this.segment_offsets[reg_cs] = info.base;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + base | 0;\n\n        this.flags &= ~flag_nt & ~flag_vm & ~flag_rf & ~flag_trap;\n\n        if(!is_trap)\n        {\n            // clear int flag for interrupt gates\n            this.flags &= ~flag_interrupt;\n        }\n        else\n        {\n            if((this.flags & flag_interrupt) && !(old_flags & flag_interrupt))\n            {\n                if(!this.page_fault[0]) // XXX\n                {\n                    this.handle_irqs();\n                }\n            }\n        }\n    }\n    else\n    {\n        // call 4 byte cs:ip interrupt vector from ivt at cpu.memory 0\n\n        var index = interrupt_nr << 2;\n        var new_ip = this.read16(index);\n        var new_cs = this.read16(index + 2 | 0);\n\n        // push flags, cs:ip\n        this.push16(this.get_eflags());\n        this.push16(this.sreg[reg_cs]);\n        this.push16(this.get_real_eip());\n\n        this.flags &= ~flag_interrupt;\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = this.get_seg(reg_cs) + new_ip | 0;\n    }\n\n    //dbg_log(\"int to:\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n};\n\nCPU.prototype.iret16 = function()\n{\n    this.iret(true);\n};\n\nCPU.prototype.iret32 = function()\n{\n    this.iret(false);\n};\n\nCPU.prototype.iret = function(is_16)\n{\n    //dbg_log(\"iret is_16=\" + is_16, LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" start\");\n    //this.debug.dump_regs();\n\n    if(this.vm86_mode() && this.getiopl() < 3)\n    {\n        // vm86 mode, iopl != 3\n        dbg_log(\"#gp iret vm86 mode, iopl != 3\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(is_16)\n    {\n        var new_eip = this.safe_read16(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(2));\n        var new_flags = this.safe_read16(this.get_stack_pointer(4));\n    }\n    else\n    {\n        var new_eip = this.safe_read32s(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(4));\n        var new_flags = this.safe_read32s(this.get_stack_pointer(8));\n    }\n\n    if(!this.protected_mode || (this.vm86_mode() && this.getiopl() === 3))\n    {\n        if(new_eip & 0xFFFF0000)\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n            this.adjust_stack_reg(3 * 2);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n            this.adjust_stack_reg(3 * 4);\n        }\n\n        //dbg_log(\"iret32 to:\", LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n\n        this.handle_irqs();\n        return;\n    }\n\n    dbg_assert(!this.vm86_mode());\n\n    if(this.flags & flag_nt)\n    {\n        if(DEBUG) throw this.debug.unimpl(\"nt\");\n        this.trigger_gp(0);\n    }\n\n    if(new_flags & flag_vm)\n    {\n        if(this.cpl === 0)\n        {\n            // return to virtual 8086 mode\n\n            // vm86 cannot be set in 16 bit flag\n            dbg_assert(!is_16);\n\n            dbg_assert((new_eip & ~0xFFFF) === 0);\n\n            //dbg_log(\"in vm86 mode now \" +\n            //        \" cs:eip=\" + h(new_cs, 4) + \":\" + h(this.instruction_pointer >>> 0, 8) +\n            //        \" iopl=\" + this.getiopl() + \" flags=\" + h(new_flags, 8), LOG_CPU);\n\n\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n\n            var new_es = this.safe_read16(this.get_stack_pointer(20));\n            var new_ds = this.safe_read16(this.get_stack_pointer(24));\n            var new_fs = this.safe_read16(this.get_stack_pointer(28));\n            var new_gs = this.safe_read16(this.get_stack_pointer(32));\n\n            // no exceptions below\n\n            this.update_eflags(new_flags);\n            this.flags |= flag_vm;\n\n            this.switch_cs_real_mode(new_cs);\n            this.instruction_pointer = (new_eip & 0xFFFF) + this.get_seg(reg_cs) | 0;\n\n            this.switch_seg(reg_es, new_es);\n            this.switch_seg(reg_ds, new_ds);\n            this.switch_seg(reg_fs, new_fs);\n            this.switch_seg(reg_gs, new_gs);\n\n            this.adjust_stack_reg(9 * 4); // 9 dwords: eip, cs, flags, esp, ss, es, ds, fs, gs\n\n            this.reg32s[reg_esp] = temp_esp;\n            this.switch_seg(reg_ss, temp_ss);\n\n            this.cpl = 3;\n            this.cpl_changed();\n\n            this.update_cs_size(false);\n\n            //dbg_log(\"iret32 to:\", LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n            //this.debug.dump_regs();\n\n            return;\n        }\n        else\n        {\n            dbg_log(\"vm86 flag ignored because cpl != 0\", LOG_CPU);\n            new_flags &= ~flag_vm;\n        }\n    }\n\n    // protected mode return\n\n    var info = this.lookup_segment_selector(new_cs);\n\n    dbg_assert(info.is_valid);\n    dbg_assert((new_eip >>> 0) <= info.effective_limit);\n\n    if(info.is_null)\n    {\n        throw this.debug.unimpl(\"is null\");\n    }\n    if(!info.is_present)\n    {\n        throw this.debug.unimpl(\"not present\");\n    }\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"not exec\");\n    }\n    if(info.rpl < this.cpl)\n    {\n        throw this.debug.unimpl(\"rpl < cpl\");\n    }\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        throw this.debug.unimpl(\"conforming and dpl > rpl\");\n    }\n\n    if(!info.dc_bit && info.rpl !== info.dpl)\n    {\n        dbg_log(\"#gp iret: non-conforming cs and rpl != dpl, dpl=\" + info.dpl + \" rpl=\" + info.rpl, LOG_CPU);\n        this.trigger_gp(new_cs & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        // outer privilege return\n        if(is_16)\n        {\n            var temp_esp = this.safe_read16(this.get_stack_pointer(6));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(8));\n        }\n        else\n        {\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n        }\n\n        var ss_info = this.lookup_segment_selector(temp_ss);\n        var new_cpl = info.rpl;\n\n        if(ss_info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!ss_info.is_valid ||\n           ss_info.is_system ||\n           ss_info.rpl !== new_cpl ||\n           !ss_info.is_writable ||\n           ss_info.dpl !== new_cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(temp_ss & ~3);\n        }\n\n        if(!ss_info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(temp_ss & ~3);\n        }\n\n        // no exceptions below\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        //dbg_log(\"outer privilege return: from=\" + this.cpl + \" to=\" + info.rpl + \" ss:esp=\" + h(temp_ss, 4) + \":\" + h(temp_esp >>> 0, 8), LOG_CPU);\n\n        this.switch_seg(reg_ss, temp_ss);\n\n        this.set_stack_reg(temp_esp);\n\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n\n\n        // XXX: Set segment to 0 if it's not usable in the new cpl\n        // XXX: Use cached segment information\n        //var ds_info = this.lookup_segment_selector(this.sreg[reg_ds]);\n        //if(this.cpl > ds_info.dpl && (!ds_info.is_executable || !ds_info.dc_bit)) this.switch_seg(reg_ds, 0);\n        // ...\n    }\n    else if(info.rpl === this.cpl)\n    {\n        // same privilege return\n        // no exceptions below\n        if(is_16)\n        {\n            this.adjust_stack_reg(3 * 2);\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.adjust_stack_reg(3 * 4);\n            this.update_eflags(new_flags);\n        }\n\n        // update vip and vif, which are not changed by update_eflags\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n\n    this.sreg[reg_cs] = new_cs;\n    dbg_assert((new_cs & 3) === this.cpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n\n    this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" end\");\n\n    this.handle_irqs();\n};\n\nCPU.prototype.switch_cs_real_mode = function(selector)\n{\n    dbg_assert(!this.protected_mode || this.vm86_mode());\n\n    this.sreg[reg_cs] = selector;\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_offsets[reg_cs] = selector << 4;\n};\n\nCPU.prototype.far_return = function(eip, selector, stack_adjust)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far return eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4) + \" stack_adjust=\" + h(stack_adjust), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret start\");\n\n    if(!this.protected_mode)\n    {\n        dbg_assert(!this.is_32);\n        //dbg_assert(!this.stack_size_32);\n    }\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        this.adjust_stack_reg(2 * (this.is_osize_32() ? 4 : 2) + stack_adjust);\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(false, \"is system in far return\");\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_executable)\n    {\n        dbg_log(\"non-executable cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.rpl < this.cpl)\n    {\n        dbg_log(\"cs rpl < cpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        dbg_trace(LOG_CPU);\n        this.trigger_np(selector & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        dbg_log(\"far return privilege change cs: \" + h(selector) + \" from=\" + this.cpl + \" to=\" + info.rpl + \" is_16=\" + this.is_osize_32(), LOG_CPU);\n\n        if(this.is_osize_32())\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 8))))\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(stack_adjust + 8));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 12));\n        }\n        else\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 4))));\n            var temp_esp = this.safe_read16(this.get_stack_pointer(stack_adjust + 4));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 6));\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        // XXX: Can raise, conditions should be checked before side effects\n        this.switch_seg(reg_ss, temp_ss);\n        this.set_stack_reg(temp_esp + stack_adjust);\n\n        //if(this.is_osize_32())\n        //{\n        //    this.adjust_stack_reg(2 * 4);\n        //}\n        //else\n        //{\n        //    this.adjust_stack_reg(2 * 2);\n        //}\n\n        //throw this.debug.unimpl(\"privilege change\");\n\n        //this.adjust_stack_reg(stack_adjust);\n    }\n    else\n    {\n        if(this.is_osize_32())\n        {\n            this.adjust_stack_reg(2 * 4 + stack_adjust);\n        }\n        else\n        {\n            this.adjust_stack_reg(2 * 2 + stack_adjust);\n        }\n    }\n\n    //dbg_assert(this.cpl === info.dpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    //this.segment_infos[reg_cs] = 0; // TODO\n\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = selector;\n\n    dbg_assert((selector & 3) === this.cpl);\n\n    this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n\n    //dbg_log(\"far return to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret end\");\n};\n\nCPU.prototype.far_jump = function(eip, selector, is_call)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call]);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"#gp null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"#gp invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(is_call, \"TODO: Jump\");\n\n        dbg_log(\"system type cs: \" + h(selector), LOG_CPU);\n\n        if(info.type === 0xC || info.type === 4)\n        {\n            // call gate\n            var is_16 = info.type === 4;\n\n            if(info.dpl < this.cpl || info.dpl < info.rpl)\n            {\n                dbg_log(\"#gp cs gate dpl < cpl or dpl < rpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n\n            if(!info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in gate cs sel=\" + h(selector, 4), LOG_CPU);\n                this.trigger_np(selector & ~3);\n            }\n\n            var cs_selector = info.raw0 >>> 16;\n            var cs_info = this.lookup_segment_selector(cs_selector);\n\n            if(cs_info.is_null)\n            {\n                dbg_log(\"#gp null cs\", LOG_CPU);\n                this.trigger_gp(0);\n            }\n\n            if(!cs_info.is_valid)\n            {\n                dbg_log(\"#gp invalid cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_executable)\n            {\n                dbg_log(\"#gp non-executable cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(cs_info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp dpl > cpl: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in cs sel=\" + h(cs_selector, 4), LOG_CPU);\n                this.trigger_np(cs_selector & ~3);\n            }\n\n            if(!cs_info.dc_bit && cs_info.dpl < this.cpl)\n            {\n                dbg_log(\"more privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl);\n                var tss_stack_addr = this.get_tss_stack_addr(cs_info.dpl);\n\n                if(this.tss_size_32)\n                {\n                    var new_esp = this.read32s(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 4 | 0);\n                }\n                else\n                {\n                    var new_esp = this.read16(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 2 | 0);\n                }\n                var ss_info = this.lookup_segment_selector(new_ss);\n\n                // Disabled: Incorrect handling of direction bit\n                // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n                //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n                //    debugger;\n                //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n                dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n                if(ss_info.is_null)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.rpl !== cs_info.dpl) // xxx: 0 in v86 mode\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.dpl !== cs_info.dpl || !ss_info.rw_bit)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(!ss_info.is_present)\n                {\n                    throw this.debug.unimpl(\"#SS handler\");\n                }\n\n                var parameter_count = info.raw1 & 0x1F;\n                var stack_space = is_16 ? 4 : 8;\n                if(is_call)\n                {\n                    stack_space += is_16 ? 4 + 2 * parameter_count : 8 + 4 * parameter_count;\n                }\n                if(ss_info.size)\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + new_esp - stack_space | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n                else\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + (new_esp - stack_space & 0xFFFF) | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n\n                var old_esp = this.reg32s[reg_esp];\n                var old_ss = this.sreg[reg_ss];\n                var old_stack_pointer = this.get_stack_pointer(0);\n\n                //dbg_log(\"old_esp=\" + h(old_esp));\n\n                this.cpl = cs_info.dpl;\n                this.cpl_changed();\n\n                this.update_cs_size(cs_info.size);\n\n                this.switch_seg(reg_ss, new_ss);\n                this.set_stack_reg(new_esp);\n\n                //dbg_log(\"parameter_count=\" + parameter_count);\n                //dbg_assert(parameter_count === 0, \"TODO\");\n\n                if(is_16)\n                {\n                    this.push16(old_ss);\n                    this.push16(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n                else\n                {\n                    this.push32(old_ss);\n                    this.push32(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read16(old_stack_pointer + 2 * i);\n                            this.push16(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read32s(old_stack_pointer + 4 * i);\n                            this.push32(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n            else\n            {\n                dbg_log(\"same privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl + \" conforming=\" + cs_info.dc_bit);\n                // ok\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n\n            // Note: eip from call is ignored\n            var new_eip = info.raw0 & 0xFFFF;\n            if(!is_16)\n            {\n                new_eip |= info.raw1 & 0xFFFF0000;\n            }\n\n            dbg_log(\"call gate eip=\" + h(new_eip >>> 0) + \" cs=\" + h(cs_selector) + \" conforming=\" + cs_info.dc_bit);\n            dbg_assert((new_eip >>> 0) <= cs_info.effective_limit, \"todo: #gp\");\n\n            this.update_cs_size(cs_info.size);\n\n            this.segment_is_null[reg_cs] = 0;\n            this.segment_limits[reg_cs] = cs_info.effective_limit;\n            //this.segment_infos[reg_cs] = 0; // TODO\n            this.segment_offsets[reg_cs] = cs_info.base;\n            this.sreg[reg_cs] = cs_selector & ~3 | this.cpl;\n            dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n        }\n        else\n        {\n            var types = { 9: \"Available 386 TSS\", 0xb: \"Busy 386 TSS\", 4: \"286 Call Gate\", 0xc: \"386 Call Gate\" };\n            throw this.debug.unimpl(\"load system segment descriptor, type = \" + (info.access & 15) + \" (\" + types[info.access & 15] + \")\");\n        }\n    }\n    else\n    {\n        if(!info.is_executable)\n        {\n            dbg_log(\"#gp non-executable cs: \" + h(selector), LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(info.dc_bit)\n        {\n            // conforming code segment\n            if(info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp cs dpl > cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n        else\n        {\n            // non-conforming code segment\n\n            if(info.rpl > this.cpl || info.dpl !== this.cpl)\n            {\n                dbg_log(\"#gp cs rpl > cpl or dpl != cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n\n        dbg_assert((eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n\n        this.update_cs_size(info.size);\n\n        this.segment_is_null[reg_cs] = 0;\n        this.segment_limits[reg_cs] = info.effective_limit;\n        //this.segment_infos[reg_cs] = 0; // TODO\n\n        this.segment_offsets[reg_cs] = info.base;\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n    }\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call] + \" end\");\n};\n\nCPU.prototype.get_tss_stack_addr = function(dpl)\n{\n    if(this.tss_size_32)\n    {\n        var tss_stack_addr = (dpl << 3) + 4 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 6);\n    }\n    else\n    {\n        var tss_stack_addr = (dpl << 2) + 2 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 4);\n    }\n\n    if(this.paging)\n    {\n        tss_stack_addr = this.translate_address_system_read(tss_stack_addr);\n    }\n\n    return tss_stack_addr;\n};\n\nCPU.prototype.do_task_switch = function(selector, error_code)\n{\n    dbg_assert(this.tss_size_32, \"TODO\");\n\n    dbg_log(\"do_task_switch sel=\" + h(selector), LOG_CPU);\n    var descriptor = this.lookup_segment_selector(selector);\n\n    dbg_assert((descriptor.type | 2) === 3 || (descriptor.type | 2) === 0xb);\n    var tss_is_16 = descriptor.type <= 3;\n    var tss_is_busy = (descriptor.type & 2) === 2;\n\n    if(!descriptor.is_valid || descriptor.is_null || !descriptor.from_gdt)\n    {\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if((descriptor.access & 31) === 0xB)\n    {\n        // is busy\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!descriptor.is_present)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    if(descriptor.effective_limit < 103)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    var tsr_size = this.segment_limits[reg_tr];\n    var tsr_offset = this.segment_offsets[reg_tr];\n\n    var old_eflags = this.get_eflags();\n\n    if(tss_is_busy)\n    {\n        old_eflags &= ~flag_nt;\n    }\n\n    this.writable_or_pagefault(tsr_offset, 0x66);\n\n    //this.safe_write32(tsr_offset + TSR_CR3, this.cr[3]);\n\n    // TODO: Write 16 bit values if old tss is 16 bit\n    this.safe_write32(tsr_offset + TSR_EIP, this.get_real_eip());\n    this.safe_write32(tsr_offset + TSR_EFLAGS, old_eflags);\n\n    this.safe_write32(tsr_offset + TSR_EAX, this.reg32s[reg_eax]);\n    this.safe_write32(tsr_offset + TSR_ECX, this.reg32s[reg_ecx]);\n    this.safe_write32(tsr_offset + TSR_EDX, this.reg32s[reg_edx]);\n    this.safe_write32(tsr_offset + TSR_EBX, this.reg32s[reg_ebx]);\n\n    this.safe_write32(tsr_offset + TSR_ESP, this.reg32s[reg_esp]);\n    this.safe_write32(tsr_offset + TSR_EBP, this.reg32s[reg_ebp]);\n    this.safe_write32(tsr_offset + TSR_ESI, this.reg32s[reg_esi]);\n    this.safe_write32(tsr_offset + TSR_EDI, this.reg32s[reg_edi]);\n\n    this.safe_write32(tsr_offset + TSR_ES, this.sreg[reg_es]);\n    this.safe_write32(tsr_offset + TSR_CS, this.sreg[reg_cs]);\n    this.safe_write32(tsr_offset + TSR_SS, this.sreg[reg_ss]);\n    this.safe_write32(tsr_offset + TSR_DS, this.sreg[reg_ds]);\n    this.safe_write32(tsr_offset + TSR_FS, this.sreg[reg_fs]);\n    this.safe_write32(tsr_offset + TSR_GS, this.sreg[reg_gs]);\n\n    //this.safe_write32(tsr_offset + TSR_LDT, this.sreg[reg_ldtr]);\n\n    if(true /* is jump or call or int */)\n    {\n        // mark as busy\n        this.write8(descriptor.table_offset + 5 | 0, this.read8(descriptor.table_offset + 5 | 0) | 2);\n    }\n\n    //var new_tsr_size = descriptor.effective_limit;\n    var new_tsr_offset = descriptor.base;\n\n    dbg_assert(!tss_is_16, \"unimplemented\");\n\n    if(true /* is call or int */)\n    {\n        this.safe_write16(new_tsr_offset + TSR_BACKLINK, this.sreg[reg_tr]);\n    }\n\n    var new_cr3 = this.safe_read32s(new_tsr_offset + TSR_CR3);\n\n    this.flags &= ~flag_vm;\n\n    var new_eip = this.safe_read32s(new_tsr_offset + TSR_EIP);\n    var new_cs = this.safe_read16(new_tsr_offset + TSR_CS);\n    var info = this.lookup_segment_selector(new_cs);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.is_system)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = new_cs;\n\n    this.cpl = info.dpl;\n    this.cpl_changed();\n\n    dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n    dbg_assert((new_eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n    this.update_cs_size(info.size);\n\n    var new_eflags = this.safe_read32s(new_tsr_offset + TSR_EFLAGS);\n\n    if(true /* is call or int */)\n    {\n        this.safe_write32(tsr_offset + TSR_BACKLINK, selector);\n        new_eflags |= flag_nt;\n    }\n\n    if(new_eflags & flag_vm)\n    {\n        throw this.debug.unimpl(\"task switch to VM mode\");\n    }\n\n    this.update_eflags(new_eflags);\n\n    if(true /* call or int */)\n    {\n        this.flags |= flag_nt;\n    }\n\n    var new_ldt = this.safe_read16(new_tsr_offset + TSR_LDT);\n    this.load_ldt(new_ldt);\n\n    this.reg32s[reg_eax] = this.safe_read32s(new_tsr_offset + TSR_EAX);\n    this.reg32s[reg_ecx] = this.safe_read32s(new_tsr_offset + TSR_ECX);\n    this.reg32s[reg_edx] = this.safe_read32s(new_tsr_offset + TSR_EDX);\n    this.reg32s[reg_ebx] = this.safe_read32s(new_tsr_offset + TSR_EBX);\n\n    this.reg32s[reg_esp] = this.safe_read32s(new_tsr_offset + TSR_ESP);\n    this.reg32s[reg_ebp] = this.safe_read32s(new_tsr_offset + TSR_EBP);\n    this.reg32s[reg_esi] = this.safe_read32s(new_tsr_offset + TSR_ESI);\n    this.reg32s[reg_edi] = this.safe_read32s(new_tsr_offset + TSR_EDI);\n\n    this.switch_seg(reg_es, this.safe_read16(new_tsr_offset + TSR_ES));\n    this.switch_seg(reg_ss, this.safe_read16(new_tsr_offset + TSR_SS));\n    this.switch_seg(reg_ds, this.safe_read16(new_tsr_offset + TSR_DS));\n    this.switch_seg(reg_fs, this.safe_read16(new_tsr_offset + TSR_FS));\n    this.switch_seg(reg_gs, this.safe_read16(new_tsr_offset + TSR_GS));\n\n    this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n\n    this.segment_offsets[reg_tr] = descriptor.base;\n    this.segment_limits[reg_tr] = descriptor.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    this.cr[3] = new_cr3;\n    dbg_assert((this.cr[3] & 0xFFF) === 0);\n    this.clear_tlb();\n\n    this.cr[0] |= CR0_TS;\n\n    if(error_code !== false)\n    {\n        if(tss_is_16)\n        {\n            this.push16(error_code & 0xFFFF);\n        }\n        else\n        {\n            this.push32(error_code);\n        }\n    }\n};\n\nCPU.prototype.hlt_op = function()\n{\n    if(this.cpl)\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.flags & flag_interrupt) === 0)\n    {\n        this.debug.show(\"cpu halted\");\n        this.bus.send(\"cpu-event-halt\");\n        if(DEBUG) this.debug.dump_regs();\n        throw \"HALT\";\n    }\n    else\n    {\n        // get out of here and into hlt_loop\n        this.in_hlt = true;\n\n        //if(false) // possibly unsafe, test in safari\n        //{\n        //    this.hlt_loop();\n        //    this.diverged();\n        //    if(this.in_hlt)\n        //    {\n        //        throw MAGIC_CPU_EXCEPTION;\n        //    }\n        //}\n        //else\n        {\n            throw MAGIC_CPU_EXCEPTION;\n        }\n    }\n};\n\n// assumes ip to point to the byte before the next instruction\nCPU.prototype.raise_exception = function(interrupt_nr)\n{\n    //if(DEBUG && interrupt_nr !== 7)\n    //{\n    //    // show interesting exceptions\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //    this.debug.dump_state();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, false);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.raise_exception_with_code = function(interrupt_nr, error_code)\n{\n    dbg_assert(typeof error_code === \"number\");\n\n    //if(DEBUG)\n    //{\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" err=\" + h(error_code) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, error_code);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.trigger_de = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(0);\n};\n\nCPU.prototype.trigger_ud = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(6);\n};\n\nCPU.prototype.trigger_nm = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(7);\n};\n\nCPU.prototype.trigger_ts = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(10, code);\n};\n\nCPU.prototype.trigger_gp = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(13, code);\n};\n\nCPU.prototype.trigger_np = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(11, code);\n};\n\nCPU.prototype.trigger_ss = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(12, code);\n};\n\n// used before fpu instructions\nCPU.prototype.task_switch_test = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        this.trigger_nm();\n    }\n};\n\n// used before mmx instructions\nCPU.prototype.task_switch_test_mmx = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        if(this.cr[0] & CR0_TS)\n        {\n            this.trigger_nm();\n        }\n        else\n        {\n            this.trigger_ud();\n        }\n    }\n\n};\n\nCPU.prototype.todo = function()\n{\n    if(DEBUG)\n    {\n        dbg_trace();\n        throw \"TODO\";\n    }\n\n    this.trigger_ud();\n};\n\nCPU.prototype.undefined_instruction = function()\n{\n    dbg_assert(false, \"Possible fault: undefined instruction\");\n    this.trigger_ud();\n};\n\nCPU.prototype.unimplemented_sse = function()\n{\n    dbg_log(\"No SSE\", LOG_CPU);\n    dbg_assert(false);\n    this.trigger_ud();\n};\n\nCPU.prototype.get_seg_prefix_ds = function()\n{\n    return this.get_seg_prefix(reg_ds);\n};\n\nCPU.prototype.get_seg_prefix_ss = function()\n{\n    return this.get_seg_prefix(reg_ss);\n};\n\nCPU.prototype.get_seg_prefix_cs = function()\n{\n    return this.get_seg_prefix(reg_cs);\n};\n\n/**\n * Get segment base by prefix or default\n * @param {number} default_segment\n */\nCPU.prototype.get_seg_prefix = function(default_segment /*, offset*/)\n{\n    var prefix = this.prefixes & PREFIX_MASK_SEGMENT;\n\n    if(prefix)\n    {\n        if(prefix === SEG_PREFIX_ZERO)\n        {\n            return 0;\n        }\n        else\n        {\n            return this.get_seg(prefix - 1 /*, offset*/);\n        }\n    }\n    else\n    {\n        return this.get_seg(default_segment /*, offset*/);\n    }\n};\n\n/**\n * Get segment base\n * @param {number} segment\n */\nCPU.prototype.get_seg = function(segment /*, offset*/)\n{\n    dbg_assert(segment >= 0 && segment < 8);\n\n    if(this.protected_mode)\n    {\n        if(this.segment_is_null[segment])\n        {\n            dbg_assert(segment !== reg_cs && segment !== reg_ss);\n            dbg_trace();\n            dbg_log(\"#gp Use null segment: \" + segment + \" sel=\" + h(this.sreg[segment], 4), LOG_CPU);\n\n            this.trigger_gp(0);\n        }\n\n        // TODO:\n        // - validate segment limits\n        // - validate if segment is writable\n    }\n\n    return this.segment_offsets[segment];\n};\n\nCPU.prototype.read_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read8(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.read_e8s = function()\n{\n    return this.read_e8() << 24 >> 24;\n};\n\nCPU.prototype.read_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read16(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.read_e16s = function()\n{\n    return this.read_e16() << 16 >> 16;\n};\n\nCPU.prototype.read_e32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.read_e32 = function()\n{\n    return this.read_e32s() >>> 0;\n};\n\nCPU.prototype.read_mmx_mem32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        // Returning lower dword of qword\n        return this.reg_mmxs[2 * (this.modrm_byte & 7)];\n    }\n};\n\nCPU.prototype.read_mmx_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.create_atom64s(\n            this.reg_mmxs[2 * (this.modrm_byte & 7)],\n            this.reg_mmxs[2 * (this.modrm_byte & 7) + 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom64s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_aligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s_unaligned = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_unaligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.set_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write8(addr, value);\n    } else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.set_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write16(addr, value);\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.set_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write32(addr, value);\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.set_mmx_mem64s = function(low, high)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write64(addr, low, high);\n    } else {\n        this.reg_mmxs[2 * (this.modrm_byte & 7)] = low;\n        this.reg_mmxs[2 * (this.modrm_byte & 7) + 1] = high;\n    }\n};\n\nCPU.prototype.read_write_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        return this.read8(this.phys_addr);\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.write_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        this.write8(this.phys_addr, value);\n    }\n    else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.read_write_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) === 0xFFF) {\n            this.phys_addr_high = this.translate_address_write(virt_addr + 1 | 0);\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read16(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read16(this.phys_addr);\n        }\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.write_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write16(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write16(this.phys_addr, value);\n        }\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.read_write_e32 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) >= 0xFFD) {\n            //this.phys_addr_high = this.translate_address_write(virt_addr + 3 | 0);\n            this.phys_addr_high = this.translate_address_write(virt_addr + 3 & ~3) | (virt_addr + 3) & 3;\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read32s(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read32s(this.phys_addr);\n        }\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.write_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write32(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write32(this.phys_addr, value);\n        }\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.read_reg_e16 = function()\n{\n    return this.reg16[this.modrm_byte << 1 & 14];\n};\n\nCPU.prototype.write_reg_e16 = function(value)\n{\n    this.reg16[this.modrm_byte << 1 & 14] = value;\n};\n\nCPU.prototype.read_reg_e32s = function()\n{\n    return this.reg32s[this.modrm_byte & 7];\n};\n\nCPU.prototype.write_reg_e32 = function(value)\n{\n    this.reg32s[this.modrm_byte & 7] = value;\n};\n\nCPU.prototype.read_g8 = function()\n{\n    return this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1];\n};\n\nCPU.prototype.write_g8 = function(value)\n{\n    this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1] = value;\n};\n\nCPU.prototype.read_g16 = function()\n{\n    return this.reg16[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.read_g16s = function()\n{\n    return this.reg16s[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.write_g16 = function(value)\n{\n    this.reg16[this.modrm_byte >> 2 & 14] = value;\n};\n\nCPU.prototype.read_g32s = function()\n{\n    return this.reg32s[this.modrm_byte >> 3 & 7];\n};\n\nCPU.prototype.write_g32 = function(value)\n{\n    this.reg32[this.modrm_byte >> 3 & 7] = value;\n};\n\nCPU.prototype.read_xmm64s = function()\n{\n    return this.create_atom64s(\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2],\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2 | 1]\n    );\n};\n\nCPU.prototype.read_xmm128s = function()\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    return this.create_atom128s(\n        this.reg_xmm32s[i | 0],\n        this.reg_xmm32s[i | 1],\n        this.reg_xmm32s[i | 2],\n        this.reg_xmm32s[i | 3]\n    );\n};\n\nCPU.prototype.read_mmx64s = function()\n{\n    return this.create_atom64s(\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)],\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1]\n    );\n};\n\nCPU.prototype.write_mmx64s = function(low, high)\n{\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)] = low;\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1] = high;\n};\n\nCPU.prototype.write_xmm64 = function(low, high)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = low;\n    this.reg_xmm32s[i + 1] = high;\n};\n\nCPU.prototype.write_xmm128s = function(d0, d1, d2, d3)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = d0;\n    this.reg_xmm32s[i + 1] = d1;\n    this.reg_xmm32s[i + 2] = d2;\n    this.reg_xmm32s[i + 3] = d3;\n};\n\nCPU.prototype.pic_call_irq = function(int)\n{\n    try\n    {\n        this.previous_ip = this.instruction_pointer;\n        this.call_interrupt_vector(int, false, false);\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.handle_irqs = function()\n{\n    dbg_assert(!this.page_fault);\n\n    this.diverged();\n\n    if((this.flags & flag_interrupt) && !this.page_fault)\n    {\n        if(this.devices.pic)\n        {\n            this.devices.pic.acknowledge_irq();\n        }\n\n        if(this.devices.apic)\n        {\n            this.devices.apic.acknowledge_irq();\n        }\n    }\n};\n\nCPU.prototype.device_raise_irq = function(i)\n{\n    dbg_assert(arguments.length === 1);\n    if(this.devices.pic)\n    {\n        this.devices.pic.set_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.set_irq(i);\n    }\n};\n\nCPU.prototype.device_lower_irq = function(i)\n{\n    if(this.devices.pic)\n    {\n        this.devices.pic.clear_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.clear_irq(i);\n    }\n};\n\nCPU.prototype.test_privileges_for_io = function(port, size)\n{\n    if(this.protected_mode && (this.cpl > this.getiopl() || (this.flags & flag_vm)))\n    {\n        if(!this.tss_size_32)\n        {\n            dbg_log(\"#GP for port io, 16-bit TSS  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state();\n            this.trigger_gp(0);\n        }\n\n        var tsr_size = this.segment_limits[reg_tr];\n        var tsr_offset = this.segment_offsets[reg_tr];\n\n        if(tsr_size >= 0x67)\n        {\n            dbg_assert((tsr_offset + 0x64 + 2 & 0xFFF) < 0xFFF);\n\n            var iomap_base = this.read16(this.translate_address_system_read(tsr_offset + 0x64 + 2 | 0)),\n                high_port = port + size - 1 | 0;\n\n            if(tsr_size >= (iomap_base + (high_port >> 3) | 0))\n            {\n                var mask = ((1 << size) - 1) << (port & 7),\n                    addr = this.translate_address_system_read(tsr_offset + iomap_base + (port >> 3) | 0),\n                    port_info = (mask & 0xFF00) ?\n                        this.read16(addr) : this.read8(addr);\n\n                dbg_assert((addr & 0xFFF) < 0xFFF);\n\n                if(!(port_info & mask))\n                {\n                    return;\n                }\n            }\n        }\n\n        dbg_log(\"#GP for port io  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state();\n        this.trigger_gp(0);\n    }\n};\n\nCPU.prototype.cpuid = function()\n{\n    // cpuid\n    // TODO: Fill in with less bogus values\n\n    // http://lxr.linux.no/linux+%2a/arch/x86/include/asm/cpufeature.h\n    // http://www.sandpile.org/x86/cpuid.htm\n\n    var eax = 0;\n    var ecx = 0;\n    var edx = 0;\n    var ebx = 0;\n\n    var winnt_fix = false;\n\n    switch(this.reg32s[reg_eax])\n    {\n        case 0:\n            // maximum supported level\n            if(winnt_fix)\n            {\n                eax = 2;\n            }\n            else\n            {\n                eax = 5;\n            }\n\n            ebx = 0x756E6547|0; // Genu\n            edx = 0x49656E69|0; // ineI\n            ecx = 0x6C65746E|0; // ntel\n            break;\n\n        case 1:\n            // pentium\n            eax = 3 | 6 << 4 | 15 << 8;\n            ebx = 1 << 16 | 8 << 8; // cpu count, clflush size\n            ecx = 1 << 23 | 1 << 30; // popcnt, rdrand\n            var vme = 0 << 1;\n            if(VMWARE_HYPERVISOR_PORT) ecx |= 1 << 31; // hypervisor\n            edx = (this.fpu ? 1 : 0) |                // fpu\n                    vme | 1 << 3 | 1 << 4 | 1 << 5 |   // vme, pse, tsc, msr\n                    1 << 8 | 1 << 11 | 1 << 13 | 1 << 15 | // cx8, sep, pge, cmov\n                    0 << 23 | 0 << 24 | 0 << 25 | 0 << 26;   // mmx, fxsr, sse, sse2\n\n            if(ENABLE_ACPI && this.apic_enabled)\n            {\n                edx |= 1 << 9; // apic\n            }\n            break;\n\n        case 2:\n            // Taken from http://siyobik.info.gf/main/reference/instruction/CPUID\n            eax = 0x665B5001|0;\n            ebx = 0;\n            ecx = 0;\n            edx = 0x007A7000;\n            break;\n\n        case 4:\n            // from my local machine\n            switch(this.reg32s[reg_ecx])\n            {\n                case 0:\n                    eax = 0x00000121;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 1:\n                    eax = 0x00000122;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 2:\n                    eax = 0x00000143;\n                    ebx = 0x05c0003f;\n                    ecx = 0x00000fff;\n                    edx = 0x00000001;\n                    break;\n            }\n            break;\n\n        case 5:\n            // from my local machine\n            eax = 0x40;\n            ebx = 0x40;\n            ecx = 3;\n            edx = 0x00142120;\n            break;\n\n        case 0x80000000|0:\n            // maximum supported extended level\n            eax = 5;\n            // other registers are reserved\n            break;\n\n        case 0x40000000|0: // hypervisor\n            if(VMWARE_HYPERVISOR_PORT)\n            {\n                // h(\"Ware\".split(\"\").reduce((a, c, i) => a | c.charCodeAt(0) << i * 8, 0))\n                ebx = 0x61774D56|0; // VMwa\n                ecx = 0x4D566572|0; // reVM\n                edx = 0x65726177|0; // ware\n            }\n            break;\n\n        default:\n            dbg_log(\"cpuid: unimplemented eax: \" + h(this.reg32[reg_eax]), LOG_CPU);\n    }\n\n    dbg_log(\"cpuid: eax=\" + h(this.reg32[reg_eax], 8) + \" cl=\" + h(this.reg8[reg_cl], 2), LOG_CPU);\n\n    this.reg32s[reg_eax] = eax;\n    this.reg32s[reg_ecx] = ecx;\n    this.reg32s[reg_edx] = edx;\n    this.reg32s[reg_ebx] = ebx;\n};\n\nCPU.prototype.update_cs_size = function(new_size)\n{\n    dbg_assert(typeof new_size === \"boolean\");\n\n    if(this.is_32 !== new_size)\n    {\n        this.clear_instruction_cache();\n        this.is_32 = new_size;\n        this.update_operand_size();\n    }\n};\n\nCPU.prototype.update_operand_size = function()\n{\n    if(this.is_32)\n    {\n        this.table = this.table32;\n    }\n    else\n    {\n        this.table = this.table16;\n    }\n};\n\n/**\n * @param {number} selector\n */\nCPU.prototype.lookup_segment_selector = function(selector)\n{\n    dbg_assert(typeof selector === \"number\" && selector >= 0 && selector < 0x10000);\n\n    var is_gdt = (selector & 4) === 0,\n        selector_offset = selector & ~7,\n        info,\n        table_offset,\n        table_limit;\n\n    info = {\n        rpl: selector & 3,\n        from_gdt: is_gdt,\n        is_null: false,\n        is_valid: true,\n\n        base: 0,\n        access: 0,\n        flags: 0,\n        type: 0,\n        dpl: 0,\n        is_system: false,\n        is_present: false,\n        is_executable: false,\n        rw_bit: false,\n        dc_bit: false,\n        size: false,\n\n        is_conforming_executable: false,\n\n        // limit after applying granularity\n        effective_limit: 0,\n\n        is_writable: false,\n        is_readable: false,\n        table_offset: 0,\n\n        raw0: 0,\n        raw1: 0,\n    };\n\n    if(is_gdt)\n    {\n        table_offset = this.gdtr_offset;\n        table_limit = this.gdtr_size;\n    }\n    else\n    {\n        table_offset = this.segment_offsets[reg_ldtr];\n        table_limit = this.segment_limits[reg_ldtr];\n    }\n\n    if(is_gdt && selector_offset === 0)\n    {\n        info.is_null = true;\n        return info;\n    }\n\n    // limit is the number of entries in the table minus one\n    if((selector | 7) > table_limit)\n    {\n        dbg_log(\"Selector \" + h(selector, 4) + \" is outside of the \" +\n            (is_gdt ? \"g\" : \"l\") + \"dt limits\", LOG_CPU);\n        info.is_valid = false;\n        return info;\n    }\n\n    table_offset = table_offset + selector_offset | 0;\n\n    if(this.paging)\n    {\n        table_offset = this.translate_address_system_read(table_offset);\n    }\n    info.table_offset = table_offset;\n\n    info.base = this.read16(table_offset + 2 | 0) | this.read8(table_offset + 4 | 0) << 16 |\n                this.read8(table_offset + 7 | 0) << 24;\n    info.access = this.read8(table_offset + 5 | 0);\n    info.flags = this.read8(table_offset + 6 | 0) >> 4;\n\n    info.raw0 = this.read32s(table_offset     | 0);\n    info.raw1 = this.read32s(table_offset + 4 | 0);\n\n    //this.write8(table_offset + 5 | 0, info.access | 1);\n\n    // used if system\n    info.type = info.access & 0xF;\n\n    info.dpl = info.access >> 5 & 3;\n\n    info.is_system = (info.access & 0x10) === 0;\n    info.is_present = (info.access & 0x80) === 0x80;\n    info.is_executable = (info.access & 8) === 8;\n\n    info.rw_bit = (info.access & 2) === 2;\n    info.dc_bit = (info.access & 4) === 4;\n\n    info.is_conforming_executable = info.dc_bit && info.is_executable;\n\n    info.size = (info.flags & 4) === 4;\n\n    var limit = this.read16(table_offset) |\n                (this.read8(table_offset + 6 | 0) & 0xF) << 16;\n\n    if(info.flags & 8)\n    {\n        // granularity set\n        info.effective_limit = (limit << 12 | 0xFFF) >>> 0;\n    }\n    else\n    {\n        info.effective_limit = limit;\n    }\n\n    info.is_writable = info.rw_bit && !info.is_executable;\n    info.is_readable = info.rw_bit || !info.is_executable;\n\n    return info;\n};\n\n/**\n * @param {number} reg\n * @param {number} selector\n */\nCPU.prototype.switch_seg = function(reg, selector)\n{\n    dbg_assert(reg >= 0 && reg <= 5);\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.sreg[reg] = selector;\n        this.segment_is_null[reg] = 0;\n        this.segment_offsets[reg] = selector << 4;\n\n        if(reg === reg_ss)\n        {\n            this.stack_size_32 = false;\n        }\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(reg === reg_ss)\n    {\n        if(info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           info.rpl !== this.cpl ||\n           !info.is_writable ||\n           info.dpl !== this.cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(selector & ~3);\n        }\n\n        this.stack_size_32 = info.size;\n    }\n    else if(reg === reg_cs)\n    {\n        // handled by switch_cs_real_mode, far_return or far_jump\n        dbg_assert(false);\n    }\n    else\n    {\n        // es, ds, fs, gs\n        if(info.is_null)\n        {\n            //dbg_log(\"0 loaded in seg=\" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            //dbg_trace(LOG_CPU);\n            this.sreg[reg] = selector;\n            this.segment_is_null[reg] = 1;\n            return;\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           !info.is_readable ||\n           (!info.is_conforming_executable &&\n            (info.rpl > info.dpl || this.cpl > info.dpl))\n        ) {\n            dbg_log(\"#GP for loading invalid in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            this.debug.dump_state();\n            this.debug.dump_regs();\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n    }\n\n    this.segment_is_null[reg] = 0;\n    this.segment_limits[reg] = info.effective_limit;\n    //this.segment_infos[reg] = 0; // TODO\n\n    this.segment_offsets[reg] = info.base;\n    this.sreg[reg] = selector;\n};\n\nCPU.prototype.load_tr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    dbg_assert(info.is_valid);\n    //dbg_log(\"load tr: \" + h(selector, 4) + \" offset=\" + h(info.base >>> 0, 8) + \" limit=\" + h(info.effective_limit >>> 0, 8), LOG_CPU);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"TR can only be loaded from GDT\");\n    }\n\n    if(info.is_null)\n    {\n        dbg_log(\"#GP(0) | tried to load null selector (ltr)\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"#GP | ltr: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler (happens when running kvm-unit-test without ACPI)\");\n    }\n\n    if(info.type !== 9 && info.type !== 1)\n    {\n        // 0xB: busy 386 TSS (GP)\n        // 0x9: 386 TSS\n        // 0x3: busy 286 TSS (GP)\n        // 0x1: 286 TSS (??)\n        dbg_log(\"#GP | ltr: invalid type (type = \" + h(info.type) + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NT | present bit not set (ltr)\");\n        throw this.debug.unimpl(\"#NT handler\");\n    }\n\n    this.tss_size_32 = info.type === 9;\n    this.segment_offsets[reg_tr] = info.base;\n    this.segment_limits[reg_tr] = info.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    // Mark task as busy\n    this.write8(info.table_offset + 5 | 0, this.read8(info.table_offset + 5 | 0) | 2);\n\n    //dbg_log(\"tsr at \" + h(info.base) + \"; (\" + info.effective_limit + \" bytes)\");\n};\n\nCPU.prototype.load_ldt = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        // invalid\n        this.segment_offsets[reg_ldtr] = 0;\n        this.segment_limits[reg_ldtr] = 0;\n        return;\n    }\n\n    dbg_assert(info.is_valid);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"LDTR can only be loaded from GDT\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"lldt: present bit not set\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"lldt: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(info.type !== 2)\n    {\n        dbg_log(\"lldt: invalid type (\" + info.type + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.segment_offsets[reg_ldtr] = info.base;\n    this.segment_limits[reg_ldtr] = info.effective_limit;\n    this.sreg[reg_ldtr] = selector;\n\n    //dbg_log(\"ldt at \" + h(info.base >>> 0) + \"; (\" + info.effective_limit + \" bytes)\", LOG_CPU);\n};\n\nCPU.prototype.arpl = function(seg, r16)\n{\n    this.flags_changed &= ~flag_zero;\n\n    if((seg & 3) < (this.reg16[r16] & 3))\n    {\n        this.flags |= flag_zero;\n        return seg & ~3 | this.reg16[r16] & 3;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return seg;\n    }\n};\n\nCPU.prototype.lar = function(selector, original)\n{\n    dbg_log(\"lar sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LAR_INVALID_TYPE = 1 << 0 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 0xA |\n                           1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LAR_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lar: invalid selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.raw1 & 0x00FFFF00;\n    }\n};\n\nCPU.prototype.lsl = function(selector, original)\n{\n    dbg_log(\"lsl sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LSL_INVALID_TYPE = 1 << 0 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 8 |\n                           1 << 0xA | 1 << 0xC | 1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LSL_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lsl: invalid  selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.effective_limit | 0;\n    }\n\n};\n\nCPU.prototype.verr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_readable ||\n       (!info.is_conforming_executable && (info.dpl < this.cpl || info.dpl < info.rpl)))\n    {\n        dbg_log(\"verr -> invalid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verr -> valid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.verw = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_writable ||\n       info.dpl < this.cpl || info.dpl < info.rpl)\n    {\n        dbg_log(\"verw invalid \" + \" \" + h(selector) + \" \" + info.is_null + \" \" +\n                !info.is_valid + \" \" + info.is_system + \" \" + !info.is_writable + \" \" +\n                (info.dpl < this.cpl) + \" \" + (info.dpl < info.rpl) + \" \" + LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verw valid\", LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.clear_tlb = function()\n{\n    // clear tlb excluding global pages\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.tlb_info.set(this.tlb_info_global);\n\n    //dbg_log(\"page table loaded\", LOG_CPU);\n};\n\nCPU.prototype.full_clear_tlb = function()\n{\n    //dbg_log(\"TLB full clear\", LOG_CPU);\n\n    // clear tlb including global pages\n    var buf32 = new Int32Array(this.tlb_info_global.buffer);\n    for(var i = 0; i < (1 << 18); )\n    {\n        buf32[i++] = buf32[i++] = buf32[i++] = buf32[i++] = 0;\n    }\n\n    this.clear_tlb();\n};\n\nCPU.prototype.invlpg = function(addr)\n{\n    var page = addr >>> 12;\n    //dbg_log(\"invlpg: addr=\" + h(addr >>> 0), LOG_CPU);\n\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.translate_address_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_read(addr);\n    }\n    else\n    {\n        return this.translate_address_system_read(addr);\n    }\n};\n\nCPU.prototype.translate_address_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_write(addr);\n    }\n    else\n    {\n        return this.translate_address_system_write(addr);\n    }\n};\n\nCPU.prototype.translate_address_user_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_user_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 0) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 0) | addr & 0xFFF;\n    }\n};\n\n/**\n * @return {number}\n */\nCPU.prototype.do_page_translation = function(addr, for_writing, user)\n{\n    var page = addr >>> 12,\n        page_dir_addr = (this.cr[3] >>> 2) + (page >> 10) | 0,\n        page_dir_entry = this.mem32s[page_dir_addr],\n        high,\n        can_write = true,\n        global,\n        cachable = true,\n        allow_user = true;\n\n    dbg_assert(addr < 0x80000000);\n\n    if(!(page_dir_entry & 1))\n    {\n        // to do at this place:\n        //\n        // - set cr2 = addr (which caused the page fault)\n        // - call_interrupt_vector  with id 14, error code 0-7 (requires information if read or write)\n        // - prevent execution of the function that triggered this call\n        //dbg_log(\"#PF not present\", LOG_CPU);\n\n        this.cr[2] = addr;\n        this.trigger_pagefault(for_writing, user, 0);\n\n        // never reached as this.trigger_pagefault throws up\n        dbg_assert(false);\n    }\n\n    if((page_dir_entry & 2) === 0)\n    {\n        can_write = false;\n\n        if(for_writing && (user || (this.cr[0] & CR0_WP)))\n        {\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if((page_dir_entry & 4) === 0)\n    {\n        allow_user = false;\n\n        if(user)\n        {\n            // \"Page Fault: page table accessed by non-supervisor\";\n            //dbg_log(\"#PF supervisor\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if(page_dir_entry & this.page_size_extensions)\n    {\n        // size bit is set\n\n        // set the accessed and dirty bits\n        this.mem32s[page_dir_addr] = page_dir_entry | 0x20 | for_writing << 6;\n\n        high = (page_dir_entry & 0xFFC00000) | (addr & 0x3FF000);\n        global = page_dir_entry & 0x100;\n    }\n    else\n    {\n        var page_table_addr = ((page_dir_entry & 0xFFFFF000) >>> 2) + (page & 0x3FF) | 0,\n            page_table_entry = this.mem32s[page_table_addr];\n\n        if((page_table_entry & 1) === 0)\n        {\n            //dbg_log(\"#PF not present table\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 0);\n            dbg_assert(false);\n        }\n\n        if((page_table_entry & 2) === 0)\n        {\n            can_write = false;\n\n            if(for_writing && (user || (this.cr[0] & CR0_WP)))\n            {\n                //dbg_log(\"#PF not writable page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        if((page_table_entry & 4) === 0)\n        {\n            allow_user = false;\n\n            if(user)\n            {\n                //dbg_log(\"#PF not supervisor page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        // set the accessed and dirty bits\n        this.write_aligned32(page_dir_addr, page_dir_entry | 0x20);\n        this.write_aligned32(page_table_addr, page_table_entry | 0x20 | for_writing << 6);\n\n        high = page_table_entry & 0xFFFFF000;\n        global = page_table_entry & 0x100;\n    }\n\n    this.tlb_data[page] = high ^ page << 12;\n\n    var allowed_flag;\n\n    if(allow_user)\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE | TLB_USER_READ | TLB_USER_WRITE;\n        }\n        else\n        {\n            // TODO: Consider if cr0.wp is not set\n            allowed_flag = TLB_SYSTEM_READ | TLB_USER_READ;\n        }\n    }\n    else\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE;\n        }\n        else\n        {\n            allowed_flag = TLB_SYSTEM_READ;\n        }\n    }\n\n    this.tlb_info[page] = allowed_flag;\n\n    if(global && (this.cr[4] & CR4_PGE))\n    {\n        this.tlb_info_global[page] = allowed_flag;\n    }\n\n    return high;\n};\n\nCPU.prototype.writable_or_pagefault = function(addr, size)\n{\n    dbg_assert(size < 0x1000, \"not supported yet\");\n    dbg_assert(size > 0);\n\n    if(!this.paging)\n    {\n        return;\n    }\n\n    var user = this.cpl === 3 ? 1 : 0,\n        mask = user ? TLB_USER_WRITE : TLB_SYSTEM_WRITE,\n        page = addr >>> 12;\n\n    if((this.tlb_info[page] & mask) === 0)\n    {\n        this.do_page_translation(addr, 1, user);\n    }\n\n    if((addr & 0xFFF) + size - 1 >= 0x1000)\n    {\n        if((this.tlb_info[page + 1 | 0] & mask) === 0)\n        {\n            this.do_page_translation(addr + size - 1 | 0, 1, user);\n        }\n    }\n};\n\nCPU.prototype.trigger_pagefault = function(write, user, present)\n{\n    if(LOG_PAGE_FAULTS)\n    {\n        dbg_log(\"page fault w=\" + write + \" u=\" + user + \" p=\" + present +\n                \" eip=\" + h(this.previous_ip >>> 0, 8) +\n                \" cr2=\" + h(this.cr[2] >>> 0, 8), LOG_CPU);\n        dbg_trace(LOG_CPU);\n    }\n\n    if(this.page_fault)\n    {\n        dbg_trace(LOG_CPU);\n        throw this.debug.unimpl(\"Double fault\");\n    }\n\n    // invalidate tlb entry\n    var page = this.cr[2] >>> 12;\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.instruction_pointer = this.previous_ip;\n    this.page_fault = true;\n    this.call_interrupt_vector(14, false, user << 2 | write << 1 | present);\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.is_osize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_OPSIZE) === PREFIX_MASK_OPSIZE);\n};\n\nCPU.prototype.is_asize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_ADDRSIZE) === PREFIX_MASK_ADDRSIZE);\n};\n\nCPU.prototype.get_reg_asize = function(reg)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    var r = this.reg32s[reg];\n\n    if(this.is_asize_32())\n    {\n        return r;\n    }\n    else\n    {\n        return r & 0xFFFF;\n    }\n};\n\nCPU.prototype.set_ecx_asize = function(value)\n{\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg_ecx] = value;\n    }\n    else\n    {\n        this.reg16[reg_cx] = value;\n    }\n};\n\nCPU.prototype.add_reg_asize = function(reg, value)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg] += value;\n    }\n    else\n    {\n        this.reg16[reg << 1] += value;\n    }\n};\n\nCPU.prototype.decr_ecx_asize = function()\n{\n    return this.is_asize_32() ? --this.reg32s[reg_ecx] : --this.reg16[reg_cx];\n};\n\nCPU.prototype.invalid_arithmatic = function()\n{\n    this.mxcsr |= CPU_EX_I;\n};\n\nCPU.prototype.is_SNaN32 = function(value)\n{\n    let exponent = (value >>> 23) & 0xFF;\n    let most_significand = (value >>> 22) & 1;\n    let less_significand = (value >>> 0) & 0x3FFFFF;\n\n    return exponent === 0xFF && most_significand === 0 && less_significand > 0;\n};\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"CPU\"] = CPU;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"CPU\"] = CPU;\n}\nelse if(typeof importScripts === \"function\")\n{\n    self[\"CPU\"] = CPU;\n}\n","/** @constructor */\nfunction DynamicTranslator(something)\n{\n    // TODO\n    dbg_assert(false);\n\n    this.clear_cache = function() {};\n    this.cycle_translated = function() {};\n}\n","/**\n * This file contains functions to decode the modrm and sib bytes\n *\n * These functions return a virtual address\n *\n * @fileoverview .\n * @suppress {newCheckTypes}\n */\n\"use strict\";\n(function()\n{\n    CPU.prototype.modrm_table16 = Array(0xC0);\n    CPU.prototype.modrm_table32 = Array(0xC0);\n    CPU.prototype.sib_table = Array(0x100);\n    CPU.prototype.modrm_table16[0x00 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp32s() | 0;\n    };;\n    // special cases\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp16() | 0;\n    }\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp32s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(false) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp32s() | 0;\n    };\n    for(var low = 0; low < 8; low++)\n    {\n        for(var high = 0; high < 3; high++)\n        {\n            var x = low | high << 6;\n            for(var i = 1; i < 8; i++)\n            {\n                CPU.prototype.modrm_table32[x | i << 3] = CPU.prototype.modrm_table32[x];\n                CPU.prototype.modrm_table16[x | i << 3] = CPU.prototype.modrm_table16[x];\n            }\n        }\n    }\n\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n})();\n","\"use strict\";\n\n/*\n * string operations\n *\n *       cmp  si  di\n * movs   0    1   1/w    A4\n * cmps   1    1   1/r    A6\n * stos   0    0   1/w    AA\n * lods   0    1   0      AC\n * scas   1    0   1/r    AE\n * ins    0    0   1/w\n * outs   0    1   0\n */\n\n/** @const */\nvar MAX_COUNT_PER_CYCLE = 0x1000;\n\n\nfunction string_get_cycle_count(size, address)\n{\n    dbg_assert(size && size <= 4 && size >= -4);\n\n    if(size < 0)\n    {\n        return (address & 0xFFF) >> (-size >> 1);\n    }\n    else\n    {\n        return (~address & 0xFFF) >> size;\n    }\n}\n\nfunction string_get_cycle_count2(size, addr1, addr2)\n{\n    dbg_assert(arguments.length === 3);\n\n    return Math.min(\n            string_get_cycle_count(size, addr1),\n            string_get_cycle_count(size, addr2));\n}\n\n\nCPU.prototype.movsb = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.read8(phys_src));\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsw = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.read_aligned16(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.safe_read16(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsd = function()\n{\n    var cpu = this;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        // often used by memcpy, well worth optimizing\n        //   using cpu.mem32s.set\n        var ds = cpu.get_seg_prefix(reg_ds),\n            src = ds + cpu.get_reg_asize(reg_esi) | 0,\n            es = cpu.get_seg(reg_es),\n            dest = es + cpu.get_reg_asize(reg_edi) | 0,\n            count = cpu.get_reg_asize(reg_ecx) >>> 0;\n\n        if(!count)\n        {\n            return;\n        }\n\n        // must be page-aligned if cpu.paging is enabled\n        // and dword-aligned in general\n        var align_mask = cpu.paging ? 0xFFF : 3;\n\n        if((dest & align_mask) === 0 &&\n           (src & align_mask) === 0 &&\n           // If df is set, alignment works a different\n           // This should be unlikely\n           (cpu.flags & flag_direction) === 0)\n        {\n            var cont = false;\n            if(cpu.paging)\n            {\n                src = cpu.translate_address_read(src);\n                dest = cpu.translate_address_write(dest);\n\n                if(count > 0x400)\n                {\n                    count = 0x400;\n                    cont = true;\n                }\n            }\n\n            if(!cpu.io.in_mmap_range(src, count) &&\n                !cpu.io.in_mmap_range(dest, count))\n            {\n                var diff = count << 2;\n                cpu.add_reg_asize(reg_ecx, -count);\n                cpu.add_reg_asize(reg_edi, diff);\n                cpu.add_reg_asize(reg_esi, diff);\n\n                dest >>>= 2;\n                src >>>= 2;\n                cpu.write_blob32(cpu.mem32s.subarray(src, src + count), dest);\n\n                if(cont)\n                {\n                    cpu.instruction_pointer = cpu.previous_ip;\n                }\n\n                return;\n            }\n        }\n    }\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.read_aligned32(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.safe_read32s(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            this.instruction_pointer = this.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nfunction cmpsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            data_src = cpu.read8(phys_src);\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_src = cpu.safe_read8(src);\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                data_src = cpu.read_aligned16(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                data_src = cpu.safe_read16(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        data_src = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                data_src = cpu.read_aligned32(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                data_src = cpu.safe_read32s(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        data_src = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction stosb(cpu)\n{\n    var data = cpu.reg8[reg_al];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, data);\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosw(cpu)\n{\n    var data = cpu.reg16[reg_ax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosd(cpu)\n{\n    var data = cpu.reg32s[reg_eax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.reg8[reg_al] = cpu.read8(phys_src);\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg16[reg_ax] = cpu.safe_read16(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg16[reg_ax] = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction scasb(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n    var data_dest;\n    var data_src = cpu.reg8[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            phys_dest += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasw(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n    var data_dest;\n    var data_src = cpu.reg16[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasd(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n    var data_dest;\n    var data_src = cpu.reg32s[reg_eax];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction insb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.io.port_read8(port));\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 1);\n        cpu.safe_write8(dest, cpu.io.port_read8(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.io.port_read16(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.io.port_read16(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 2);\n        cpu.safe_write16(dest, cpu.io.port_read16(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.io.port_read32(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.io.port_read32(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 4);\n        cpu.safe_write32(dest, cpu.io.port_read32(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.io.port_write8(port, cpu.read8(phys_src));\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write8(port, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write16(port, cpu.read_aligned16(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write16(port, cpu.safe_read16(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write16(port, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write32(port, cpu.read_aligned32(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write32(port, cpu.safe_read32s(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write32(port, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n","/*\n * Arithmatic functions\n * This file contains:\n *\n * add, adc, sub, sbc, cmp\n * inc, dec\n * neg, not\n * imul, mul, idiv, div\n * xadd\n *\n * das, daa, aad, aam\n *\n * and, or, xor, test\n * shl, shr, sar, ror, rol, rcr, rcl\n * shld, shrd\n *\n * bts, btr, btc, bt\n * bsf, bsr\n *\n * popcnt\n*/\n\"use strict\";\n\nCPU.prototype.add8 = function(dest, src) { return this.add(dest, src, OPSIZE_8); }\nCPU.prototype.add16 = function(dest, src) { return this.add(dest, src, OPSIZE_16); }\nCPU.prototype.add32 = function(dest, src) { return this.add(dest, src, OPSIZE_32); }\n\nCPU.prototype.adc8 = function(dest, src) { return this.adc(dest, src, OPSIZE_8); }\nCPU.prototype.adc16 = function(dest, src) { return this.adc(dest, src, OPSIZE_16); }\nCPU.prototype.adc32 = function(dest, src) { return this.adc(dest, src, OPSIZE_32); }\n\nCPU.prototype.sub8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.sub16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.sub32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.cmp8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.cmp16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.cmp32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.sbb8 = function(dest, src) { return this.sbb(dest, src, OPSIZE_8); }\nCPU.prototype.sbb16 = function(dest, src) { return this.sbb(dest, src, OPSIZE_16); }\nCPU.prototype.sbb32 = function(dest, src) { return this.sbb(dest, src, OPSIZE_32); }\n\nCPU.prototype.add = function(dest_operand, source_operand, op_size)\n{\n    //if(this.safe_read32s(this.instruction_pointer + 1) === 0 && this.safe_read32s(this.instruction_pointer + 5) === 0) throw \"0000000\";\n\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = dest_operand + source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.adc = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = (dest_operand + source_operand | 0) + cf | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sub = function(dest_operand, source_operand, op_size)\n{\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sbb = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand - cf | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\n/*\n * inc and dec\n */\n\nCPU.prototype.inc8 = function(dest) { return this.inc(dest, OPSIZE_8); }\nCPU.prototype.inc16 = function(dest) { return this.inc(dest, OPSIZE_16); }\nCPU.prototype.inc32 = function(dest) { return this.inc(dest, OPSIZE_32); }\n\nCPU.prototype.dec8 = function(dest) { return this.dec(dest, OPSIZE_8); }\nCPU.prototype.dec16 = function(dest) { return this.dec(dest, OPSIZE_16); }\nCPU.prototype.dec32 = function(dest) { return this.dec(dest, OPSIZE_32); }\n\nCPU.prototype.inc = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = 1;\n    this.last_add_result = this.last_result = dest_operand + 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\nCPU.prototype.dec = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = 1;\n    this.last_op1 = this.last_result = dest_operand - 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\n\n/*\n * neg\n */\nCPU.prototype.neg8 = function(dest) { return this.neg(dest, OPSIZE_8); }\nCPU.prototype.neg16 = function(dest) { return this.neg(dest, OPSIZE_16); }\nCPU.prototype.neg32 = function(dest) { return this.neg(dest, OPSIZE_32); }\n\nCPU.prototype.neg = function(dest_operand, op_size)\n{\n    this.last_op1 = this.last_result = -dest_operand | 0;\n\n    this.flags_changed = flags_all;\n    this.last_add_result = 0;\n    this.last_op2 = dest_operand;\n    this.last_op_size = op_size;\n\n    return this.last_result;\n}\n\n\n/*\n * mul, imul, div, idiv\n *\n * Note: imul has some extra opcodes\n *       while other functions only allow\n *       ax * modrm\n */\n\nCPU.prototype.mul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result < 0x100)\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.imul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8s[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result > 0x7F || result < -0x80)\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.mul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16[reg_ax],\n        high_result = result >>> 16;\n    //console.log(h(a) + \" * \" + h(this.reg16[reg_ax]) + \" = \" + h(result));\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = high_result;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(high_result === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 1 argument\n * ax = ax * r/m\n */\nCPU.prototype.imul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16s[reg_ax];\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = result >> 16;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg16 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x8000 && operand1 >= -0x8000);\n    dbg_assert(operand2 < 0x8000 && operand2 >= -0x8000);\n\n    var result = operand1 * operand2;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.mul32 = function(source_operand)\n{\n    var dest_operand = this.reg32s[reg_eax];\n\n    var lo = v86util.mul_low(dest_operand, source_operand);\n    var hi = v86util.mul_high(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = lo;\n    this.reg32s[reg_edx] = hi;\n\n    this.last_result = lo;\n    this.last_op_size = OPSIZE_32;\n\n    if(hi === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(h(source_operand >>> 0, 8) + \" * \" + h(dest_operand >>> 0, 8));\n    //console.log(\"= \" + h(this.reg32[reg_edx], 8) + \":\" + h(this.reg32[reg_eax], 8));\n}\n\nCPU.prototype.imul32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand = this.reg32s[reg_eax];\n\n    var lo = v86util.imul_low(dest_operand, source_operand);\n    var hi = v86util.imul_high(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = lo;\n    this.reg32s[reg_edx] = hi;\n\n    this.last_result = lo;\n    this.last_op_size = OPSIZE_32;\n\n    if(hi === (lo >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(target_operand + \" * \" + source_operand);\n    //console.log(\"= \" + h(this.reg32[reg_edx]) + \" \" + h(this.reg32[reg_eax]));\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg32 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x80000000 && operand1 >= -0x80000000);\n    dbg_assert(operand2 < 0x80000000 && operand2 >= -0x80000000);\n\n    var lo = v86util.imul_low(operand1, operand2);\n    var hi = v86util.imul_high(operand1, operand2);\n\n    this.last_result = lo;\n    this.last_op_size = OPSIZE_32;\n\n    if(hi === (lo >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return lo;\n\n    //console.log(operand + \" * \" + source_operand);\n    //console.log(\"= \" + this.reg32[reg]);\n}\n\nCPU.prototype.div8 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x100);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x100)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv8 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x80 && source_operand < 0x80);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16s[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x80 || result <= -0x81)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.div16 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x10000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var\n        target_operand = (this.reg16[reg_ax] | this.reg16[reg_dx] << 16) >>> 0,\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x10000 || result < 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv16 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x8000 && source_operand < 0x8000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax] | (this.reg16[reg_dx] << 16),\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x8000 || result <= -0x8001)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\n// If the dividend is too large, the division cannot be done precisely using\n// JavaScript's double floating point numbers. Run simple long division until\n// the dividend is small enough\nCPU.prototype.do_div32 = function(div_low, div_high, quot)\n{\n    if(div_high >= quot || quot === 0)\n    {\n        dbg_log(\"div32 #DE: \" + h(div_high, 8) + \":\" + h(div_low, 8) + \" div \" + h(quot, 8));\n        this.trigger_de();\n    }\n\n    var result = 0;\n\n    if(div_high > 0x100000)\n    {\n        var m = 0;\n        var i = 32;\n        var q = quot;\n        while(q > div_high)\n        {\n            q >>>= 1;\n            i--;\n        }\n        while(div_high > 0x100000)\n        {\n            if(div_high >= q)\n            {\n                div_high -= q;\n                var sub = quot << i >>> 0;\n                if(sub > div_low)\n                {\n                    div_high--;\n                }\n                div_low = div_low - sub >>> 0;\n                result |= 1 << i\n            }\n            i--;\n            q >>= 1;\n        }\n        result >>>= 0;\n    }\n\n    var div = div_low + div_high * 0x100000000;\n    var mod = div % quot;\n    result += div / quot | 0;\n\n    this.div32_result[0] = result;\n    this.div32_result[1] = mod;\n    return this.div32_result;\n}\n\n\nCPU.prototype.div32 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand <= 0xffffffff);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32[reg_edx];\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    // XXX\n    dbg_assert(source_operand);\n    if(result >= 0x100000000)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\nCPU.prototype.idiv32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32s[reg_edx],\n        div_is_neg = false,\n        is_neg = false;\n\n    if(source_operand < 0)\n    {\n        is_neg = true;\n        source_operand = -source_operand;\n    }\n\n    if(dest_operand_high < 0)\n    {\n        div_is_neg = true;\n        is_neg = !is_neg;\n        dest_operand_low = -dest_operand_low >>> 0;\n        dest_operand_high = ~dest_operand_high + !dest_operand_low;\n    }\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    if(is_neg)\n    {\n        result = -result | 0;\n    }\n\n    if(div_is_neg)\n    {\n        mod = -mod | 0;\n    }\n\n    dbg_assert(source_operand);\n    if(result >= 0x80000000 || result <= -0x80000001)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\n\nCPU.prototype.xadd8 = function(source_operand, reg)\n{\n    var tmp = this.reg8[reg];\n\n    this.reg8[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_8);\n}\n\n\nCPU.prototype.xadd16 = function(source_operand, reg)\n{\n    var tmp = this.reg16[reg];\n\n    this.reg16[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_16);\n}\n\n\nCPU.prototype.xadd32 = function(source_operand, reg)\n{\n    var tmp = this.reg32s[reg];\n\n    this.reg32s[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_32);\n}\n\n\nCPU.prototype.bcd_daa = function()\n{\n    //dbg_log(\"daa\");\n    // decimal adjust after addition\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf(),\n        old_af = this.getaf();\n\n    this.flags &= ~1 & ~flag_adjust\n\n    if((old_al & 0xF) > 9 || old_af)\n    {\n        this.reg8[reg_al] += 6;\n        this.flags |= flag_adjust;\n    }\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] += 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_das = function()\n{\n    //dbg_log(\"das\");\n    // decimal adjust after subtraction\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf();\n\n    this.flags &= ~1;\n\n    if((old_al & 0xF) > 9 || this.getaf())\n    {\n        this.reg8[reg_al] -= 6;\n        this.flags |= flag_adjust;\n        this.flags = this.flags & ~1 | old_cf | (old_al < 6);\n    }\n    else\n    {\n        this.flags &= ~flag_adjust;\n    }\n\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] -= 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_aam = function(imm8)\n{\n    //dbg_log(\"aam\");\n    // ascii adjust after multiplication\n\n    if(imm8 === 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        var temp = this.reg8[reg_al];\n        this.reg8[reg_ah] = temp / imm8;\n        this.reg8[reg_al] = temp % imm8;\n\n        this.last_result = this.reg8[reg_al];\n\n        this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n        this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n    }\n}\n\nCPU.prototype.bcd_aad = function(imm8)\n{\n    //dbg_log(\"aad\");\n    // ascii adjust before division\n\n    var result = this.reg8[reg_al] + this.reg8[reg_ah] * imm8;\n    this.last_result = result & 0xFF;\n    this.reg16[reg_ax] = this.last_result;\n    this.last_op_size = OPSIZE_8;\n\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n    this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n\n    if(result > 0xFFFF)\n    {\n        this.flags |= 1;\n    }\n}\n\nCPU.prototype.bcd_aaa = function()\n{\n    //dbg_log(\"aaa\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] += 6;\n        this.reg8[reg_ah] += 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n};\n\n\nCPU.prototype.bcd_aas = function()\n{\n    //dbg_log(\"aas\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] -= 6;\n        this.reg8[reg_ah] -= 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n}\n\n\n/*                     \\O\n * bitwise functions    |\\\n *                     / \\\n *\n * and, or, xor, test\n * shl, shr, sar, rol, ror, rcl, ror\n * shrd, shld\n *\n * bt, bts, btr, btc\n * bsf, bsr\n */\n\nCPU.prototype.and8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.and16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.and32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.test8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.test16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.test32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.or8 = function(dest, src) { return this.or(dest, src, OPSIZE_8); }\nCPU.prototype.or16 = function(dest, src) { return this.or(dest, src, OPSIZE_16); }\nCPU.prototype.or32 = function(dest, src) { return this.or(dest, src, OPSIZE_32); }\n\nCPU.prototype.xor8 = function(dest, src) { return this.xor(dest, src, OPSIZE_8); }\nCPU.prototype.xor16 = function(dest, src) { return this.xor(dest, src, OPSIZE_16); }\nCPU.prototype.xor32 = function(dest, src) { return this.xor(dest, src, OPSIZE_32); }\n\nCPU.prototype.and = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand & source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.or = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand | source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.xor = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand ^ source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\n\n/*\n * rotates and shifts\n */\n\nCPU.prototype.rol8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 7;\n\n    var result = dest_operand << count | dest_operand >> (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 15;\n\n    var result = dest_operand << count | dest_operand >> (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | dest_operand >>> (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 3 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 5 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1);\n\n    if(count > 1)\n    {\n        result |= dest_operand >>> (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= (this.flags << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 7;\n    var result = dest_operand >> count | dest_operand << (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 7 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 15;\n    var result = dest_operand >> count | dest_operand << (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 15 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | dest_operand << (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 31 & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (8 - count) | dest_operand << (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (16 - count) | dest_operand << (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | this.getcf() << (32 - count);\n\n    if(count > 1)\n    {\n        result |= dest_operand << (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.shl8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 8 & 1)\n                | (this.last_result << 3 ^ this.last_result << 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 16 & 1)\n                | (this.last_result >> 5 ^ this.last_result >> 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    // test this\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 7 & 1) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 4)  & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >>> (count - 1) & 1)\n                | (dest_operand >> 20) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 8)\n    {\n        this.last_result = dest_operand << 24 >> count + 24;\n        // of is zero\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 24 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 16)\n    {\n        this.last_result = dest_operand << 16 >> count + 16;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 16 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (count - 1) & 1);\n\n    return this.last_result;\n}\n\n\nCPU.prototype.shrd16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand >> count | source_operand << (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << (32 - count) | source_operand >> (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >> (count - 17) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 4 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shrd32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count | source_operand << (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (count - 1) & 1);\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 20 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shld16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand << count | source_operand >>> (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >>> (16 - count) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand >> (32 - count) | source_operand << (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >>> (32 - count) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 15 & 1)) << 11;\n\n    return this.last_result;\n}\n\nCPU.prototype.shld32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count | source_operand >>> (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (32 - count) & 1);\n\n    if(count === 1)\n    {\n        this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11;\n    }\n    else\n    {\n        this.flags &= ~flag_overflow;\n    }\n\n    return this.last_result;\n}\n\n\nCPU.prototype.bt_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base ^ 1 << bit_offset;\n}\n\nCPU.prototype.bts_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base | 1 << bit_offset;\n}\n\nCPU.prototype.btr_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base & ~(1 << bit_offset);\n}\n\nCPU.prototype.bt_mem = function(virt_addr, bit_offset)\n{\n    var bit_base = this.safe_read8(virt_addr + (bit_offset >> 3) | 0);\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base ^ 1 << bit_offset);\n}\n\nCPU.prototype.btr_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base & ~(1 << bit_offset));\n}\n\nCPU.prototype.bts_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base | 1 << bit_offset);\n}\n\nCPU.prototype.bsf16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n\n        // not defined in the docs, but value doesn't change on my intel machine\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        // http://jsperf.com/lowest-bit-index\n        return this.last_result = v86util.int_log2(-bit_base & bit_base);\n    }\n}\n\nCPU.prototype.bsf32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2((-bit_base & bit_base) >>> 0);\n    }\n}\n\nCPU.prototype.bsr16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2(bit_base);\n    }\n}\n\nCPU.prototype.bsr32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return this.last_result = v86util.int_log2(bit_base >>> 0);\n    }\n}\n\nCPU.prototype.popcnt = function(v)\n{\n    this.flags_changed = 0;\n    this.flags &= ~flags_all;\n\n    if(v)\n    {\n        // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\n        v = v - ((v >> 1) & 0x55555555);\n        v = (v & 0x33333333) + ((v >> 2) & 0x33333333);\n        return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return 0;\n    }\n};\n\nCPU.prototype.saturate_sw_to_ub = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v >>> 0;\n    if (ret >= 0x8000) {\n        ret = 0;\n    }\n    else if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sw_to_sb = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v;\n\n    if (ret > 0xFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sw = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFF8000) {\n        ret = ret & 0xFFFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x8000;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x7FFF;\n    }\n\n    dbg_assert((ret & 0xFFFF0000) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sb = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFFFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_ub = function(v)\n{\n    let ret = v | 0;\n\n    if (ret < 0) {\n        ret = 0;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\n\nCPU.prototype.saturate_ud_to_ub = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_uw = function(v)\n{\n    dbg_assert(v >= 0);\n    return v > 0xFFFF ? 0xFFFF : v;\n};\n\nCPU.prototype.integer_round = function(f, rc)\n{\n    if(rc === 0)\n    {\n        // Round to nearest, or even if equidistant\n        var rounded = Math.round(f);\n\n        if(rounded - f === 0.5 && (rounded % 2))\n        {\n            // Special case: Math.round rounds to positive infinity\n            // if equidistant\n            rounded--;\n        }\n\n        return rounded;\n    }\n    // rc=3 is truncate -> floor for positive numbers\n    else if(rc === 1 || (rc === 3 && f > 0))\n    {\n        return Math.floor(f);\n    }\n    else\n    {\n        return Math.ceil(f);\n    }\n}\n","/*\n * Some miscellaneous instructions:\n *\n * jmpcc16, jmpcc32, jmp16\n * loop, loope, loopne, jcxz\n * test_cc\n *\n * mov, push, pop\n * pusha, popa\n * xchg, lss\n * lea\n * enter\n * bswap\n * fxsave, fxrstor\n */\n\"use strict\";\n\nCPU.prototype.jmpcc8 = function(condition)\n{\n    var imm8 = this.read_op8s();\n    if(condition)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8 | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.jmp_rel16 = function(rel16)\n{\n    var current_cs = this.get_seg(reg_cs);\n\n    // limit ip to 16 bit\n    // ugly\n    this.instruction_pointer -= current_cs;\n    this.instruction_pointer = (this.instruction_pointer + rel16) & 0xFFFF;\n    this.instruction_pointer = this.instruction_pointer + current_cs | 0;\n};\n\nCPU.prototype.jmpcc16 = function(condition)\n{\n    var imm16 = this.read_op16();\n    if(condition)\n    {\n        this.jmp_rel16(imm16);\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\n\nCPU.prototype.jmpcc32 = function(condition)\n{\n    var imm32s = this.read_op32s();\n    if(condition)\n    {\n        // don't change to `this.instruction_pointer += this.read_op32s()`,\n        //   since read_op32s modifies instruction_pointer\n\n        this.instruction_pointer = this.instruction_pointer + imm32s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.cmovcc16 = function(condition)\n{\n    var data = this.read_e16();\n    if(condition)\n    {\n        this.write_g16(data);\n    }\n};\n\nCPU.prototype.cmovcc32 = function(condition)\n{\n    var data = this.read_e32s();\n    if(condition)\n    {\n        this.write_g32(data);\n    }\n};\n\nCPU.prototype.setcc = function(condition)\n{\n    this.set_e8(condition ? 1 : 0)\n};\n\nCPU.prototype.loopne = function(imm8s)\n{\n    if(this.decr_ecx_asize() && !this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loope = function(imm8s)\n{\n    if(this.decr_ecx_asize() && this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loop = function(imm8s)\n{\n    if(this.decr_ecx_asize())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.jcxz = function(imm8s)\n{\n    if(this.get_reg_asize(reg_ecx) === 0)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\n/**\n * @return {number}\n * @const\n */\nCPU.prototype.getcf = function()\n{\n    if(this.flags_changed & 1)\n    {\n        return (this.last_op1 ^ (this.last_op1 ^ this.last_op2) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & 1;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getpf = function()\n{\n    if(this.flags_changed & flag_parity)\n    {\n        // inverted lookup table\n        return 0x9669 << 2 >> ((this.last_result ^ this.last_result >> 4) & 0xF) & flag_parity;\n    }\n    else\n    {\n        return this.flags & flag_parity;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getaf = function()\n{\n    if(this.flags_changed & flag_adjust)\n    {\n        return (this.last_op1 ^ this.last_op2 ^ this.last_add_result) & flag_adjust;\n    }\n    else\n    {\n        return this.flags & flag_adjust;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getzf = function()\n{\n    if(this.flags_changed & flag_zero)\n    {\n        return (~this.last_result & this.last_result - 1) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_zero;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getsf = function()\n{\n    if(this.flags_changed & flag_sign)\n    {\n        return this.last_result >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_sign;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getof = function()\n{\n    if(this.flags_changed & flag_overflow)\n    {\n        return ((this.last_op1 ^ this.last_add_result) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_overflow;\n    }\n};\n\nCPU.prototype.test_o = CPU.prototype.getof;\nCPU.prototype.test_b = CPU.prototype.getcf;\nCPU.prototype.test_z = CPU.prototype.getzf;\nCPU.prototype.test_s = CPU.prototype.getsf;\nCPU.prototype.test_p = CPU.prototype.getpf;\n\nCPU.prototype.test_be = function()\n{\n    // Idea:\n    //    return this.last_op1 <= this.last_op2;\n    return this.getcf() || this.getzf();\n}\n\nCPU.prototype.test_l = function()\n{\n    // Idea:\n    //    return this.last_add_result < this.last_op2;\n    return !this.getsf() !== !this.getof();\n}\n\nCPU.prototype.test_le = function()\n{\n    // Idea:\n    //    return this.last_add_result <= this.last_op2;\n    return this.getzf() || !this.getsf() !== !this.getof();\n}\n\n\n\nCPU.prototype.push16 = function(imm16)\n{\n    var sp = this.get_stack_pointer(-2);\n\n    this.safe_write16(sp, imm16);\n    this.adjust_stack_reg(-2);\n}\n\nCPU.prototype.push32 = function(imm32)\n{\n    var sp = this.get_stack_pointer(-4);\n\n    this.safe_write32(sp, imm32);\n    this.adjust_stack_reg(-4);\n}\n\nCPU.prototype.pop16 = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read16(sp);\n\n    this.adjust_stack_reg(2);\n    return result;\n}\n\nCPU.prototype.pop32s = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read32s(sp);\n\n    this.adjust_stack_reg(4);\n    return result;\n}\n\nCPU.prototype.pusha16 = function()\n{\n    var temp = this.reg16[reg_sp];\n\n    // make sure we don't get a pagefault after having\n    // pushed several registers already\n    this.writable_or_pagefault(this.get_stack_pointer(-16), 16);\n\n    this.push16(this.reg16[reg_ax]);\n    this.push16(this.reg16[reg_cx]);\n    this.push16(this.reg16[reg_dx]);\n    this.push16(this.reg16[reg_bx]);\n    this.push16(temp);\n    this.push16(this.reg16[reg_bp]);\n    this.push16(this.reg16[reg_si]);\n    this.push16(this.reg16[reg_di]);\n}\n\nCPU.prototype.pusha32 = function()\n{\n    var temp = this.reg32s[reg_esp];\n\n    this.writable_or_pagefault(this.get_stack_pointer(-32), 32);\n\n    this.push32(this.reg32s[reg_eax]);\n    this.push32(this.reg32s[reg_ecx]);\n    this.push32(this.reg32s[reg_edx]);\n    this.push32(this.reg32s[reg_ebx]);\n    this.push32(temp);\n    this.push32(this.reg32s[reg_ebp]);\n    this.push32(this.reg32s[reg_esi]);\n    this.push32(this.reg32s[reg_edi]);\n}\n\nCPU.prototype.popa16 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(15));\n\n    this.reg16[reg_di] = this.pop16();\n    this.reg16[reg_si] = this.pop16();\n    this.reg16[reg_bp] = this.pop16();\n    this.adjust_stack_reg(2);\n    this.reg16[reg_bx] = this.pop16();\n    this.reg16[reg_dx] = this.pop16();\n    this.reg16[reg_cx] = this.pop16();\n    this.reg16[reg_ax] = this.pop16();\n}\n\nCPU.prototype.popa32 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(31));\n\n    this.reg32s[reg_edi] = this.pop32s();\n    this.reg32s[reg_esi] = this.pop32s();\n    this.reg32s[reg_ebp] = this.pop32s();\n    this.adjust_stack_reg(4);\n    this.reg32s[reg_ebx] = this.pop32s();\n    this.reg32s[reg_edx] = this.pop32s();\n    this.reg32s[reg_ecx] = this.pop32s();\n    this.reg32s[reg_eax] = this.pop32s();\n}\n\nCPU.prototype.xchg8 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 1 & 0xC | modrm_byte >> 5 & 1,\n        tmp = this.reg8[mod];\n\n    this.reg8[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 2 & 14,\n        tmp = this.reg16[mod];\n\n    this.reg16[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16r = function(operand)\n{\n    var temp = this.reg16[reg_ax];\n    this.reg16[reg_ax] = this.reg16[operand];\n    this.reg16[operand] = temp;\n}\n\nCPU.prototype.xchg32 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 3 & 7,\n        tmp = this.reg32s[mod];\n\n    this.reg32s[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg32r = function(operand)\n{\n    var temp = this.reg32s[reg_eax];\n    this.reg32s[reg_eax] = this.reg32s[operand];\n    this.reg32s[operand] = temp;\n}\n\nCPU.prototype.lss16 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        // 0xc4c4 #ud (EMULATOR_BOP) is used by reactos and windows to exit vm86 mode\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read16(addr),\n        new_seg = this.safe_read16(addr + 2 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg16[this.modrm_byte >> 2 & 14] = new_reg;\n}\n\nCPU.prototype.lss32 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read32s(addr),\n        new_seg = this.safe_read16(addr + 4 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg32s[this.modrm_byte >> 3 & 7] = new_reg;\n}\n\nCPU.prototype.enter16 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter16 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push16(this.reg16[reg_bp]);\n    var frame_temp = this.reg16[reg_sp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg16[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 2;\n            this.push16(this.safe_read16(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push16(frame_temp);\n    }\n    this.reg16[reg_bp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.enter32 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter32 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push32(this.reg32s[reg_ebp]);\n    var frame_temp = this.reg32s[reg_esp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg32s[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 4;\n            this.push32(this.safe_read32s(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push32(frame_temp);\n    }\n    this.reg32s[reg_ebp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.bswap = function(reg)\n{\n    var temp = this.reg32s[reg];\n\n    this.reg32s[reg] = temp >>> 24 | temp << 24 | (temp >> 8 & 0xFF00) | (temp << 8 & 0xFF0000);\n}\n\nCPU.prototype.fxsave = function(addr)\n{\n    this.writable_or_pagefault(addr, 512);\n\n    this.safe_write16(addr + 0 | 0, this.fpu.control_word);\n    this.safe_write16(addr + 2 | 0, this.fpu.load_status_word());\n    this.safe_write8( addr + 4 | 0, ~this.fpu.stack_empty & 0xFF);\n    this.safe_write16(addr + 6 | 0, this.fpu.fpu_opcode);\n    this.safe_write32(addr + 8 | 0, this.fpu.fpu_ip);\n    this.safe_write16(addr + 12 | 0, this.fpu.fpu_ip_selector);\n    this.safe_write32(addr + 16 | 0, this.fpu.fpu_dp);\n    this.safe_write16(addr + 20 | 0, this.fpu.fpu_dp_selector);\n\n    this.safe_write32(addr + 24 | 0, this.mxcsr);\n    this.safe_write32(addr + 28 | 0, MXCSR_MASK);\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.store_m80(addr + 32 + (i << 4) | 0, this.fpu.st[this.fpu.stack_ptr + i & 7]);\n    }\n\n    // If the OSFXSR bit in control register CR4 is not set, the FXSAVE\n    // instruction may not save these registers. This behavior is\n    // implementation dependent.\n    for(let i = 0; i < 8; i++)\n    {\n        this.safe_write32(addr + 160 + (i << 4) +  0 | 0, this.reg_xmm32s[i << 2 | 0]);\n        this.safe_write32(addr + 160 + (i << 4) +  4 | 0, this.reg_xmm32s[i << 2 | 1]);\n        this.safe_write32(addr + 160 + (i << 4) +  8 | 0, this.reg_xmm32s[i << 2 | 2]);\n        this.safe_write32(addr + 160 + (i << 4) + 12 | 0, this.reg_xmm32s[i << 2 | 3]);\n    }\n};\n\nCPU.prototype.fxrstor = function(addr)\n{\n    this.translate_address_read(addr | 0);\n    this.translate_address_read(addr + 511 | 0);\n\n    var new_mxcsr = this.safe_read32s(addr + 24 | 0);\n\n    if(new_mxcsr & ~MXCSR_MASK)\n    {\n        dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n        this.trigger_gp(0);\n    }\n\n    this.fpu.control_word = this.safe_read16(addr + 0 | 0);\n    this.fpu.set_status_word(this.safe_read16(addr + 2 | 0));\n    this.fpu.stack_empty = ~this.safe_read8(addr + 4 | 0) & 0xFF;\n    this.fpu.fpu_opcode = this.safe_read16(addr + 6 | 0);\n    this.fpu.fpu_ip = this.safe_read32s(addr + 8 | 0);\n    this.fpu.fpu_ip = this.safe_read16(addr + 12 | 0);\n    this.fpu.fpu_dp = this.safe_read32s(addr + 16 | 0);\n    this.fpu.fpu_dp_selector = this.safe_read16(addr + 20 | 0);\n\n    this.mxcsr = new_mxcsr;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.st[this.fpu.stack_ptr + i & 7] = this.fpu.load_m80(addr + 32 + (i << 4) | 0);\n    }\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg_xmm32s[i << 2 | 0] = this.safe_read32s(addr + 160 + (i << 4) +  0 | 0);\n        this.reg_xmm32s[i << 2 | 1] = this.safe_read32s(addr + 160 + (i << 4) +  4 | 0);\n        this.reg_xmm32s[i << 2 | 2] = this.safe_read32s(addr + 160 + (i << 4) +  8 | 0);\n        this.reg_xmm32s[i << 2 | 3] = this.safe_read32s(addr + 160 + (i << 4) + 12 | 0);\n    }\n};\n","\"use strict\";\n\nvar t = [];\nvar t16 = [];\nvar t32 = [];\n\nt[0x00] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x02] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.add8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.add16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.add32(cpu.read_g32s(), cpu.read_e32s())); };\nt[0x04] = cpu => { cpu.reg8[reg_al] = cpu.add8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x05] = cpu => { cpu.reg16[reg_ax] = cpu.add16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x05] = cpu => { cpu.reg32s[reg_eax] = cpu.add32(cpu.reg32s[reg_eax], cpu.read_op32s()); };\n\nt16[0x06] = cpu => { cpu.push16(cpu.sreg[reg_es]); };\nt32[0x06] = cpu => { cpu.push32(cpu.sreg[reg_es]); };\nt16[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x08] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.or8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.or16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.or32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x0a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.or8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.or16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.or32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x0c] = cpu => { cpu.reg8[reg_al] = cpu.or8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x0d] = cpu => { cpu.reg16[reg_ax] = cpu.or16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x0d] = cpu => { cpu.reg32s[reg_eax] = cpu.or32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x0E] = cpu => { cpu.push16(cpu.sreg[reg_cs]); };\nt32[0x0E] = cpu => { cpu.push32(cpu.sreg[reg_cs]); };\nt16[0x0F] = cpu => {\n    cpu.table0F_16[cpu.read_op0F()](cpu);\n};\nt32[0x0F] = cpu => {\n    cpu.table0F_32[cpu.read_op0F()](cpu);\n};\n\nt[0x10] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x12] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.adc8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.adc16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.adc32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x14] = cpu => { cpu.reg8[reg_al] = cpu.adc8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x15] = cpu => { cpu.reg16[reg_ax] = cpu.adc16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x15] = cpu => { cpu.reg32s[reg_eax] = cpu.adc32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt16[0x16] = cpu => { cpu.push16(cpu.sreg[reg_ss]); };\nt32[0x16] = cpu => { cpu.push32(cpu.sreg[reg_ss]); };\nt16[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\nt32[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\n\nt[0x18] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x1a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sbb8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sbb16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sbb32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x1c] = cpu => { cpu.reg8[reg_al] = cpu.sbb8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x1d] = cpu => { cpu.reg16[reg_ax] = cpu.sbb16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x1d] = cpu => { cpu.reg32s[reg_eax] = cpu.sbb32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x1E] = cpu => { cpu.push16(cpu.sreg[reg_ds]); };\nt32[0x1E] = cpu => { cpu.push32(cpu.sreg[reg_ds]); };\nt16[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x20] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x22] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.and8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.and16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.and32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x24] = cpu => { cpu.reg8[reg_al] = cpu.and8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x25] = cpu => { cpu.reg16[reg_ax] = cpu.and16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x25] = cpu => { cpu.reg32s[reg_eax] = cpu.and32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt[0x26] = cpu => { cpu.segment_prefix_op(reg_es); };\nt[0x27] = cpu => { cpu.bcd_daa(); };\n\nt[0x28] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x2a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sub8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sub16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sub32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x2c] = cpu => { cpu.reg8[reg_al] = cpu.sub8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x2d] = cpu => { cpu.reg16[reg_ax] = cpu.sub16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x2d] = cpu => { cpu.reg32s[reg_eax] = cpu.sub32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x2E] = cpu => { cpu.segment_prefix_op(reg_cs); };\nt[0x2F] = cpu => { cpu.bcd_das(); };\n\nt[0x30] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x32] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.xor8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.xor16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.xor32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x34] = cpu => { cpu.reg8[reg_al] = cpu.xor8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x35] = cpu => { cpu.reg16[reg_ax] = cpu.xor16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x35] = cpu => { cpu.reg32s[reg_eax] = cpu.xor32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x36] = cpu => { cpu.segment_prefix_op(reg_ss); };\nt[0x37] = cpu => { cpu.bcd_aaa(); };\n\nt[0x38] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_e8(), cpu.read_g8()); };\nt16[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_e16(), cpu.read_g16()); };\nt32[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_e32s(), cpu.read_g32s()); }\nt[0x3A] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_g8(), cpu.read_e8()); };\nt16[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_g16(), cpu.read_e16()); };\nt32[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_g32s(), cpu.read_e32s()); }\nt[0x3C] = cpu => { cpu.cmp8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x3D] = cpu => { cpu.cmp16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x3D] = cpu => { cpu.cmp32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x3E] = cpu => { cpu.segment_prefix_op(reg_ds); };\nt[0x3F] = cpu => { cpu.bcd_aas(); };\n\n\nt16[0x40] = cpu => { cpu.reg16[reg_ax] = cpu.inc16(cpu.reg16[reg_ax]); };\nt32[0x40] = cpu => { cpu.reg32s[reg_eax] = cpu.inc32(cpu.reg32s[reg_eax]); };\nt16[0x41] = cpu => { cpu.reg16[reg_cx] = cpu.inc16(cpu.reg16[reg_cx]); };\nt32[0x41] = cpu => { cpu.reg32s[reg_ecx] = cpu.inc32(cpu.reg32s[reg_ecx]); };\nt16[0x42] = cpu => { cpu.reg16[reg_dx] = cpu.inc16(cpu.reg16[reg_dx]); };\nt32[0x42] = cpu => { cpu.reg32s[reg_edx] = cpu.inc32(cpu.reg32s[reg_edx]); };\nt16[0x43] = cpu => { cpu.reg16[reg_bx] = cpu.inc16(cpu.reg16[reg_bx]); };\nt32[0x43] = cpu => { cpu.reg32s[reg_ebx] = cpu.inc32(cpu.reg32s[reg_ebx]); };\nt16[0x44] = cpu => { cpu.reg16[reg_sp] = cpu.inc16(cpu.reg16[reg_sp]); };\nt32[0x44] = cpu => { cpu.reg32s[reg_esp] = cpu.inc32(cpu.reg32s[reg_esp]); };\nt16[0x45] = cpu => { cpu.reg16[reg_bp] = cpu.inc16(cpu.reg16[reg_bp]); };\nt32[0x45] = cpu => { cpu.reg32s[reg_ebp] = cpu.inc32(cpu.reg32s[reg_ebp]); };\nt16[0x46] = cpu => { cpu.reg16[reg_si] = cpu.inc16(cpu.reg16[reg_si]); };\nt32[0x46] = cpu => { cpu.reg32s[reg_esi] = cpu.inc32(cpu.reg32s[reg_esi]); };\nt16[0x47] = cpu => { cpu.reg16[reg_di] = cpu.inc16(cpu.reg16[reg_di]); };\nt32[0x47] = cpu => { cpu.reg32s[reg_edi] = cpu.inc32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x48] = cpu => { cpu.reg16[reg_ax] = cpu.dec16(cpu.reg16[reg_ax]); };\nt32[0x48] = cpu => { cpu.reg32s[reg_eax] = cpu.dec32(cpu.reg32s[reg_eax]); };\nt16[0x49] = cpu => { cpu.reg16[reg_cx] = cpu.dec16(cpu.reg16[reg_cx]); };\nt32[0x49] = cpu => { cpu.reg32s[reg_ecx] = cpu.dec32(cpu.reg32s[reg_ecx]); };\nt16[0x4A] = cpu => { cpu.reg16[reg_dx] = cpu.dec16(cpu.reg16[reg_dx]); };\nt32[0x4A] = cpu => { cpu.reg32s[reg_edx] = cpu.dec32(cpu.reg32s[reg_edx]); };\nt16[0x4B] = cpu => { cpu.reg16[reg_bx] = cpu.dec16(cpu.reg16[reg_bx]); };\nt32[0x4B] = cpu => { cpu.reg32s[reg_ebx] = cpu.dec32(cpu.reg32s[reg_ebx]); };\nt16[0x4C] = cpu => { cpu.reg16[reg_sp] = cpu.dec16(cpu.reg16[reg_sp]); };\nt32[0x4C] = cpu => { cpu.reg32s[reg_esp] = cpu.dec32(cpu.reg32s[reg_esp]); };\nt16[0x4D] = cpu => { cpu.reg16[reg_bp] = cpu.dec16(cpu.reg16[reg_bp]); };\nt32[0x4D] = cpu => { cpu.reg32s[reg_ebp] = cpu.dec32(cpu.reg32s[reg_ebp]); };\nt16[0x4E] = cpu => { cpu.reg16[reg_si] = cpu.dec16(cpu.reg16[reg_si]); };\nt32[0x4E] = cpu => { cpu.reg32s[reg_esi] = cpu.dec32(cpu.reg32s[reg_esi]); };\nt16[0x4F] = cpu => { cpu.reg16[reg_di] = cpu.dec16(cpu.reg16[reg_di]); };\nt32[0x4F] = cpu => { cpu.reg32s[reg_edi] = cpu.dec32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x50] = cpu => { cpu.push16(cpu.reg16[reg_ax]); };\nt32[0x50] = cpu => { cpu.push32(cpu.reg32s[reg_eax]); }\nt16[0x51] = cpu => { cpu.push16(cpu.reg16[reg_cx]); };\nt32[0x51] = cpu => { cpu.push32(cpu.reg32s[reg_ecx]); }\nt16[0x52] = cpu => { cpu.push16(cpu.reg16[reg_dx]); };\nt32[0x52] = cpu => { cpu.push32(cpu.reg32s[reg_edx]); }\nt16[0x53] = cpu => { cpu.push16(cpu.reg16[reg_bx]); };\nt32[0x53] = cpu => { cpu.push32(cpu.reg32s[reg_ebx]); }\nt16[0x54] = cpu => { cpu.push16(cpu.reg16[reg_sp]); };\nt32[0x54] = cpu => { cpu.push32(cpu.reg32s[reg_esp]); }\nt16[0x55] = cpu => { cpu.push16(cpu.reg16[reg_bp]); };\nt32[0x55] = cpu => { cpu.push32(cpu.reg32s[reg_ebp]); }\nt16[0x56] = cpu => { cpu.push16(cpu.reg16[reg_si]); };\nt32[0x56] = cpu => { cpu.push32(cpu.reg32s[reg_esi]); }\nt16[0x57] = cpu => { cpu.push16(cpu.reg16[reg_di]); };\nt32[0x57] = cpu => { cpu.push32(cpu.reg32s[reg_edi]); }\n\nt16[0x58] = cpu => { cpu.reg16[reg_ax] = cpu.pop16(); };\nt32[0x58] = cpu => { cpu.reg32s[reg_eax] = cpu.pop32s(); }\nt16[0x59] = cpu => { cpu.reg16[reg_cx] = cpu.pop16(); };\nt32[0x59] = cpu => { cpu.reg32s[reg_ecx] = cpu.pop32s(); }\nt16[0x5A] = cpu => { cpu.reg16[reg_dx] = cpu.pop16(); };\nt32[0x5A] = cpu => { cpu.reg32s[reg_edx] = cpu.pop32s(); }\nt16[0x5B] = cpu => { cpu.reg16[reg_bx] = cpu.pop16(); };\nt32[0x5B] = cpu => { cpu.reg32s[reg_ebx] = cpu.pop32s(); }\nt16[0x5C] = cpu => { cpu.reg16[reg_sp] = cpu.pop16(); };\nt32[0x5C] = cpu => { cpu.reg32s[reg_esp] = cpu.pop32s(); }\nt16[0x5D] = cpu => { cpu.reg16[reg_bp] = cpu.pop16(); };\nt32[0x5D] = cpu => { cpu.reg32s[reg_ebp] = cpu.pop32s(); }\nt16[0x5E] = cpu => { cpu.reg16[reg_si] = cpu.pop16(); };\nt32[0x5E] = cpu => { cpu.reg32s[reg_esi] = cpu.pop32s(); }\nt16[0x5F] = cpu => { cpu.reg16[reg_di] = cpu.pop16(); };\nt32[0x5F] = cpu => { cpu.reg32s[reg_edi] = cpu.pop32s(); }\n\n\nt16[0x60] = cpu => { cpu.pusha16(); };\nt32[0x60] = cpu => { cpu.pusha32(); };\nt16[0x61] = cpu => { cpu.popa16(); };\nt32[0x61] = cpu => { cpu.popa32(); };\n\nt[0x62] = cpu => {\n    // bound\n    dbg_log(\"Unimplemented BOUND instruction\", LOG_CPU);\n    dbg_assert(false);\n};\nt[0x63] = cpu => { cpu.read_modrm_byte();\n    // arpl\n    //dbg_log(\"arpl\", LOG_CPU);\n    if(cpu.protected_mode && !cpu.vm86_mode())\n    {\n        cpu.write_e16(cpu.arpl(cpu.read_write_e16(), cpu.modrm_byte >> 2 & 14));\n    }\n    else\n    {\n        dbg_log(\"arpl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n};\n\nt[0x64] = cpu => { cpu.segment_prefix_op(reg_fs); };\nt[0x65] = cpu => { cpu.segment_prefix_op(reg_gs); };\n\nt[0x66] = cpu => {\n    // Operand-size override prefix\n    cpu.prefixes |= PREFIX_MASK_OPSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0x67] = cpu => {\n    // Address-size override prefix\n    dbg_assert(cpu.is_asize_32() === cpu.is_32);\n\n    cpu.prefixes |= PREFIX_MASK_ADDRSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt16[0x68] = cpu => { cpu.push16(cpu.read_op16()); };\nt32[0x68] = cpu => { cpu.push32(cpu.read_op32s()); };\n\nt16[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op16() << 16 >> 16));\n};\nt32[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op32s()));\n};\n\nt16[0x6A] = cpu => { cpu.push16(cpu.read_op8s()); };\nt32[0x6A] = cpu => { cpu.push32(cpu.read_op8s()); };\n\nt16[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op8s()));\n};\nt32[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op8s()));\n};\n\nt[0x6C] = cpu => { insb(cpu); };\nt16[0x6D] = cpu => { insw(cpu); };\nt32[0x6D] = cpu => { insd(cpu); };\nt[0x6E] = cpu => { outsb(cpu); };\nt16[0x6F] = cpu => { outsw(cpu); };\nt32[0x6F] = cpu => { outsd(cpu); };\n\nt[0x70] = cpu => { cpu.jmpcc8( cpu.test_o()); };\nt[0x71] = cpu => { cpu.jmpcc8(!cpu.test_o()); };\nt[0x72] = cpu => { cpu.jmpcc8( cpu.test_b()); };\nt[0x73] = cpu => { cpu.jmpcc8(!cpu.test_b()); };\nt[0x74] = cpu => { cpu.jmpcc8( cpu.test_z()); };\nt[0x75] = cpu => { cpu.jmpcc8(!cpu.test_z()); };\nt[0x76] = cpu => { cpu.jmpcc8( cpu.test_be()); };\nt[0x77] = cpu => { cpu.jmpcc8(!cpu.test_be()); };\nt[0x78] = cpu => { cpu.jmpcc8( cpu.test_s()); };\nt[0x79] = cpu => { cpu.jmpcc8(!cpu.test_s()); };\nt[0x7A] = cpu => { cpu.jmpcc8( cpu.test_p()); };\nt[0x7B] = cpu => { cpu.jmpcc8(!cpu.test_p()); };\nt[0x7C] = cpu => { cpu.jmpcc8( cpu.test_l()); };\nt[0x7D] = cpu => { cpu.jmpcc8(!cpu.test_l()); };\nt[0x7E] = cpu => { cpu.jmpcc8( cpu.test_le()); };\nt[0x7F] = cpu => { cpu.jmpcc8(!cpu.test_le()); };\n\nt[0x80] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 1: cpu.write_e8(cpu. or8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 2: cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 3: cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 4: cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 5: cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 6: cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 7: cpu.cmp8(cpu.read_e8(), cpu.read_op8()); break;\n    }\n};\nt16[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op16()); break;\n    }\n};\nt32[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op32s()); break;\n    }\n};\nt[0x82] = t[0x80]; // alias\nt16[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op8s()); break;\n    }\n};\nt32[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op8s()); break;\n    }\n};\n\nt[0x84] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e8(); cpu.test8(data, cpu.read_g8()); };\nt16[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e16(); cpu.test16(data, cpu.read_g16()); };\nt32[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e32s(); cpu.test32(data, cpu.read_g32s()); }\n\n\nt[0x86] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_write_e8(); cpu.write_e8(cpu.xchg8(data, cpu.modrm_byte)); };\nt16[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.xchg16(data, cpu.modrm_byte));\n};\nt32[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.xchg32(data, cpu.modrm_byte));\n};\n\nt[0x88] = cpu => { cpu.read_modrm_byte(); cpu.set_e8(cpu.read_g8()); };\nt16[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e16(cpu.read_g16()); };\nt32[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e32(cpu.read_g32s()); }\n\nt[0x8A] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g8(data);\n};\nt16[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(data);\n};\n\nt16[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e16(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\nt32[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e32(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\n\nt16[0x8D] = cpu => { cpu.read_modrm_byte();\n    // lea\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    // override prefix, so modrm_resolve does not return the segment part\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg16[mod << 1] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\nt32[0x8D] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg32s[mod] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\n\nt[0x8E] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n    var data = cpu.read_e16();\n    cpu.switch_seg(mod, data);\n\n    if(mod === reg_ss)\n    {\n        // run next instruction, so no interrupts are handled\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n    }\n};\n\nt16[0x8F] = cpu => { cpu.read_modrm_byte();\n    // pop\n    var sp = cpu.safe_read16(cpu.get_stack_pointer(0));\n\n    cpu.adjust_stack_reg(2);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.adjust_stack_reg(-2);\n        cpu.safe_write16(addr, sp);\n        cpu.adjust_stack_reg(2);\n    } else {\n        cpu.write_reg_e16(sp);\n    }\n};\nt32[0x8F] = cpu => { cpu.read_modrm_byte();\n    var sp = cpu.safe_read32s(cpu.get_stack_pointer(0));\n\n    // change esp first, then resolve modrm address\n    cpu.adjust_stack_reg(4);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n        // Before attempting a write that might cause a page fault,\n        // we must set esp to the old value. Fuck Intel.\n        cpu.adjust_stack_reg(-4);\n        cpu.safe_write32(addr, sp);\n        cpu.adjust_stack_reg(4);\n    } else {\n        cpu.write_reg_e32(sp);\n    }\n};\n\nt[0x90] = cpu => { };\nt16[0x91] = cpu => { cpu.xchg16r(reg_cx) };\nt32[0x91] = cpu => { cpu.xchg32r(reg_ecx) };\nt16[0x92] = cpu => { cpu.xchg16r(reg_dx) };\nt32[0x92] = cpu => { cpu.xchg32r(reg_edx) };\nt16[0x93] = cpu => { cpu.xchg16r(reg_bx) };\nt32[0x93] = cpu => { cpu.xchg32r(reg_ebx) };\nt16[0x94] = cpu => { cpu.xchg16r(reg_sp) };\nt32[0x94] = cpu => { cpu.xchg32r(reg_esp) };\nt16[0x95] = cpu => { cpu.xchg16r(reg_bp) };\nt32[0x95] = cpu => { cpu.xchg32r(reg_ebp) };\nt16[0x96] = cpu => { cpu.xchg16r(reg_si) };\nt32[0x96] = cpu => { cpu.xchg32r(reg_esi) };\nt16[0x97] = cpu => { cpu.xchg16r(reg_di) };\nt32[0x97] = cpu => { cpu.xchg32r(reg_edi) };\n\nt16[0x98] = cpu => { /* cbw */ cpu.reg16[reg_ax] = cpu.reg8s[reg_al]; };\nt32[0x98] = cpu => { /* cwde */ cpu.reg32s[reg_eax] = cpu.reg16s[reg_ax]; };\nt16[0x99] = cpu => { /* cwd */ cpu.reg16[reg_dx] = cpu.reg16s[reg_ax] >> 15; };\nt32[0x99] = cpu => { /* cdq */ cpu.reg32s[reg_edx] = cpu.reg32s[reg_eax] >> 31; };\n\nt16[0x9A] = cpu => {\n    // callf\n    var new_ip = cpu.read_op16();\n    var new_cs = cpu.read_disp16();\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0x9A] = cpu => {\n    var new_ip = cpu.read_op32s();\n    var new_cs = cpu.read_disp16();\n\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        if(new_ip & 0xFFFF0000)\n        {\n            throw cpu.debug.unimpl(\"#GP handler\");\n        }\n    }\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0x9B] = cpu => {\n    // fwait: check for pending fpu exceptions\n    if((cpu.cr[0] & (CR0_MP | CR0_TS)) === (CR0_MP | CR0_TS))\n    {\n        // task switched and MP bit is set\n        cpu.trigger_nm();\n    }\n    else\n    {\n        if(cpu.fpu)\n        {\n            cpu.fpu.fwait();\n        }\n        else\n        {\n            // EM bit isn't checked\n            // If there's no FPU, do nothing\n        }\n    }\n};\nt16[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        cpu.push16(cpu.get_eflags());\n    }\n};\nt32[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        // trap to virtual 8086 monitor\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        // vm and rf flag are cleared in image stored on the stack\n        cpu.push32(cpu.get_eflags() & 0x00FCFFFF);\n    }\n};\nt16[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags((cpu.flags & ~0xFFFF) | cpu.pop16());\n\n    if(cpu.flags & flag_trap)\n    {\n        // XXX: Problems with fdgame\n        //cpu.clear_prefixes();\n        //cpu.cycle_internal();\n        cpu.flags &= ~flag_trap;\n        //cpu.instruction_pointer = cpu.previous_ip;\n        //cpu.raise_exception(1);\n    }\n    else\n    {\n        cpu.handle_irqs();\n    }\n};\nt32[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags(cpu.pop32s());\n    cpu.handle_irqs();\n};\nt[0x9E] = cpu => {\n    // sahf\n    cpu.flags = (cpu.flags & ~0xFF) | cpu.reg8[reg_ah];\n    cpu.flags = (cpu.flags & flags_mask) | flags_default;\n    cpu.flags_changed = 0;\n};\nt[0x9F] = cpu => {\n    // lahf\n    cpu.reg8[reg_ah] = cpu.get_eflags();\n};\n\nt[0xA0] = cpu => {\n    // mov\n    var data = cpu.safe_read8(cpu.read_moffs());\n    cpu.reg8[reg_al] = data;\n};\nt16[0xA1] = cpu => {\n    // mov\n    var data = cpu.safe_read16(cpu.read_moffs());\n    cpu.reg16[reg_ax] = data;\n};\nt32[0xA1] = cpu => {\n    var data = cpu.safe_read32s(cpu.read_moffs());\n    cpu.reg32s[reg_eax] = data;\n};\nt[0xA2] = cpu => {\n    // mov\n    cpu.safe_write8(cpu.read_moffs(), cpu.reg8[reg_al]);\n};\nt16[0xA3] = cpu => {\n    // mov\n    cpu.safe_write16(cpu.read_moffs(), cpu.reg16[reg_ax]);\n};\nt32[0xA3] = cpu => {\n    cpu.safe_write32(cpu.read_moffs(), cpu.reg32s[reg_eax]);\n};\n\nt[0xA4] = cpu => { cpu.movsb(); };\nt16[0xA5] = cpu => { cpu.movsw(); };\nt32[0xA5] = cpu => { cpu.movsd(); };\nt[0xA6] = cpu => { cmpsb(cpu); };\nt16[0xA7] = cpu => { cmpsw(cpu); };\nt32[0xA7] = cpu => { cmpsd(cpu); };\n\nt[0xA8] = cpu => {\n    cpu.test8(cpu.reg8[reg_al], cpu.read_op8());\n};\nt16[0xA9] = cpu => {\n    cpu.test16(cpu.reg16[reg_ax], cpu.read_op16());\n};\nt32[0xA9] = cpu => {\n    cpu.test32(cpu.reg32s[reg_eax], cpu.read_op32s());\n};\n\nt[0xAA] = cpu => { stosb(cpu); };\nt16[0xAB] = cpu => { stosw(cpu); };\nt32[0xAB] = cpu => { stosd(cpu); };\nt[0xAC] = cpu => { lodsb(cpu); };\nt16[0xAD] = cpu => { lodsw(cpu); };\nt32[0xAD] = cpu => { lodsd(cpu); };\nt[0xAE] = cpu => { scasb(cpu); };\nt16[0xAF] = cpu => { scasw(cpu); };\nt32[0xAF] = cpu => { scasd(cpu); };\n\n\nt[0xB0] = cpu => { cpu.reg8[reg_al] = cpu.read_op8(); };\nt[0xB1] = cpu => { cpu.reg8[reg_cl] = cpu.read_op8(); };\nt[0xB2] = cpu => { cpu.reg8[reg_dl] = cpu.read_op8(); };\nt[0xB3] = cpu => { cpu.reg8[reg_bl] = cpu.read_op8(); };\nt[0xB4] = cpu => { cpu.reg8[reg_ah] = cpu.read_op8(); };\nt[0xB5] = cpu => { cpu.reg8[reg_ch] = cpu.read_op8(); };\nt[0xB6] = cpu => { cpu.reg8[reg_dh] = cpu.read_op8(); };\nt[0xB7] = cpu => { cpu.reg8[reg_bh] = cpu.read_op8(); };\n\nt16[0xB8] = cpu => { cpu.reg16[reg_ax] = cpu.read_op16(); };\nt32[0xB8] = cpu => { cpu.reg32s[reg_eax] = cpu.read_op32s(); };\nt16[0xB9] = cpu => { cpu.reg16[reg_cx] = cpu.read_op16(); };\nt32[0xB9] = cpu => { cpu.reg32s[reg_ecx] = cpu.read_op32s(); };\nt16[0xBA] = cpu => { cpu.reg16[reg_dx] = cpu.read_op16(); };\nt32[0xBA] = cpu => { cpu.reg32s[reg_edx] = cpu.read_op32s(); };\nt16[0xBB] = cpu => { cpu.reg16[reg_bx] = cpu.read_op16(); };\nt32[0xBB] = cpu => { cpu.reg32s[reg_ebx] = cpu.read_op32s(); };\nt16[0xBC] = cpu => { cpu.reg16[reg_sp] = cpu.read_op16(); };\nt32[0xBC] = cpu => { cpu.reg32s[reg_esp] = cpu.read_op32s(); };\nt16[0xBD] = cpu => { cpu.reg16[reg_bp] = cpu.read_op16(); };\nt32[0xBD] = cpu => { cpu.reg32s[reg_ebp] = cpu.read_op32s(); };\nt16[0xBE] = cpu => { cpu.reg16[reg_si] = cpu.read_op16(); };\nt32[0xBE] = cpu => { cpu.reg32s[reg_esi] = cpu.read_op32s(); };\nt16[0xBF] = cpu => { cpu.reg16[reg_di] = cpu.read_op16(); };\nt32[0xBF] = cpu => { cpu.reg32s[reg_edi] = cpu.read_op32s(); };\n\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt16[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt32[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n    var ip = cpu.pop32s();\n\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt16[0xC3] = cpu => {\n    // retn\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    cpu.diverged();\n};\nt32[0xC3] = cpu => {\n    // retn\n    var ip = cpu.pop32s();\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.diverged();\n};\n\nt16[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_es);\n};\nt32[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_es);\n};\nt16[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ds);\n};\nt32[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ds);\n};\n\nt[0xC6] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write8(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8());\n    } else {\n        cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_op8();\n    }\n}\nt16[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write16(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op16());\n    } else {\n        cpu.reg16[cpu.modrm_byte << 1 & 14] = cpu.read_op16();\n    }\n};\nt32[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write32(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op32s());\n    } else {\n        cpu.reg32s[cpu.modrm_byte & 7] = cpu.read_op32s();\n    }\n}\n\nt16[0xC8] = cpu => { cpu.enter16(cpu.read_op16(), cpu.read_disp8()); };\nt32[0xC8] = cpu => { cpu.enter32(cpu.read_op16(), cpu.read_disp8()); };\nt16[0xC9] = cpu => {\n    // leave\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_bp = cpu.safe_read16(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 2 | 0);\n    cpu.reg16[reg_bp] = new_bp;\n};\nt32[0xC9] = cpu => {\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_ebp = cpu.safe_read32s(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 4 | 0);\n    cpu.reg32s[reg_ebp] = new_ebp;\n};\nt16[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, imm16);\n    cpu.diverged();\n};\nt32[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, imm16);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xCC] = cpu => {\n    // INT3\n    // TODO: inhibit iopl checks\n    dbg_log(\"INT3\", LOG_CPU);\n    cpu.call_interrupt_vector(3, true, false);\n    cpu.diverged();\n};\nt[0xCD] = cpu => {\n    // INT\n    var imm8 = cpu.read_op8();\n    cpu.call_interrupt_vector(imm8, true, false);\n    cpu.diverged();\n};\nt[0xCE] = cpu => {\n    // INTO\n    dbg_log(\"INTO\", LOG_CPU);\n    if(cpu.getof())\n    {\n        // TODO: inhibit iopl checks\n        cpu.call_interrupt_vector(4, true, false);\n    }\n    cpu.diverged();\n};\n\nt16[0xCF] = cpu => {\n    // iret\n    cpu.iret16();\n    cpu.diverged();\n};\nt32[0xCF] = cpu => {\n    cpu.iret32();\n    cpu.diverged();\n};\n\nt[0xD0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, 1); break;\n        case 1: result = cpu.ror8(op1, 1); break;\n        case 2: result = cpu.rcl8(op1, 1); break;\n        case 3: result = cpu.rcr8(op1, 1); break;\n        case 4: result = cpu.shl8(op1, 1); break;\n        case 5: result = cpu.shr8(op1, 1); break;\n        case 6: result = cpu.shl8(op1, 1); break;\n        case 7: result = cpu.sar8(op1, 1); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, 1); break;\n        case 1: result = cpu.ror16(op1, 1); break;\n        case 2: result = cpu.rcl16(op1, 1); break;\n        case 3: result = cpu.rcr16(op1, 1); break;\n        case 4: result = cpu.shl16(op1, 1); break;\n        case 5: result = cpu.shr16(op1, 1); break;\n        case 6: result = cpu.shl16(op1, 1); break;\n        case 7: result = cpu.sar16(op1, 1); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, 1); break;\n        case 1: result = cpu.ror32(op1, 1); break;\n        case 2: result = cpu.rcl32(op1, 1); break;\n        case 3: result = cpu.rcr32(op1, 1); break;\n        case 4: result = cpu.shl32(op1, 1); break;\n        case 5: result = cpu.shr32(op1, 1); break;\n        case 6: result = cpu.shl32(op1, 1); break;\n        case 7: result = cpu.sar32(op1, 1); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD2] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD4] = cpu => {\n    cpu.bcd_aam(cpu.read_op8());\n};\nt[0xD5] = cpu => {\n    cpu.bcd_aad(cpu.read_op8());\n};\n\nt[0xD6] = cpu => {\n    // salc\n    cpu.reg8[reg_al] = -cpu.getcf();\n};\nt[0xD7] = cpu => {\n    // xlat\n    if(cpu.is_asize_32())\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + cpu.reg32s[reg_ebx] + cpu.reg8[reg_al] | 0);\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + (cpu.reg16[reg_bx] + cpu.reg8[reg_al] & 0xFFFF) | 0);\n    }\n};\n\nt[0xD8] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D8_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D8_reg(cpu.modrm_byte);\n};\nt[0xD9] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D9_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D9_reg(cpu.modrm_byte);\n};\nt[0xDA] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DA_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DA_reg(cpu.modrm_byte);\n};\nt[0xDB] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DB_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DB_reg(cpu.modrm_byte);\n};\nt[0xDC] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DC_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DC_reg(cpu.modrm_byte);\n};\nt[0xDD] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DD_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DD_reg(cpu.modrm_byte);\n};\nt[0xDE] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DE_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DE_reg(cpu.modrm_byte);\n};\nt[0xDF] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DF_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DF_reg(cpu.modrm_byte);\n};\n\nt[0xE0] = cpu => { cpu.loopne(cpu.read_op8s()); };\nt[0xE1] = cpu => { cpu.loope(cpu.read_op8s()); };\nt[0xE2] = cpu => { cpu.loop(cpu.read_op8s()); };\nt[0xE3] = cpu => { cpu.jcxz(cpu.read_op8s()); };\n\nt[0xE4] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xE6] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt16[0xE8] = cpu => {\n    // call\n    var imm16 = cpu.read_op16();\n    cpu.push16(cpu.get_real_eip());\n\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE8] = cpu => {\n    // call\n    var imm32s = cpu.read_op32s();\n    cpu.push32(cpu.get_real_eip());\n\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xE9] = cpu => {\n    // jmp\n    var imm16 = cpu.read_op16();\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE9] = cpu => {\n    // jmp\n    var imm32s = cpu.read_op32s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xEA] = cpu => {\n    // jmpf\n    var ip = cpu.read_op16();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xEA] = cpu => {\n    // jmpf\n    var new_ip = cpu.read_op32s();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(new_ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt[0xEB] = cpu => {\n    // jmp near\n    var imm8 = cpu.read_op8s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm8 | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xEC] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xEE] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt[0xF0] = cpu => {\n    // lock\n    //dbg_log(\"lock\", LOG_CPU);\n\n    // TODO\n    // This triggers UD when used with\n    // some instructions that don't write to memory\n    cpu.run_prefix_instruction();\n};\nt[0xF1] = cpu => {\n    // INT1\n    // https://code.google.com/p/corkami/wiki/x86oddities#IceBP\n    throw cpu.debug.unimpl(\"int1 instruction\");\n};\n\nt[0xF2] = cpu => {\n    // repnz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPNZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\nt[0xF3] = cpu => {\n    // repz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0xF4] = cpu => {\n    cpu.hlt_op();\n};\n\nt[0xF5] = cpu => {\n    // cmc\n    cpu.flags = (cpu.flags | 1) ^ cpu.getcf();\n    cpu.flags_changed &= ~1;\n};\n\nt[0xF6] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 1:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 2:\n            var data = cpu.read_write_e8(); cpu.write_e8(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e8(); cpu.write_e8(cpu.neg8(data));\n            break;\n        case 4:\n            var data = cpu.read_e8(); cpu.mul8(data);\n            break;\n        case 5:\n            var data = cpu.read_e8s(); cpu.imul8(data);\n            break;\n        case 6:\n            var data = cpu.read_e8(); cpu.div8(data);\n            break;\n        case 7:\n            var data = cpu.read_e8s(); cpu.idiv8(data);\n            break;\n    }\n};\n\nt16[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 1:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 2:\n            var data = cpu.read_write_e16(); cpu.write_e16(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.neg16(data));\n            break;\n        case 4:\n            var data = cpu.read_e16(); cpu.mul16(data);\n            break;\n        case 5:\n            var data = cpu.read_e16s(); cpu.imul16(data);\n            break;\n        case 6:\n            var data = cpu.read_e16(); cpu.div16(data);\n            break;\n        case 7:\n            var data = cpu.read_e16s(); cpu.idiv16(data);\n            break;\n    }\n};\nt32[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 1:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 2:\n            var data = cpu.read_write_e32(); cpu.write_e32(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.neg32(data));\n            break;\n        case 4:\n            var data = cpu.read_e32(); cpu.mul32(data);\n            break;\n        case 5:\n            var data = cpu.read_e32s(); cpu.imul32(data);\n            break;\n        case 6:\n            var data = cpu.read_e32(); cpu.div32(data);\n            break;\n        case 7:\n            var data = cpu.read_e32s(); cpu.idiv32(data);\n            break;\n    }\n};\n\nt[0xF8] = cpu => {\n    // clc\n    cpu.flags &= ~flag_carry;\n    cpu.flags_changed &= ~1;\n};\nt[0xF9] = cpu => {\n    // stc\n    cpu.flags |= flag_carry;\n    cpu.flags_changed &= ~1;\n};\n\nt[0xFA] = cpu => {\n    // cli\n    //dbg_log(\"interrupts off\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags &= ~flag_interrupt;\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags &= ~flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"cli #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n};\nt[0xFB] = cpu => {\n    // sti\n    //dbg_log(\"interrupts on\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags |= flag_interrupt;\n\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n\n        cpu.handle_irqs();\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && (cpu.flags & flag_vip) === 0 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags |= flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"sti #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n\n};\n\nt[0xFC] = cpu => {\n    // cld\n    cpu.flags &= ~flag_direction;\n};\nt[0xFD] = cpu => {\n    // std\n    cpu.flags |= flag_direction;\n};\n\nt[0xFE] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte & 56;\n\n    if(mod === 0)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.inc8(data));\n    }\n    else if(mod === 8)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.dec8(data));\n    }\n    else\n    {\n        cpu.todo();\n    }\n};\nt16[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.inc16(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.dec16(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e16();\n            cpu.push16(cpu.get_real_eip());\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e16();\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // 6, push\n            var data = cpu.read_e16();\n            cpu.push16(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\nt32[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.inc32(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.dec32(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e32s();\n            cpu.push32(cpu.get_real_eip());\n\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e32s();\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // push\n            var data = cpu.read_e32s();\n            cpu.push32(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\n\nvar table16 = [];\nvar table32 = [];\nCPU.prototype.table16 = table16;\nCPU.prototype.table32 = table32;\n\nfor(var i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table16[i] = table32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table16[i] = t16[i];\n        table32[i] = t32[i];\n    }\n}\n\nt = [];\nt16 = [];\nt32 = [];\n\n// 0F ops start here\n\nt[0x00] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        // No GP, UD is correct here\n        dbg_log(\"0f 00 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            // sldt\n            cpu.set_e16(cpu.sreg[reg_ldtr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 1:\n            // str\n            cpu.set_e16(cpu.sreg[reg_tr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 2:\n            // lldt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_ldt(data);\n            break;\n        case 3:\n            // ltr\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_tr(data);\n            break;\n        case 4:\n            cpu.verr(cpu.read_e16());\n            break;\n        case 5:\n            cpu.verw(cpu.read_e16());\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0x01] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    if(mod === 4)\n    {\n        // smsw\n        if(cpu.modrm_byte >= 0xC0 && cpu.is_osize_32())\n        {\n            cpu.set_e32(cpu.cr[0]);\n        }\n        else\n        {\n            cpu.set_e16(cpu.cr[0]);\n        }\n        return;\n    }\n    else if(mod === 6)\n    {\n        // lmsw\n        if(cpu.cpl)\n        {\n            cpu.trigger_gp(0);\n        }\n\n        var cr0 = cpu.read_e16();\n\n        cr0 = (cpu.cr[0] & ~0xF) | (cr0 & 0xF);\n\n        if(cpu.protected_mode)\n        {\n            // lmsw cannot be used to switch back\n            cr0 |= CR0_PE;\n        }\n\n        cpu.set_cr0(cr0);\n        return;\n    }\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        // only memory\n        dbg_log(\"0f 01 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n    switch(mod)\n    {\n        case 0:\n            // sgdt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.gdtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.gdtr_offset & mask);\n            break;\n        case 1:\n            // sidt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.idtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.idtr_offset & mask);\n            break;\n        case 2:\n            // lgdt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.gdtr_size = size;\n            cpu.gdtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.gdtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"gdt at \" + h(cpu.gdtr_offset) + \", \" + cpu.gdtr_size + \" bytes\", LOG_CPU);\n            //cpu.debug.dump_state();\n            //cpu.debug.dump_regs_short();\n            //cpu.debug.dump_gdt_ldt();\n            break;\n        case 3:\n            // lidt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.idtr_size = size;\n            cpu.idtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.idtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"[\" + h(cpu.instruction_pointer) + \"] idt at \" +\n            //        h(idtr_offset) + \", \" + cpu.idtr_size + \" bytes \" + h(addr), LOG_CPU);\n            break;\n        case 7:\n            // flush translation lookaside buffer\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            cpu.invlpg(addr);\n            break;\n        default:\n            dbg_log(mod);\n            cpu.todo();\n    }\n};\n\nt16[0x02] = cpu => { cpu.read_modrm_byte();\n    // lar\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lar(data, cpu.read_g16()));\n};\nt32[0x02] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lar(data, cpu.read_g32s()));\n};\n\nt16[0x03] = cpu => { cpu.read_modrm_byte();\n    // lsl\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lsl(data, cpu.read_g16()));\n};\nt32[0x03] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lsl(data, cpu.read_g32s()));\n};\n\nt[0x04] = cpu => { cpu.undefined_instruction(); };\nt[0x05] = cpu => { cpu.undefined_instruction(); };\n\nt[0x06] = cpu => {\n    // clts\n    if(cpu.cpl)\n    {\n        dbg_log(\"clts #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        //dbg_log(\"clts\", LOG_CPU);\n        cpu.cr[0] &= ~CR0_TS;\n    }\n};\n\nt[0x07] = cpu => { cpu.undefined_instruction(); };\nt[0x08] = cpu => {\n    // invd\n    cpu.todo();\n};\n\nt[0x09] = cpu => {\n    if(cpu.cpl)\n    {\n        dbg_log(\"wbinvd #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    // wbinvd\n};\n\n\nt[0x0A] = cpu => { cpu.undefined_instruction(); };\nt[0x0B] = cpu => {\n    // UD2\n    cpu.trigger_ud();\n};\nt[0x0C] = cpu => { cpu.undefined_instruction(); };\n\nt[0x0D] = cpu => {\n    // nop\n    cpu.todo();\n};\n\nt[0x0E] = cpu => { cpu.undefined_instruction(); };\nt[0x0F] = cpu => { cpu.undefined_instruction(); };\n\nt[0x10] = cpu => { cpu.unimplemented_sse(); };\nt[0x11] = cpu => { cpu.unimplemented_sse(); };\nt[0x12] = cpu => {\n    // movlpd xmm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem64s();\n    cpu.write_xmm64(data[0], data[1]);\n};\nt[0x13] = cpu => {\n    // movlpd xmm/m64, xmm\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0x14] = cpu => { cpu.unimplemented_sse(); };\nt[0x15] = cpu => { cpu.unimplemented_sse(); };\nt[0x16] = cpu => { cpu.unimplemented_sse(); };\nt[0x17] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x18] = cpu => { cpu.read_modrm_byte();\n    // prefetch\n    // nop for us\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\nt[0x19] = cpu => { cpu.unimplemented_sse(); };\nt[0x1A] = cpu => { cpu.unimplemented_sse(); };\nt[0x1B] = cpu => { cpu.unimplemented_sse(); };\nt[0x1C] = cpu => { cpu.unimplemented_sse(); };\nt[0x1D] = cpu => { cpu.unimplemented_sse(); };\n// endbr32/endbr64\nt[0x1E] = cpu => { cpu.read_modrm_byte()\n    // multi-byte nop\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\nt[0x1F] = cpu => { cpu.read_modrm_byte()\n    // multi-byte nop\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\n\nt[0x20] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" read\", LOG_CPU);\n\n    // mov addr, cr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.write_reg_e32(cpu.cr[0]);\n            break;\n        case 2:\n            //dbg_log(\"read cr2 at \" + h(cpu.instruction_pointer >>> 0, 8));\n            cpu.write_reg_e32(cpu.cr[2]);\n            break;\n        case 3:\n            //dbg_log(\"read cr3 (\" + h(cpu.cr[3], 8) + \")\", LOG_CPU);\n            cpu.write_reg_e32(cpu.cr[3]);\n            break;\n        case 4:\n            cpu.write_reg_e32(cpu.cr[4]);\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\n\nt[0x21] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.reg32s[cpu.modrm_byte & 7] = cpu.dreg[dreg];\n\n    //dbg_log(\"read dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x22] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var data = cpu.read_reg_e32s();\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" written: \" + h(data >>> 0, 8), LOG_CPU);\n\n    // mov cr, addr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.set_cr0(data);\n            //dbg_log(\"cr0=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 2:\n            cpu.cr[2] = data;\n            //dbg_log(\"cr2=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 3:\n            //dbg_log(\"cr3=\" + h(data >>> 0), LOG_CPU);\n            data &= ~0b111111100111;\n            dbg_assert((data & 0xFFF) === 0, \"TODO\");\n            cpu.cr[3] = data;\n            cpu.clear_tlb();\n\n            //dump_page_directory();\n            //dbg_log(\"page directory loaded at \" + h(cpu.cr[3] >>> 0, 8), LOG_CPU);\n            break;\n\n        case 4:\n            cpu.set_cr4(data);\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\nt[0x23] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.dreg[dreg] = cpu.read_reg_e32s();\n\n    //dbg_log(\"write dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x24] = cpu => { cpu.undefined_instruction(); };\nt[0x25] = cpu => { cpu.undefined_instruction(); };\nt[0x26] = cpu => { cpu.undefined_instruction(); };\nt[0x27] = cpu => { cpu.undefined_instruction(); };\n\nt[0x28] = cpu => {\n    // movaps xmm, xmm/m128\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem128s();\n    cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n};\nt[0x29] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // movapd xmm/m128, xmm\n        // (note: same as below, see google.com/?q=MOVAPD+vs+MOVAPS)\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movaps xmm/m128, xmm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n};\nt[0x2A] = cpu => {\n    // cvtpi2ps xmm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_mmx_mem64s();\n    let float32 = new Float32Array(2);\n    let res32 = new Uint32Array(float32.buffer);\n    float32[0] = data[0];\n    float32[1] = data[1];\n    cpu.write_xmm64(res32[0], res32[1]);\n };\nt[0x2B] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // movntpd m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movntps m128, xmm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n };\nt[0x2C] = cpu => {\n    // cvttps2pi mm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let data = cpu.read_xmm_mem64s();\n    let float32 = new Float32Array(data.buffer);\n    let low = 0;\n    let high = 0;\n\n    var res0 = Math.trunc(float32[0]);\n    if(res0 <= 0x7FFFFFFF && res0 >= -0x80000000)\n    {\n        low = res0;\n    }\n    else\n    {\n        low = 0x80000000|0;\n    }\n\n    var res1 = Math.trunc(float32[1]);\n    if(res1 <= 0x7FFFFFFF && res1 >= -0x80000000)\n    {\n        high = res1;\n    }\n    else\n    {\n        high = 0x80000000|0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x2D] = cpu => {\n    // cvtps2pi mm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let data = cpu.read_xmm_mem64s();\n    let float32 = new Float32Array(data.buffer);\n    let low = 0;\n    let high = 0;\n    var rc = cpu.mxcsr >> 13 & 3;\n\n    var res0 = cpu.integer_round(float32[0], rc);\n    if(res0 <= 0x7FFFFFFF && res0 >= -0x80000000)\n    {\n        low = res0;\n    }\n    else\n    {\n        low = 0x80000000|0;\n    }\n\n    var res1 = cpu.integer_round(float32[1], rc);\n    if(res1 <= 0x7FFFFFFF && res1 >= -0x80000000)\n    {\n        high = res1;\n    }\n    else\n    {\n        high = 0x80000000|0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x2E] = cpu => {\n    // ucomiss xmm1, xmm2/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source1 = cpu.read_xmm128s();\n    let source2 = cpu.read_xmm_mem128s();\n\n    let x = (new Float32Array(source1.buffer))[0];\n    let y = (new Float32Array(source2.buffer))[0];\n\n    cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        cpu.flags |= flag_zero;\n    }\n    else\n    {\n        cpu.flags |= 1 | flag_parity | flag_zero;\n\n        if (cpu.is_SNaN32(source1[0]) || cpu.is_SNaN32(source2[0])) {\n            cpu.invalid_arithmatic();\n        }\n    }\n};\n\nt[0x2F] = cpu => {\n    // comiss xmm1, xmm2/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source1 = cpu.read_xmm128s();\n    let source2 = cpu.read_xmm_mem128s();\n\n    let x = (new Float32Array(source1.buffer))[0];\n    let y = (new Float32Array(source2.buffer))[0];\n\n    cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        cpu.flags |= flag_zero;\n    }\n    else\n    {\n        cpu.flags |= 1 | flag_parity | flag_zero;\n        cpu.invalid_arithmatic();\n    }\n};\n\n// wrmsr\nt[0x30] = cpu => {\n    // wrmsr - write maschine specific register\n\n    if(cpu.cpl)\n    {\n        // cpl > 0 or vm86 mode (vm86 mode is always runs with cpl=3)\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n    var low = cpu.reg32s[reg_eax];\n    var high = cpu.reg32s[reg_edx];\n\n    if(index !== IA32_SYSENTER_ESP)\n    {\n        dbg_log(\"wrmsr ecx=\" + h(index >>> 0, 8) +\n                    \" data=\" + h(high >>> 0, 8) + \":\" + h(low >>> 0, 8), LOG_CPU);\n    }\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            cpu.sysenter_cs = low & 0xFFFF;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            cpu.sysenter_eip = low;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            cpu.sysenter_esp = low;\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            dbg_assert(high === 0, \"Changing APIC address (high 32 bits) not supported\");\n            let address = low & ~(IA32_APIC_BASE_BSP | IA32_APIC_BASE_EXTD | IA32_APIC_BASE_EN);\n            dbg_assert((address >>> 0) === APIC_ADDRESS, \"Changing APIC address not supported\");\n            dbg_assert((low & IA32_APIC_BASE_EXTD) === 0, \"x2apic not supported\");\n            cpu.apic_enabled = (low & IA32_APIC_BASE_EN) === IA32_APIC_BASE_EN;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var new_tick = (low >>> 0) + 0x100000000 * (high >>> 0);\n            cpu.tsc_offset = v86.microtick() - new_tick / TSC_RATE;\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            dbg_log(\"IA32_MISC_ENABLE=\" + h(low >>> 0, 8), LOG_CPU);\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case IA32_KERNEL_GS_BASE:\n            // Only used in 64 bit mode (by SWAPGS), but set by kvm-unit-test\n            dbg_log(\"GS Base written\", LOG_CPU);\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n};\n\nt[0x31] = cpu => {\n    // rdtsc - read timestamp counter\n\n    if(!cpu.cpl || !(cpu.cr[4] & CR4_TSD))\n    {\n        var n = v86.microtick() - cpu.tsc_offset;\n        dbg_assert(isFinite(n), \"non-finite tsc: \" + n);\n\n        cpu.reg32s[reg_eax] = n * TSC_RATE;\n        cpu.reg32s[reg_edx] = n * (TSC_RATE / 0x100000000);\n\n        //dbg_log(\"rdtsc  edx:eax=\" + h(cpu.reg32[reg_edx], 8) + \":\" + h(cpu.reg32[reg_eax], 8), LOG_CPU);\n    }\n    else\n    {\n        cpu.trigger_gp(0);\n    }\n};\n\nt[0x32] = cpu => {\n    // rdmsr - read maschine specific register\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n\n    dbg_log(\"rdmsr ecx=\" + h(index >>> 0, 8), LOG_CPU);\n\n    var low = 0;\n    var high = 0;\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            low = cpu.sysenter_cs;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            low = cpu.sysenter_eip;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            low = cpu.sysenter_esp;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var n = v86.microtick() - cpu.tsc_offset;\n            low = n * TSC_RATE;\n            high = n * (TSC_RATE / 0x100000000);\n            break;\n\n        case IA32_PLATFORM_ID:\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            if(ENABLE_ACPI)\n            {\n                low = APIC_ADDRESS;\n\n                if(cpu.apic_enabled)\n                {\n                    low |= IA32_APIC_BASE_EN;\n                }\n            }\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            break;\n\n        case IA32_RTIT_CTL:\n            // linux4\n            break;\n\n        case MSR_SMI_COUNT:\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case MSR_PKG_C2_RESIDENCY:\n            break;\n\n        case MSR_EBC_FREQUENCY_ID:\n            low = 1 << 24;\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n\n    cpu.reg32s[reg_eax] = low;\n    cpu.reg32s[reg_edx] = high;\n};\n\nt[0x33] = cpu => {\n    // rdpmc\n    cpu.todo();\n};\n\nt[0x34] = cpu => {\n    // sysenter\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysenter  cs:eip=\" + h(seg    , 4) + \":\" + h(cpu.sysenter_eip >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 8, 4) + \":\" + h(cpu.sysenter_esp >>> 0, 8), LOG_CPU);\n\n    cpu.flags &= ~flag_vm & ~flag_interrupt;\n\n    cpu.instruction_pointer = cpu.sysenter_eip;\n    cpu.reg32s[reg_esp] = cpu.sysenter_esp;\n\n    cpu.sreg[reg_cs] = seg;\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 0;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 8;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x35] = cpu => {\n    // sysexit\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || cpu.cpl || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysexit  cs:eip=\" + h(seg + 16, 4) + \":\" + h(cpu.reg32s[reg_edx] >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 24, 4) + \":\" + h(cpu.reg32s[reg_ecx] >>> 0, 8), LOG_CPU);\n\n    cpu.instruction_pointer = cpu.reg32s[reg_edx];\n    cpu.reg32s[reg_esp] = cpu.reg32s[reg_ecx];\n\n    cpu.sreg[reg_cs] = seg + 16 | 3;\n\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 3;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 24 | 3;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x36] = cpu => { cpu.undefined_instruction(); };\n\nt[0x37] = cpu => {\n    // getsec\n    cpu.todo();\n};\n\n// sse3+\nt[0x38] = cpu => { cpu.unimplemented_sse(); };\nt[0x39] = cpu => { cpu.unimplemented_sse(); };\nt[0x3A] = cpu => { cpu.unimplemented_sse(); };\nt[0x3B] = cpu => { cpu.unimplemented_sse(); };\nt[0x3C] = cpu => { cpu.unimplemented_sse(); };\nt[0x3D] = cpu => { cpu.unimplemented_sse(); };\nt[0x3E] = cpu => { cpu.unimplemented_sse(); };\nt[0x3F] = cpu => { cpu.unimplemented_sse(); };\n\n// cmov\nt16[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_o()); };\nt32[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_o()); };\nt16[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_o()); };\nt32[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_o()); };\nt16[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_b()); };\nt32[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_b()); };\nt16[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_b()); };\nt32[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_b()); };\nt16[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_z()); };\nt32[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_z()); };\nt16[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_z()); };\nt32[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_z()); };\nt16[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_be()); };\nt32[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_be()); };\nt16[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_be()); };\nt32[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_be()); };\nt16[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_s()); };\nt32[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_s()); };\nt16[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_s()); };\nt32[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_s()); };\nt16[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_p()); };\nt32[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_p()); };\nt16[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_p()); };\nt32[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_p()); };\nt16[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_l()); };\nt32[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_l()); };\nt16[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_l()); };\nt32[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_l()); };\nt16[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_le()); };\nt32[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_le()); };\nt16[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_le()); };\nt32[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_le()); };\n\n\nt[0x50] = cpu => { cpu.unimplemented_sse(); };\nt[0x51] = cpu => { cpu.unimplemented_sse(); };\nt[0x52] = cpu => { cpu.unimplemented_sse(); };\nt[0x53] = cpu => { cpu.unimplemented_sse(); };\nt[0x54] = cpu => { cpu.unimplemented_sse(); };\nt[0x55] = cpu => { cpu.unimplemented_sse(); };\nt[0x56] = cpu => { cpu.unimplemented_sse(); };\nt[0x57] = cpu => {\n    // xorps xmm, xmm/mem128\n    // xorpd xmm, xmm/mem128\n    // Note: Same code as pxor\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_xmm_mem128s();\n    let destination = cpu.read_xmm128s();\n\n    cpu.write_xmm128s(\n        source[0] ^ destination[0],\n        source[1] ^ destination[1],\n        source[2] ^ destination[2],\n        source[3] ^ destination[3]\n    );\n};\n\nt[0x58] = cpu => { cpu.unimplemented_sse(); };\nt[0x59] = cpu => { cpu.unimplemented_sse(); };\nt[0x5A] = cpu => { cpu.unimplemented_sse(); };\nt[0x5B] = cpu => { cpu.unimplemented_sse(); };\nt[0x5C] = cpu => { cpu.unimplemented_sse(); };\nt[0x5D] = cpu => { cpu.unimplemented_sse(); };\nt[0x5E] = cpu => { cpu.unimplemented_sse(); };\nt[0x5F] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x60] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[0] | source8[0] << 8 | destination8[1] << 16 | source8[1] << 24,\n            destination8[2] | source8[2] << 8 | destination8[3] << 16 | source8[3] << 24,\n            destination8[4] | source8[4] << 8 | destination8[5] << 16 | source8[5] << 24,\n            destination8[6] | source8[6] << 8 | destination8[7] << 16 | source8[7] << 24\n        );\n    }\n    else\n    {\n        // punpcklbw mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let byte0 = destination_low & 0xFF;\n        let byte1 = source & 0xFF;\n        let byte2 = (destination_low >> 8) & 0xFF;\n        let byte3 = (source >> 8) & 0xFF;\n        let byte4 = (destination_low >> 16) & 0xFF;\n        let byte5 = (source >> 16) & 0xFF;\n        let byte6 = destination_low >>> 24;\n        let byte7 = source >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x61] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklwd xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination16[0] | source16[0] << 16,\n            destination16[1] | source16[1] << 16,\n            destination16[2] | source16[2] << 16,\n            destination16[3] | source16[3] << 16\n        );\n    }\n    else\n    {\n        // punpcklwd mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let word0 = destination_low & 0xFFFF;\n        let word1 = source & 0xFFFF;\n        let word2 = destination_low >>> 16;\n        let word3 = source >>> 16;\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x62] = cpu => {\n    // punpckldq mm, mm/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem32s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n    let low = destination_low;\n    let high = source;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x63] = cpu => {\n    // packsswb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= (cpu.saturate_sw_to_sb((destination_low) & 0xFFFF));\n    low |= (cpu.saturate_sw_to_sb(destination_low >>> 16)) << 8;\n    low |= (cpu.saturate_sw_to_sb((destination_high) & 0xFFFF)) << 16;\n    low |= (cpu.saturate_sw_to_sb(destination_high >>> 16)) << 24;\n\n    let high = 0;\n    high |= (cpu.saturate_sw_to_sb((source[0]) & 0xFFFF));\n    high |= (cpu.saturate_sw_to_sb(source[0] >>> 16)) << 8;\n    high |= (cpu.saturate_sw_to_sb((source[1]) & 0xFFFF)) << 16;\n    high |= (cpu.saturate_sw_to_sb(source[1] >>> 16)) << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x64] = cpu => {\n    // pcmpgtb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = destination8s[reg_offset] > source8s[0] ? 0xFF : 0;\n    let byte1 = destination8s[reg_offset + 1] > source8s[1] ? 0xFF : 0;\n    let byte2 = destination8s[reg_offset + 2] > source8s[2] ? 0xFF : 0;\n    let byte3 = destination8s[reg_offset + 3] > source8s[3] ? 0xFF : 0;\n    let byte4 = destination8s[reg_offset + 4] > source8s[4] ? 0xFF : 0;\n    let byte5 = destination8s[reg_offset + 5] > source8s[5] ? 0xFF : 0;\n    let byte6 = destination8s[reg_offset + 6] > source8s[6] ? 0xFF : 0;\n    let byte7 = destination8s[reg_offset + 7] > source8s[7] ? 0xFF : 0;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x65] = cpu => {\n    // pcmpgtw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low << 16 >> 16) > (source[0] << 16 >> 16) ? 0xFFFF : 0;\n    let word1 = (destination_low >> 16) > (source[0] >> 16) ? 0xFFFF : 0;\n    let word2 = (destination_high << 16 >> 16) > (source[1] << 16 >> 16) ? 0xFFFF : 0;\n    let word3 = (destination_high >> 16) > (source[1] >> 16) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x66] = cpu => {\n    // pcmpgtd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low > source[0] ? -1 : 0;\n    let high = destination_high > source[1] ? -1 : 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x67] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 8; i++)\n        {\n            result8[i] = cpu.saturate_sw_to_ub(destination16s[i]);\n            result8[i | 8] = cpu.saturate_sw_to_ub(source16s[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3]);\n    }\n    else\n    {\n        // packuswb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = 0;\n        low |= (cpu.saturate_sw_to_ub((destination_low) & 0xFFFF));\n        low |= (cpu.saturate_sw_to_ub(destination_low >>> 16)) << 8;\n        low |= (cpu.saturate_sw_to_ub((destination_high) & 0xFFFF)) << 16;\n        low |= (cpu.saturate_sw_to_ub(destination_high >>> 16)) << 24;\n\n        let high = 0;\n        high |= (cpu.saturate_sw_to_ub((source[0]) & 0xFFFF));\n        high |= (cpu.saturate_sw_to_ub(source[0] >>> 16)) << 8;\n        high |= (cpu.saturate_sw_to_ub((source[1]) & 0xFFFF)) << 16;\n        high |= (cpu.saturate_sw_to_ub(source[1] >>> 16)) << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x68] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpckhbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[ 8] | source8[ 8] << 8 | destination8[ 9] << 16 | source8[ 9] << 24,\n            destination8[10] | source8[10] << 8 | destination8[11] << 16 | source8[11] << 24,\n            destination8[12] | source8[12] << 8 | destination8[13] << 16 | source8[13] << 24,\n            destination8[14] | source8[14] << 8 | destination8[15] << 16 | source8[15] << 24\n        );\n    }\n    else\n    {\n        // punpckhbw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let byte0 = destination_high & 0xFF;\n        let byte1 = source[1] & 0xFF;\n        let byte2 = (destination_high >> 8) & 0xFF;\n        let byte3 = (source[1] >> 8) & 0xFF;\n        let byte4 = (destination_high >> 16) & 0xFF;\n        let byte5 = (source[1] >> 16) & 0xFF;\n        let byte6 = destination_high >>> 24;\n        let byte7 = source[1] >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x69] = cpu => {\n    // punpckhwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = destination_high & 0xFFFF;\n    let word1 = source[1] & 0xFFFF;\n    let word2 = destination_high >>> 16;\n    let word3 = source[1] >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6A] = cpu => {\n    // punpckhdq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_high;\n    let high = source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6B] = cpu => {\n    // packssdw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= cpu.saturate_sd_to_sw(destination_low);\n    low |= cpu.saturate_sd_to_sw(destination_high) << 16;\n\n    let high = 0;\n    high |= cpu.saturate_sd_to_sw(source[0]);\n    high |= cpu.saturate_sd_to_sw(source[1]) << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6C] = cpu => { cpu.unimplemented_sse(); };\nt[0x6D] = cpu => { cpu.unimplemented_sse(); };\nt[0x6E] = cpu => {\n    // movd mm, r/m32\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        let data = cpu.read_e32s();\n        cpu.write_xmm128s(data, 0, 0, 0);\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_e32s();\n        cpu.write_mmx64s(data, 0);\n    }\n};\nt[0x6F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm, xmm/mem128\n        let data = cpu.read_xmm_mem128s();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm, xmm/m128\n        let data = cpu.read_xmm_mem128s_unaligned();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx_mem64s();\n        cpu.write_mmx64s(data[0], data[1]);\n    }\n};\n\nt[0x70] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // pshufd xmm, xmm/mem128\n        let source = cpu.read_xmm_mem128s();\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[order & 3],\n            source[order >> 2 & 3],\n            source[order >> 4 & 3],\n            source[order >> 6 & 3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F2)\n    {\n        // pshuflw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source16[order & 3] | source16[order >> 2 & 3] << 16,\n            source16[order >> 4 & 3] | source16[order >> 6 & 3] << 16,\n            source[2],\n            source[3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // pshufhw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[0],\n            source[1],\n            source16[order & 3 | 4] | source16[order >> 2 & 3 | 4] << 16,\n            source16[order >> 4 & 3 | 4] | source16[order >> 6 & 3 | 4] << 16\n        );\n    }\n    else\n    {\n        // pshufw mm1, mm2/m64, imm8\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let order = cpu.read_op8();\n\n        let word0_shift = order & 0b11;\n        let word0 = source[word0_shift >> 1] >>> ((word0_shift & 1) * 16) & 0xFFFF;\n        let word1_shift = (order >> 2) & 0b11;\n        let word1 = source[word1_shift >> 1] >>> ((word1_shift & 1) * 16);\n        let low = word0 | word1 << 16;\n\n        let word2_shift = (order >> 4) & 0b11;\n        let word2 = source[word2_shift >> 1] >>> ((word2_shift & 1) * 16) & 0xFFFF;\n        let word3_shift = (order >>> 6);\n        let word3 = source[word3_shift >> 1] >>> ((word3_shift & 1) * 16);\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0x71] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlw, psraw, psllw\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = (destination_low & 0xFFFF) >>> shift;\n                var word1 = (destination_low >>> 16) >>> shift;\n                low = word0 | word1 << 16;\n\n                var word2 = (destination_high & 0xFFFF) >>> shift;\n                var word3 = (destination_high >>> 16) >>> shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psraw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 15) {\n                shift = 16;\n            }\n\n            var word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n            var word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n            var low = word0 | word1 << 16;\n\n            var word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n            var word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n            var high = word2 | word3 << 16;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n                var word1 = (destination_low >>> 16) << shift;\n                low = word0 | word1 << 16;\n\n                var word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n                var word3 = (destination_high >>> 16) << shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x72] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrld, psrad, pslld\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift;\n                high = destination_high >>> shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psrad mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 31) {\n                shift = 31;\n            }\n\n            var low = destination_low >> shift;\n            var high = destination_high >> shift;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // pslld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x73] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlq, psllq\n    //     2,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift | (destination_high << (32 - shift));\n                high = destination_high >>> shift;\n            }\n            else if (shift <= 63) {\n                low = destination_high >>> (shift & 0x1F);\n                high = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift | (destination_low >>> (32 - shift));\n            }\n            else if (shift <= 63) {\n                high = destination_low << (shift & 0x1F);\n                low = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x74] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqb xmm, xmm/m128\n        let source64s = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let destination128 = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination128.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] === destination8[i] ? 0xFF : 0;\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // pcmpeqb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source64s = cpu.read_mmx_mem64s();\n        let source8s = new Int8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8s = cpu.reg_mmx8s;\n\n        let byte0 = destination8s[reg_offset] === source8s[0] ? 0xFF : 0;\n        let byte1 = destination8s[reg_offset + 1] === source8s[1] ? 0xFF : 0;\n        let byte2 = destination8s[reg_offset + 2] === source8s[2] ? 0xFF : 0;\n        let byte3 = destination8s[reg_offset + 3] === source8s[3] ? 0xFF : 0;\n        let byte4 = destination8s[reg_offset + 4] === source8s[4] ? 0xFF : 0;\n        let byte5 = destination8s[reg_offset + 5] === source8s[5] ? 0xFF : 0;\n        let byte6 = destination8s[reg_offset + 6] === source8s[6] ? 0xFF : 0;\n        let byte7 = destination8s[reg_offset + 7] === source8s[7] ? 0xFF : 0;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x75] = cpu => {\n    // pcmpeqw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) === (source[0] & 0xFFFF) ? 0xFFFF : 0;\n    let word1 = (destination_low & 0xFFFF0000) === (source[0] & 0xFFFF0000) ? 0xFFFF : 0;\n    let word2 = (destination_high & 0xFFFF) === (source[1] & 0xFFFF) ? 0xFFFF : 0;\n    let word3 = (destination_high & 0xFFFF0000) === (source[1] & 0xFFFF0000) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x76] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqd xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] === destination[0] ? -1 : 0,\n            source[1] === destination[1] ? -1 : 0,\n            source[2] === destination[2] ? -1 : 0,\n            source[3] === destination[3] ? -1 : 0\n        );\n    }\n    else\n    {\n        // pcmpeqd mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = destination_low === source[0] ? -1 : 0;\n        let high = destination_high === source[1] ? -1 : 0;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x77] = cpu => {\n    // emms\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.fpu.stack_empty = 0xFF;\n};\n\nt[0x78] = cpu => { cpu.unimplemented_sse(); };\nt[0x79] = cpu => { cpu.unimplemented_sse(); };\nt[0x7A] = cpu => { cpu.unimplemented_sse(); };\nt[0x7B] = cpu => { cpu.unimplemented_sse(); };\nt[0x7C] = cpu => { cpu.unimplemented_sse(); };\nt[0x7D] = cpu => { cpu.unimplemented_sse(); };\nt[0x7E] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // movq xmm, xmm/mem64\n        let data = cpu.read_xmm_mem64s();\n        cpu.write_xmm128s(data[0], data[1], 0, 0);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movd r/m32, xmm\n        let data = cpu.read_xmm64s();\n        cpu.set_e32(data[0]);\n    }\n    else\n    {\n        // movd r/m32, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx64s();\n        cpu.set_e32(data[0]);\n    }\n};\nt[0x7F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm/m64, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let data = cpu.read_mmx64s();\n        cpu.set_mmx_mem64s(data[0], data[1]);\n    }\n};\n\n// jmpcc\nt16[0x80] = cpu => { cpu.jmpcc16( cpu.test_o()); };\nt32[0x80] = cpu => { cpu.jmpcc32( cpu.test_o()); };\nt16[0x81] = cpu => { cpu.jmpcc16(!cpu.test_o()); };\nt32[0x81] = cpu => { cpu.jmpcc32(!cpu.test_o()); };\nt16[0x82] = cpu => { cpu.jmpcc16( cpu.test_b()); };\nt32[0x82] = cpu => { cpu.jmpcc32( cpu.test_b()); };\nt16[0x83] = cpu => { cpu.jmpcc16(!cpu.test_b()); };\nt32[0x83] = cpu => { cpu.jmpcc32(!cpu.test_b()); };\nt16[0x84] = cpu => { cpu.jmpcc16( cpu.test_z()); };\nt32[0x84] = cpu => { cpu.jmpcc32( cpu.test_z()); };\nt16[0x85] = cpu => { cpu.jmpcc16(!cpu.test_z()); };\nt32[0x85] = cpu => { cpu.jmpcc32(!cpu.test_z()); };\nt16[0x86] = cpu => { cpu.jmpcc16( cpu.test_be()); };\nt32[0x86] = cpu => { cpu.jmpcc32( cpu.test_be()); };\nt16[0x87] = cpu => { cpu.jmpcc16(!cpu.test_be()); };\nt32[0x87] = cpu => { cpu.jmpcc32(!cpu.test_be()); };\nt16[0x88] = cpu => { cpu.jmpcc16( cpu.test_s()); };\nt32[0x88] = cpu => { cpu.jmpcc32( cpu.test_s()); };\nt16[0x89] = cpu => { cpu.jmpcc16(!cpu.test_s()); };\nt32[0x89] = cpu => { cpu.jmpcc32(!cpu.test_s()); };\nt16[0x8A] = cpu => { cpu.jmpcc16( cpu.test_p()); };\nt32[0x8A] = cpu => { cpu.jmpcc32( cpu.test_p()); };\nt16[0x8B] = cpu => { cpu.jmpcc16(!cpu.test_p()); };\nt32[0x8B] = cpu => { cpu.jmpcc32(!cpu.test_p()); };\nt16[0x8C] = cpu => { cpu.jmpcc16( cpu.test_l()); };\nt32[0x8C] = cpu => { cpu.jmpcc32( cpu.test_l()); };\nt16[0x8D] = cpu => { cpu.jmpcc16(!cpu.test_l()); };\nt32[0x8D] = cpu => { cpu.jmpcc32(!cpu.test_l()); };\nt16[0x8E] = cpu => { cpu.jmpcc16( cpu.test_le()); };\nt32[0x8E] = cpu => { cpu.jmpcc32( cpu.test_le()); };\nt16[0x8F] = cpu => { cpu.jmpcc16(!cpu.test_le()); };\nt32[0x8F] = cpu => { cpu.jmpcc32(!cpu.test_le()); };\n\n// setcc\nt[0x90] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_o()); };\nt[0x91] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_o()); };\nt[0x92] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_b()); };\nt[0x93] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_b()); };\nt[0x94] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_z()); };\nt[0x95] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_z()); };\nt[0x96] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_be()); };\nt[0x97] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_be()); };\nt[0x98] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_s()); };\nt[0x99] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_s()); };\nt[0x9A] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_p()); };\nt[0x9B] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_p()); };\nt[0x9C] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_l()); };\nt[0x9D] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_l()); };\nt[0x9E] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_le()); };\nt[0x9F] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_le()); };\n\nt16[0xA0] = cpu => { cpu.push16(cpu.sreg[reg_fs]); };\nt32[0xA0] = cpu => { cpu.push32(cpu.sreg[reg_fs]); };\nt16[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0xA2] = cpu => { cpu.cpuid(); };\n\nt16[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e16(), cpu.read_g16() & 15);\n    }\n};\nt32[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31);\n    }\n};\n\nt16[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xA6] = cpu => {\n    // obsolete cmpxchg (os/2)\n    cpu.trigger_ud();\n};\nt[0xA7] = cpu => { cpu.undefined_instruction(); };\n\nt16[0xA8] = cpu => { cpu.push16(cpu.sreg[reg_gs]); };\nt32[0xA8] = cpu => { cpu.push32(cpu.sreg[reg_gs]); };\nt16[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\n\nt[0xAA] = cpu => {\n    // rsm\n    cpu.todo();\n};\n\nt16[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n\nt16[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xAE] = cpu => { cpu.read_modrm_byte();\n    // xsave, xrstor, ...\n    if(cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) cpu.todo();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: // fxsave\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxsave(addr);\n            break;\n\n        case 1: // fxrstor\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxrstor(addr);\n            break;\n\n        case 2: // ldmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            let new_mxcsr = cpu.safe_read32s(addr);\n            if(new_mxcsr & ~MXCSR_MASK)\n            {\n                dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n                cpu.trigger_gp(0);\n            }\n            cpu.mxcsr = new_mxcsr;\n            break;\n\n        case 3: // stmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.safe_write32(addr, cpu.mxcsr);\n            break;\n\n        case 5:\n            // lfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected lfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 6:\n            // mfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected mfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 7:\n            // sfence or clflush\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected sfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        default:\n            dbg_log(\"missing \" + (cpu.modrm_byte >> 3 & 7), LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt16[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_g16s(), data));\n};\nt32[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_g32s(), data));\n};\n\nt[0xB0] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg8\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 1);\n\n        var data = cpu.safe_read8(virt_addr);\n    }\n    else\n        data = cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1];\n\n\n    cpu.cmp8(cpu.reg8[reg_al], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, cpu.read_g8());\n        else\n            cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_g8();\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, data);\n\n        cpu.reg8[reg_al] = data;\n    }\n};\nt16[0xB1] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg16/32\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 2);\n\n        var data = cpu.safe_read16(virt_addr);\n    }\n    else\n        data = cpu.read_reg_e16();\n\n    cpu.cmp16(cpu.reg16[reg_ax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, cpu.read_g16());\n        else\n            cpu.write_reg_e16(cpu.read_g16());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, data);\n\n        cpu.reg16[reg_ax] = data;\n    }\n};\nt32[0xB1] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 4);\n\n        var data = cpu.safe_read32s(virt_addr);\n    }\n    else\n    {\n        data = cpu.read_reg_e32s();\n    }\n\n    cpu.cmp32(cpu.reg32s[reg_eax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, cpu.read_g32s());\n        else\n            cpu.write_reg_e32(cpu.read_g32s());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, data);\n\n        cpu.reg32s[reg_eax] = data;\n    }\n};\n\n// lss\nt16[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ss);\n};\nt32[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ss);\n};\n\nt16[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n// lfs, lgs\nt16[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_fs);\n};\nt32[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_fs);\n};\nt16[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_gs);\n};\nt32[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_gs);\n};\n\nt16[0xB6] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    var data = cpu.read_e8();\n    cpu.write_g16(data);\n};\nt32[0xB6] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g32(data);\n};\n\nt16[0xB7] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0xB7] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g32(data);\n};\n\nt16[0xB8] = cpu => { cpu.read_modrm_byte();\n    // popcnt\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.popcnt(data));\n};\nt32[0xB8] = cpu => { cpu.read_modrm_byte();\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.popcnt(data));\n};\n\nt[0xB9] = cpu => {\n    // UD\n    cpu.todo();\n};\n\nt16[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e16(), cpu.read_op8() & 15);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\nt32[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\n\nt16[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\nt16[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsf16(cpu.read_g16(), data));\n};\nt32[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsf32(cpu.read_g32s(), data));\n};\n\nt16[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsr16(cpu.read_g16(), data));\n};\nt32[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsr32(cpu.read_g32s(), data));\n};\n\nt16[0xBE] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    var data = cpu.read_e8s();\n    cpu.write_g16(data);\n};\nt32[0xBE] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8s();\n    cpu.write_g32(data);\n};\n\nt16[0xBF] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\n\nt32[0xBF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g32(data);\n};\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e8(); cpu.write_e8(cpu.xadd8(data, cpu.modrm_byte >> 1 & 0xC | cpu.modrm_byte >> 5 & 1));\n};\n\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16();\n    cpu.write_e16(cpu.xadd16(data, cpu.modrm_byte >> 2 & 14));\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32();\n    cpu.write_e32(cpu.xadd32(data, cpu.modrm_byte >> 3 & 7));\n};\n\n\nt[0xC2] = cpu => { cpu.unimplemented_sse(); };\nt[0xC3] = cpu => {\n    // movnti\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n    cpu.set_e32(cpu.read_g32s());\n};\nt[0xC4] = cpu => { cpu.unimplemented_sse(); };\nt[0xC5] = cpu => { cpu.unimplemented_sse(); };\nt[0xC6] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xC7] = cpu => {\n    cpu.read_modrm_byte();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 1:\n            // cmpxchg8b\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                cpu.trigger_ud();\n            }\n\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.writable_or_pagefault(addr, 8);\n\n            var m64_low = cpu.safe_read32s(addr);\n            var m64_high = cpu.safe_read32s(addr + 4 | 0);\n\n            if(cpu.reg32s[reg_eax] === m64_low &&\n               cpu.reg32s[reg_edx] === m64_high)\n            {\n                cpu.flags |= flag_zero;\n\n                cpu.safe_write32(addr, cpu.reg32s[reg_ebx]);\n                cpu.safe_write32(addr + 4 | 0, cpu.reg32s[reg_ecx]);\n            }\n            else\n            {\n                cpu.flags &= ~flag_zero;\n\n                cpu.reg32s[reg_eax] = m64_low;\n                cpu.reg32s[reg_edx] = m64_high;\n\n                cpu.safe_write32(addr, m64_low);\n                cpu.safe_write32(addr + 4 | 0, m64_high);\n            }\n\n            cpu.flags_changed &= ~flag_zero;\n            break;\n\n        case 6:\n            var has_rand = v86util.has_rand_int();\n\n            if(has_rand)\n            {\n                var rand = v86util.get_rand_int();\n            }\n            else\n            {\n                var rand = 0;\n            }\n            //dbg_log(\"rdrand -> \" + h(rand >>> 0, 8), LOG_CPU);\n\n            if(cpu.is_osize_32())\n            {\n                cpu.set_e32(rand);\n            }\n            else\n            {\n                cpu.set_e16(rand);\n            }\n\n            cpu.flags &= ~flags_all;\n            cpu.flags |= has_rand;\n            cpu.flags_changed = 0;\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0xC8] = cpu => { cpu.bswap(reg_eax); };\nt[0xC9] = cpu => { cpu.bswap(reg_ecx); };\nt[0xCA] = cpu => { cpu.bswap(reg_edx); };\nt[0xCB] = cpu => { cpu.bswap(reg_ebx); };\nt[0xCC] = cpu => { cpu.bswap(reg_esp); };\nt[0xCD] = cpu => { cpu.bswap(reg_ebp); };\nt[0xCE] = cpu => { cpu.bswap(reg_esi); };\nt[0xCF] = cpu => { cpu.bswap(reg_edi); };\n\nt[0xD0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xD1] = cpu => {\n    // psrlw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = (destination_low & 0xFFFF) >>> shift;\n        let word1 = (destination_low >>> 16) >>> shift;\n        low = word0 | word1 << 16;\n\n        let word2 = (destination_high & 0xFFFF) >>> shift;\n        let word3 = (destination_high >>> 16) >>> shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD2] = cpu => {\n    // psrld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift;\n        high = destination_high >>> shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD3] = cpu => {\n    // psrlq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift | (destination_high << (32 - shift));\n        high = destination_high >>> shift;\n    }\n    else if (shift <= 63) {\n        low = destination_high >>> (shift & 0x1F);\n        high = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD4] = cpu => { cpu.unimplemented_sse(); };\nt[0xD5] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmullw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            source16s[0] * destination16s[0] & 0xFFFF | source16s[1] * destination16s[1] << 16,\n            source16s[2] * destination16s[2] & 0xFFFF | source16s[3] * destination16s[3] << 16,\n            source16s[4] * destination16s[4] & 0xFFFF | source16s[5] * destination16s[5] << 16,\n            source16s[6] * destination16s[6] & 0xFFFF | source16s[7] * destination16s[7] << 16\n        );\n    }\n    else\n    {\n        // pmullw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = ((destination_low & 0xFFFF) * (source[0] & 0xFFFF)) & 0xFFFF;\n        let word1 = ((destination_low >>> 16) * (source[0] >>> 16)) & 0xFFFF;\n        let low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) * (source[1] & 0xFFFF)) & 0xFFFF;\n        let word3 = ((destination_high >>> 16) * (source[1] >>> 16)) & 0xFFFF;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0xD6] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // movq xmm/m64, xmm\n    var data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0xD7] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n\n    // pmovmskb reg, xmm\n    let data = cpu.read_xmm_mem128s();\n    let data8 = new Uint8Array(data.buffer);\n    let result =\n        data8[0] >> 7 << 0 | data8[1] >> 7 << 1 | data8[2] >> 7 << 2 | data8[3] >> 7 << 3 |\n        data8[4] >> 7 << 4 | data8[5] >> 7 << 5 | data8[6] >> 7 << 6 | data8[7] >> 7 << 7 |\n        data8[8] >> 7 << 8 | data8[9] >> 7 << 9 | data8[10] >> 7 << 10 | data8[11] >> 7 << 11 |\n        data8[12] >> 7 << 12 | data8[13] >> 7 << 13 | data8[14] >> 7 << 14 | data8[15] >> 7 << 15;\n    cpu.write_g32(result);\n};\n\nt[0xD8] = cpu => {\n    // psubusb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8 = new Uint8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8 = cpu.reg_mmx8;\n\n    let byte0 = cpu.saturate_sd_to_ub(destination8[reg_offset] - source8[0]);\n    let byte1 = cpu.saturate_sd_to_ub(destination8[reg_offset + 1] - source8[1]);\n    let byte2 = cpu.saturate_sd_to_ub(destination8[reg_offset + 2] - source8[2]);\n    let byte3 = cpu.saturate_sd_to_ub(destination8[reg_offset + 3] - source8[3]);\n    let byte4 = cpu.saturate_sd_to_ub(destination8[reg_offset + 4] - source8[4]);\n    let byte5 = cpu.saturate_sd_to_ub(destination8[reg_offset + 5] - source8[5]);\n    let byte6 = cpu.saturate_sd_to_ub(destination8[reg_offset + 6] - source8[6]);\n    let byte7 = cpu.saturate_sd_to_ub(destination8[reg_offset + 7] - source8[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD9] = cpu => {\n    // psubusw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) - (source[0] & 0xFFFF);\n    let word1 = (destination_low >>> 16) - (source[0] >>> 16);\n    if (word0 < 0) {\n        word0 = 0;\n    }\n    if (word1 < 0) {\n        word1 = 0;\n    }\n\n    let word2 = (destination_high & 0xFFFF) - (source[1] & 0xFFFF);\n    let word3 = (destination_high >>> 16) - (source[1] >>> 16);\n    if (word2 < 0) {\n        word2 = 0;\n    }\n    if (word3 < 0) {\n        word3 = 0;\n    }\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDA] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pminub xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source8 = new Uint8Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination8 = new Uint8Array(destination.buffer);\n\n    let result = cpu.create_atom128s(0, 0, 0, 0);\n    let result8 = new Uint8Array(result.buffer);\n\n    for(let i = 0; i < 16; i++)\n    {\n        result8[i] = source8[i] < destination8[i] ? source8[i] : destination8[i];\n    }\n\n    cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n};\nt[0xDB] = cpu => {\n    // pand mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & destination_low;\n    let high = source[1] & destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDC] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusb xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = cpu.saturate_ud_to_ub(source8[i] + destination8[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // paddusb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source64s = cpu.read_mmx_mem64s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8 = cpu.reg_mmx8;\n\n        let byte0 = cpu.saturate_ud_to_ub(destination8[reg_offset] + source8[0]);\n        let byte1 = cpu.saturate_ud_to_ub(destination8[reg_offset + 1] + source8[1]);\n        let byte2 = cpu.saturate_ud_to_ub(destination8[reg_offset + 2] + source8[2]);\n        let byte3 = cpu.saturate_ud_to_ub(destination8[reg_offset + 3] + source8[3]);\n        let byte4 = cpu.saturate_ud_to_ub(destination8[reg_offset + 4] + source8[4]);\n        let byte5 = cpu.saturate_ud_to_ub(destination8[reg_offset + 5] + source8[5]);\n        let byte6 = cpu.saturate_ud_to_ub(destination8[reg_offset + 6] + source8[6]);\n        let byte7 = cpu.saturate_ud_to_ub(destination8[reg_offset + 7] + source8[7]);\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDD] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusw mm, mm/m64\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            cpu.saturate_uw(source16[0] + destination16[0]) | cpu.saturate_uw(source16[1] + destination16[1]) << 16,\n            cpu.saturate_uw(source16[2] + destination16[2]) | cpu.saturate_uw(source16[3] + destination16[3]) << 16,\n            cpu.saturate_uw(source16[4] + destination16[4]) | cpu.saturate_uw(source16[5] + destination16[5]) << 16,\n            cpu.saturate_uw(source16[6] + destination16[6]) | cpu.saturate_uw(source16[7] + destination16[7]) << 16\n        );\n    }\n    else\n    {\n        // paddusw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = cpu.saturate_uw((destination_low & 0xFFFF) + (source[0] & 0xFFFF));\n        let word1 = cpu.saturate_uw((destination_low >>> 16) + (source[0] >>> 16));\n        let word2 = cpu.saturate_uw((destination_high & 0xFFFF) + (source[1] & 0xFFFF));\n        let word3 = cpu.saturate_uw((destination_high >>> 16) + (source[1] >>> 16));\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDE] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmaxub xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] > destination8[i] ? source8[i] : destination8[i];\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\nt[0xDF] = cpu => {\n    // pandn mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & ~destination_low;\n    let high = source[1] & ~destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xE1] = cpu => {\n    // psraw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 15) {\n        shift = 16;\n    }\n\n    let word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n    let word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n    let word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE2] = cpu => {\n    // psrad mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 31) {\n        shift = 31;\n    }\n\n    let low = destination_low >> shift;\n    let high = destination_high >> shift;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE3] = cpu => { cpu.unimplemented_sse(); };\nt[0xE4] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pmulhuw xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source16 = new Uint16Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination16 = new Uint16Array(destination.buffer);\n\n    cpu.write_xmm128s(\n        source16[0] * destination16[0] >>> 16 | source16[1] * destination16[1] & 0xFFFF0000,\n        source16[2] * destination16[2] >>> 16 | source16[3] * destination16[3] & 0xFFFF0000,\n        source16[4] * destination16[4] >>> 16 | source16[5] * destination16[5] & 0xFFFF0000,\n        source16[6] * destination16[6] >>> 16 | source16[7] * destination16[7] & 0xFFFF0000\n    );\n};\n\nt[0xE5] = cpu => {\n    // pmulhw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16)) >>> 16;\n    let word1 = ((destination_low >> 16) * (source[0] >> 16)) >>> 16;\n    let word2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16)) >>> 16;\n    let word3 = ((destination_high >> 16) * (source[1] >> 16)) >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE6] = cpu => { cpu.unimplemented_sse(); };\nt[0xE7] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let data = cpu.read_xmm128s();\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\n\nt[0xE8] = cpu => {\n    // psubsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] - source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] - source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] - source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] - source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] - source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] - source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] - source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] - source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE9] = cpu => {\n    // psubsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) - (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) - (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) - (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) - (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEA] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xEB] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // por xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] | destination[0],\n            source[1] | destination[1],\n            source[2] | destination[2],\n            source[3] | destination[3]\n        );\n    }\n    else\n    {\n        // por mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] | destination_low;\n        let high = source[1] | destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xEC] = cpu => {\n    // paddsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] + source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] + source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] + source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] + source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] + source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] + source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] + source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] + source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xED] = cpu => {\n    // paddsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) + (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) + (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) + (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) + (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEE] = cpu => { cpu.unimplemented_sse(); };\nt[0xEF] = cpu => {\n    // pxor mm, mm/m64\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] ^ destination[0],\n            source[1] ^ destination[1],\n            source[2] ^ destination[2],\n            source[3] ^ destination[3]\n        );\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] ^ destination_low;\n        let high = source[1] ^ destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xF0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF1] = cpu => {\n    // psllw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n        let word1 = (destination_low >>> 16) << shift;\n        low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n        let word3 = (destination_high >>> 16) << shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF2] = cpu => {\n    // pslld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF3] = cpu => {\n    // psllq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift | (destination_low >>> (32 - shift));\n    }\n    else if (shift <= 63) {\n        high = destination_low << (shift & 0x1F);\n        low = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF4] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmuludq xmm1, xmm2/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        let i = (cpu.modrm_byte >> 3 & 7) << 2;\n\n        cpu.reg_xmm32s[i] = v86util.mul_low(destination[0], source[0]);\n        cpu.reg_xmm32s[i + 1] = v86util.mul_high(destination[0], source[0]);\n        cpu.reg_xmm32s[i + 2] = v86util.mul_low(destination[2], source[2]);\n        cpu.reg_xmm32s[i + 3] = v86util.mul_high(destination[2], source[2]);\n    }\n    else\n    {\n        // pmuludq mm1, mm2/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let s = cpu.read_mmx_mem64s()[0];\n        let d = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        cpu.write_mmx64s(v86util.mul_low(d, s), v86util.mul_high(d, s));\n    }\n};\n\nt[0xF5] = cpu => {\n    // pmaddwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let mul0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16));\n    let mul1 = ((destination_low >> 16) * (source[0] >> 16));\n    let mul2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16));\n    let mul3 = ((destination_high >> 16) * (source[1] >> 16));\n\n    let low = mul0 + mul1 | 0;\n    let high = mul2 + mul3 | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF6] = cpu => { cpu.unimplemented_sse(); };\nt[0xF7] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF8] = cpu => {\n    // psubb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] - source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] - source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] - source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] - source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] - source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] - source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] - source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] - source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF9] = cpu => {\n    // psubw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low - source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) - (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high - source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) - (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFA] = cpu => {\n    // psubd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low - source[0];\n    let high = destination_high - source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFB] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xFC] = cpu => {\n    // paddb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] + source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] + source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] + source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] + source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] + source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] + source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] + source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] + source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFD] = cpu => {\n    // paddw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low + source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) + (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high + source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) + (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFE] = cpu => {\n    // paddd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low + source[0] | 0;\n    let high = destination_high + source[1] | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFF] = cpu => {\n    // Windows 98\n    dbg_log(\"#ud: 0F FF\");\n    cpu.trigger_ud();\n};\n\n\nvar table0F_16 = [];\nvar table0F_32 = [];\nCPU.prototype.table0F_16 = table0F_16;\nCPU.prototype.table0F_32 = table0F_32;\n\nfor(i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table0F_16[i] = table0F_32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table0F_16[i] = t16[i];\n        table0F_32[i] = t32[i];\n    }\n}\n","\"use strict\";\n\nCPU.prototype.debug_init = function()\n{\n    var cpu = this;\n    var debug = {};\n    this.debug = debug;\n\n    /**\n     * wheter or not in step mode\n     * used for debugging\n     * @type {boolean}\n     */\n    debug.step_mode = false;\n    debug.ops = undefined;\n    debug.all_ops = [];\n\n    debug.trace_all = false;\n\n    // \"log\" some information visually to the user.\n    // Also in non-DEBUG modes\n    debug.show = function(x)\n    {\n        if(typeof document !== \"undefined\")\n        {\n            var el = document.getElementById(\"log\");\n\n            if(el)\n            {\n                el.textContent += x + \"\\n\";\n                el.style.display = \"block\";\n                el.scrollTop = 1e9;\n                return;\n            }\n        }\n\n        console.log(x);\n    };\n\n    debug.init = function()\n    {\n        if(!DEBUG) return;\n\n        // used for debugging\n        debug.ops = new CircularQueue(200000);\n\n        if(cpu.io)\n        {\n            // write seabios debug output to console\n            var seabios_debug = \"\";\n\n            cpu.io.register_write(0x402, this, handle); // seabios\n            cpu.io.register_write(0x500, this, handle); // vgabios\n        }\n\n        function handle(out_byte)\n        {\n            if(out_byte === 10)\n            {\n                dbg_log(seabios_debug, LOG_BIOS);\n                seabios_debug = \"\";\n            }\n            else\n            {\n                seabios_debug += String.fromCharCode(out_byte);\n            }\n        }\n    };\n\n    debug.get_regs_short = get_regs_short;\n    debug.dump_regs = dump_regs_short;\n    debug.dump_instructions = dump_instructions;\n    debug.get_instructions = get_instructions;\n    debug.get_state = get_state;\n    debug.dump_state = dump_state;\n    debug.dump_stack = dump_stack;\n\n    debug.dump_page_directory = dump_page_directory;\n    debug.dump_gdt_ldt = dump_gdt_ldt;\n    debug.dump_idt = dump_idt;\n\n    debug.get_memory_dump = get_memory_dump;\n    debug.memory_hex_dump = memory_hex_dump;\n    debug.used_memory_dump = used_memory_dump;\n\n    debug.step = step;\n    debug.run_until = run_until;\n\n    /**\n     * @param {string=} msg\n     */\n    debug.unimpl = function(msg)\n    {\n        var s = \"Unimplemented\" + (msg ? \": \" + msg : \"\");\n\n        debug.show(s);\n\n        if(DEBUG)\n        {\n            console.trace();\n            return s;\n        }\n        else\n        {\n            debug.show(\"Execution stopped\");\n            return s;\n        }\n        //this.name = \"Unimplemented\";\n    };\n\n    function step()\n    {\n        if(!DEBUG) return;\n\n        if(!cpu.running)\n        {\n            cpu.cycle();\n        }\n\n        dump_regs_short();\n        var now = Date.now();\n\n        cpu.running = false;\n        dump_instructions();\n    }\n\n    function run_until()\n    {\n        if(!DEBUG) return;\n\n        cpu.running = false;\n        var a = parseInt(prompt(\"input hex\", \"\"), 16);\n        if(a) while(cpu.instruction_pointer != a) step();\n    }\n\n    // http://ref.x86asm.net/x86reference.xml\n    // for debugging purposes\n    var opcode_map = [\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"PUSH\", \"POP\",\n        \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"PUSH\", \"0F:\",\n        \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"PUSH\", \"POP\",\n        \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"PUSH\", \"POP\",\n        \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"ES\", \"DAA\",\n        \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"CS\", \"DAS\",\n        \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"SS\", \"AAA\",\n        \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"DS\", \"AAS\",\n        \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\",\n        \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\",\n        \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\",\n        \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\",\n        \"PUSHA\", \"POPA\", \"BOUND\", \"ARPL\", \"FS\", \"GS\", \"none\", \"none\",\n        \"PUSH\", \"IMUL\", \"PUSH\", \"IMUL\", \"INS\", \"INS\", \"OUTS\", \"OUTS\",\n        \"JO\", \"JNO\", \"JB\", \"JNB\", \"JZ\", \"JNZ\", \"JBE\", \"JNBE\",\n        \"JS\", \"JNS\", \"JP\", \"JNP\", \"JL\", \"JNL\", \"JLE\", \"JNLE\",\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"TEST\", \"TEST\", \"XCHG\", \"XCHG\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"LEA\", \"MOV\", \"POP\",\n        \"NOP\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\",\n        \"CBW\", \"CWD\", \"CALLF\", \"FWAIT\", \"PUSHF\", \"POPF\", \"SAHF\", \"LAHF\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOVS\", \"MOVS\", \"CMPS\", \"CMPS\",\n        \"TEST\", \"TEST\", \"STOS\", \"STOS\", \"LODS\", \"LODS\", \"SCAS\", \"SCAS\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"ROL\", \"ROL\", \"RETN\", \"RETN\", \"LES\", \"LDS\", \"MOV\", \"MOV\",\n        \"ENTER\", \"LEAVE\", \"RETF\", \"RETF\", \"INT\", \"INT\", \"INTO\", \"IRET\",\n        \"ROL\", \"ROL\", \"ROL\", \"ROL\", \"AAM\", \"AAD\", \"none\", \"XLAT\",\n        \"FADD\", \"FLD\", \"FIADD\", \"FILD\", \"FADD\", \"FLD\", \"FIADD\", \"FILD\",\n        \"LOOPNZ\", \"LOOPZ\", \"LOOP\", \"JCXZ\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"CALL\", \"JMP\", \"JMPF\", \"JMP\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"LOCK\", \"none\", \"REPNZ\", \"REPZ\", \"HLT\", \"CMC\", \"TEST\", \"TEST\",\n        \"CLC\", \"STC\", \"CLI\", \"STI\", \"CLD\", \"STD\", \"INC\", \"INC\"\n    ];\n\n    debug.logop = function(_ip, op)\n    {\n        if(!DEBUG || !debug.step_mode)\n        {\n            return;\n        }\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            debug.all_ops.push(_ip, op);\n        }\n        else if(debug.ops)\n        {\n            debug.ops.add(_ip);\n            debug.ops.add(op);\n        }\n    };\n\n    function dump_stack(start, end)\n    {\n        if(!DEBUG) return;\n\n        var esp = cpu.reg32[reg_esp];\n        dbg_log(\"========= STACK ==========\");\n\n        if(end >= start || end === undefined)\n        {\n            start = 5;\n            end = -5;\n        }\n\n        for(var i = start; i > end; i--)\n        {\n            var line = \"    \";\n\n            if(!i) line = \"=>  \";\n\n            line += h(i, 2) + \" | \";\n\n            dbg_log(line + h(esp + 4 * i, 8) + \" | \" + h(cpu.read32s(esp + 4 * i) >>> 0));\n        }\n    }\n\n    function get_state(where)\n    {\n        var vm = (cpu.flags & flag_vm) ? 1 : 0;\n        var mode = cpu.protected_mode ? vm ? \"vm86\" : \"prot\" : \"real\";\n        var flags = cpu.get_eflags();\n        var iopl = cpu.getiopl();\n        var cpl = cpu.cpl;\n        var cs_eip = h(cpu.sreg[reg_cs], 4) + \":\" + h(cpu.get_real_eip() >>> 0, 8);\n        var ss_esp = h(cpu.sreg[reg_ss], 4) + \":\" + h(cpu.get_stack_reg() >>> 0, 8);\n        var op_size = cpu.is_32 ? \"32\" : \"16\";\n        var if_ = (cpu.flags & flag_interrupt) ? 1 : 0;\n\n        var flag_names = {\n            [flag_carry]: \"c\",\n            [flag_parity]: \"p\",\n            [flag_adjust]: \"a\",\n            [flag_zero]: \"z\",\n            [flag_sign]: \"s\",\n            [flag_trap]: \"t\",\n            [flag_interrupt]: \"i\",\n            [flag_direction]: \"d\",\n            [flag_overflow]: \"o\",\n        };\n        var flag_string = \"\";\n\n        for(var i = 0; i < 16; i++)\n        {\n            if(flag_names[1 << i])\n            {\n                if(flags & 1 << i)\n                {\n                    flag_string += flag_names[1 << i];\n                }\n                else\n                {\n                    flag_string += \" \";\n                }\n            }\n        }\n\n        return (\"mode=\" + mode + \"/\" + op_size + \" paging=\" + (+cpu.paging) +\n                \" iopl=\" + iopl + \" cpl=\" + cpl + \" if=\" + if_ + \" cs:eip=\" + cs_eip +\n                \" cs_off=\" + h(cpu.get_seg(reg_cs) >>> 0, 8) +\n                \" flgs=\" + h(cpu.get_eflags() >>> 0, 6) + \" (\" + flag_string + \")\" +\n                \" ss:esp=\" + ss_esp +\n                \" ssize=\" + (+cpu.stack_size_32) +\n                (where ? \" in \" + where : \"\"));\n    }\n\n    function dump_state(where)\n    {\n        if(!DEBUG) return;\n\n        dbg_log(get_state(where), LOG_CPU);\n    }\n\n    function get_regs_short()\n    {\n        var\n            r32 = { \"eax\": reg_eax, \"ecx\": reg_ecx, \"edx\": reg_edx, \"ebx\": reg_ebx,\n                    \"esp\": reg_esp, \"ebp\": reg_ebp, \"esi\": reg_esi, \"edi\": reg_edi },\n            r32_names = [\"eax\", \"ecx\", \"edx\", \"ebx\", \"esp\", \"ebp\", \"esi\", \"edi\"],\n            s = { \"cs\": reg_cs, \"ds\": reg_ds, \"es\": reg_es, \"fs\": reg_fs, \"gs\": reg_gs, \"ss\": reg_ss },\n            line1 = \"\",\n            line2 = \"\";\n\n\n\n        for(var i = 0; i < 4; i++)\n        {\n            line1 += r32_names[i] + \"=\"  + h(cpu.reg32[r32[r32_names[i]]], 8) + \" \";\n            line2 += r32_names[i+4] + \"=\"  + h(cpu.reg32[r32[r32_names[i+4]]], 8) + \" \";\n        }\n\n        //line1 += \" eip=\" + h(cpu.get_real_eip() >>> 0, 8);\n        //line2 += \" flg=\" + h(cpu.get_eflags(), 8);\n\n        line1 += \"  ds=\" + h(cpu.sreg[reg_ds], 4) + \" es=\" + h(cpu.sreg[reg_es], 4) + \" fs=\" + h(cpu.sreg[reg_fs], 4);\n        line2 += \"  gs=\" + h(cpu.sreg[reg_gs], 4) + \" cs=\" + h(cpu.sreg[reg_cs], 4) + \" ss=\" + h(cpu.sreg[reg_ss], 4);\n\n        return [line1, line2];\n    }\n\n    function dump_regs_short()\n    {\n        if(!DEBUG) return;\n\n        var lines = get_regs_short();\n\n        dbg_log(lines[0], LOG_CPU);\n        dbg_log(lines[1], LOG_CPU);\n    }\n\n    function get_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.step_mode = true;\n\n        function add(ip, op)\n        {\n            out += h(ip, 8)  + \":        \" +\n                v86util.pads(opcode_map[op] || \"unkown\", 20) + h(op, 2) + \"\\n\";\n        }\n\n        var opcodes;\n        var out = \"\";\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            opcodes = debug.all_ops;\n        }\n        else if(debug.ops)\n        {\n            opcodes = debug.ops.toArray();\n        }\n\n        if(!opcodes)\n        {\n            return \"\";\n        }\n\n        for(var i = 0; i < opcodes.length; i += 2)\n        {\n            add(opcodes[i], opcodes[i + 1]);\n        }\n\n        debug.ops.clear();\n        debug.all_ops = [];\n\n        return out;\n    }\n\n    function dump_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.show(get_instructions());\n    }\n\n    function dump_gdt_ldt()\n    {\n        if(!DEBUG) return;\n\n        dbg_log(\"gdt: (len = \" + h(cpu.gdtr_size) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.gdtr_offset), cpu.gdtr_size);\n\n        dbg_log(\"\\nldt: (len = \" + h(cpu.segment_limits[reg_ldtr]) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.segment_offsets[reg_ldtr]), cpu.segment_limits[reg_ldtr]);\n\n        function dump_table(addr, size)\n        {\n            for(var i = 0; i < size; i += 8, addr += 8)\n            {\n                var base = cpu.read16(addr + 2) |\n                        cpu.read8(addr + 4) << 16 |\n                        cpu.read8(addr + 7) << 24,\n\n                    limit = cpu.read16(addr) | (cpu.read8(addr + 6) & 0xF) << 16,\n                    access = cpu.read8(addr + 5),\n                    flags = cpu.read8(addr + 6) >> 4,\n                    flags_str = \"\",\n                    dpl = access >> 5 & 3;\n\n                if(!(access & 128))\n                {\n                    // present bit not set\n                    //continue;\n                    flags_str += \"NP \";\n                }\n                else\n                {\n                    flags_str += \" P \";\n                }\n\n                if(access & 16)\n                {\n                    if(flags & 4)\n                    {\n                        flags_str += \"32b \";\n                    }\n                    else\n                    {\n                        flags_str += \"16b \";\n                    }\n\n                    if(access & 8)\n                    {\n                        // executable\n                        flags_str += \"X \";\n\n                        if(access & 4)\n                        {\n                            flags_str += \"C \";\n                        }\n                    }\n                    else\n                    {\n                        // data\n                        flags_str += \"R \";\n                    }\n\n                    flags_str += \"RW \";\n                }\n                else\n                {\n                    // system\n                    flags_str += \"sys: \" + h(access & 15);\n                }\n\n                if(flags & 8)\n                {\n                    limit = limit << 12 | 0xFFF;\n                }\n\n                dbg_log(h(i & ~7, 4) + \" \" + h(base >>> 0, 8) + \" (\" + h(limit >>> 0, 8) + \" bytes) \" +\n                        flags_str + \";  dpl = \" + dpl + \", a = \" + access.toString(2) +\n                        \", f = \" + flags.toString(2));\n            }\n        }\n    }\n\n    function dump_idt()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < cpu.idtr_size; i += 8)\n        {\n            var addr = cpu.translate_address_system_read(cpu.idtr_offset + i),\n                base = cpu.read16(addr) | cpu.read16(addr + 6) << 16,\n                selector = cpu.read16(addr + 2),\n                type = cpu.read8(addr + 5),\n                line,\n                dpl = type >> 5 & 3;\n\n            if((type & 31) === 5)\n            {\n                line = \"task gate \";\n            }\n            else if((type & 31) === 14)\n            {\n                line = \"intr gate \";\n            }\n            else if((type & 31) === 15)\n            {\n                line = \"trap gate \";\n            }\n            else\n            {\n                line = \"invalid   \";\n            }\n\n\n            if(type & 128)\n            {\n                line += \" P\";\n            }\n            else\n            {\n                // present bit not set\n                //continue;\n                line += \"NP\";\n            }\n\n\n            dbg_log(h(i >> 3, 4) + \" \" + h(base >>> 0, 8) + \", \" +\n                    h(selector, 4) + \"; \" + line + \";  dpl = \" + dpl + \", t = \" + type.toString(2));\n        }\n    }\n\n    function load_page_entry(dword_entry, is_directory)\n    {\n        if(!DEBUG) return;\n\n        if(!(dword_entry & 1))\n        {\n            // present bit not set\n            return false;\n        }\n\n        var size = (dword_entry & 128) === 128,\n            address;\n\n        if(size && !is_directory)\n        {\n            address = dword_entry & 0xFFC00000;\n        }\n        else\n        {\n            address = dword_entry & 0xFFFFF000;\n        }\n\n        return {\n            size: size,\n            global: (dword_entry & 256) === 256,\n            accessed: (dword_entry & 0x20) === 0x20,\n            dirty: (dword_entry & 0x40) === 0x40,\n            cache_disable : (dword_entry & 16) === 16,\n            user : (dword_entry & 4) === 4,\n            read_write : (dword_entry & 2) === 2,\n            address : address >>> 0\n        };\n    }\n\n    function dump_page_directory()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < 1024; i++)\n        {\n            var addr = cpu.cr[3] + 4 * i;\n            var dword = cpu.read32s(addr),\n                entry = load_page_entry(dword, true);\n\n            if(!entry)\n            {\n                continue;\n            }\n\n            var flags = \"\";\n\n            flags += entry.size ? \"S \" : \"  \";\n            flags += entry.accessed ? \"A \" : \"  \";\n            flags += entry.cache_disable ? \"Cd \" : \"  \";\n            flags += entry.user ? \"U \" : \"  \";\n            flags += entry.read_write ? \"Rw \" : \"   \";\n\n            if(entry.size)\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" -> \" + h(entry.address >>> 0, 8) + \" | \" + flags);\n                continue;\n            }\n            else\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" | \" + flags);\n            }\n\n            for(var j = 0; j < 1024; j++)\n            {\n                var sub_addr = entry.address + 4 * j;\n                dword = cpu.read32s(sub_addr);\n\n                var subentry = load_page_entry(dword, false);\n\n                if(subentry)\n                {\n                    flags = \"\";\n\n                    flags += subentry.cache_disable ? \"Cd \" : \"   \";\n                    flags += subentry.user ? \"U \" : \"  \";\n                    flags += subentry.read_write ? \"Rw \" : \"   \";\n                    flags += subentry.global ? \"G \" : \"  \";\n                    flags += subentry.accessed ? \"A \" : \"  \";\n                    flags += subentry.dirty ? \"Di \" : \"   \";\n\n                    dbg_log(\"# \" + h((i << 22 | j << 12) >>> 0, 8) + \" -> \" +\n                            h(subentry.address, 8) + \" | \" + flags + \"        (at \" + h(sub_addr, 8) + \")\");\n                }\n            }\n        }\n    }\n\n\n    function get_memory_dump(start, count)\n    {\n        if(!DEBUG) return;\n\n        if(start === undefined)\n        {\n            start = 0;\n            count = cpu.memory_size;\n        }\n        else if(count === undefined)\n        {\n            count = start;\n            start = 0;\n        }\n\n        return cpu.mem8.slice(start, start + count).buffer;\n    }\n\n\n    function memory_hex_dump(addr, length)\n    {\n        if(!DEBUG) return;\n\n        length = length || 4 * 0x10;\n        var line, byt;\n\n        for(var i = 0; i < length >> 4; i++)\n        {\n            line = h(addr + (i << 4), 5) + \"   \";\n\n            for(var j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += h(byt, 2) + \" \";\n            }\n\n            line += \"  \";\n\n            for(j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n            }\n\n            dbg_log(line);\n        }\n    }\n\n    function used_memory_dump()\n    {\n        if(!DEBUG) return;\n\n        var width = 0x80,\n            height = 0x10,\n            block_size = cpu.memory_size / width / height | 0,\n            row;\n\n        for(var i = 0; i < height; i++)\n        {\n            row = h(i * width * block_size, 8) + \" | \";\n\n            for(var j = 0; j < width; j++)\n            {\n                var used = cpu.mem32s[(i * width + j) * block_size] > 0;\n\n                row += used ? \"X\" : \" \";\n            }\n\n            dbg_log(row);\n        }\n    }\n\n\n    debug.debug_interrupt = function(interrupt_nr)\n    {\n        //if(interrupt_nr === 0x20)\n        //{\n        //    //var vxd_device = cpu.safe_read16(cpu.instruction_pointer + 2);\n        //    //var vxd_sub = cpu.safe_read16(cpu.instruction_pointer + 0);\n        //    //var service = \"\";\n        //    //if(vxd_device === 1)\n        //    //{\n        //    //    service = vxd_table1[vxd_sub];\n        //    //}\n        //    //dbg_log(\"vxd: \" + h(vxd_device, 4) + \" \" + h(vxd_sub, 4) + \" \" + service);\n        //}\n\n        //if(interrupt_nr >= 0x21 && interrupt_nr < 0x30)\n        //{\n        //    dbg_log(\"dos: \" + h(interrupt_nr, 2) + \" ah=\" + h(this.reg8[reg_ah], 2) + \" ax=\" + h(this.reg16[reg_ax], 4));\n        //}\n\n        //if(interrupt_nr === 0x13 && (this.reg8[reg_ah] | 1) === 0x43)\n        //{\n        //    this.debug.memory_hex_dump(this.get_seg(reg_ds) + this.reg16[reg_si], 0x18);\n        //}\n\n        //if(interrupt_nr == 0x10)\n        //{\n        //    dbg_log(\"int10 ax=\" + h(this.reg16[reg_ax], 4) + \" '\" + String.fromCharCode(this.reg8[reg_al]) + \"'\");\n        //    this.debug.dump_regs_short();\n        //    if(this.reg8[reg_ah] == 0xe) vga.tt_write(this.reg8[reg_al]);\n        //}\n\n        //if(interrupt_nr === 0x13)\n        //{\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 6)\n        //{\n        //    this.instruction_pointer += 2;\n        //    dbg_log(\"BUG()\", LOG_CPU);\n        //    dbg_log(\"line=\" + this.read_imm16() + \" \" +\n        //            \"file=\" + this.read_string(this.translate_address_read(this.read_imm32s())), LOG_CPU);\n        //    this.instruction_pointer -= 8;\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x80)\n        //{\n        //    dbg_log(\"linux syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x40)\n        //{\n        //    dbg_log(\"kolibri syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n    };\n};\n","\"use strict\";\n\n// A minimal elf parser for loading 32 bit, x86, little endian, executable elf files\n\nconst ELF_MAGIC = 0x464C457F;\n\nlet types = DataView.prototype;\nlet U8 = { size: 1, get: types.getUint8, set: types.setUint8, };\nlet U16 = { size: 2, get: types.getUint16, set: types.setUint16, };\nlet U32 = { size: 4, get: types.getUint32, set: types.setUint32, };\nlet pad = function(size)\n{\n    return {\n        size,\n        get: offset => -1,\n    };\n};\n\nlet Header = create_struct([\n    { magic: U32, },\n\n    { class: U8, },\n    { data: U8, },\n    { version0: U8, },\n    { osabi: U8, },\n\n    { abiversion: U8, },\n    { pad0: pad(7) },\n\n    { type: U16, },\n    { machine: U16, },\n\n    { version1: U32, },\n    { entry: U32, },\n    { phoff: U32, },\n    { shoff: U32, },\n    { flags: U32, },\n\n    { ehsize: U16, },\n    { phentsize: U16, },\n    { phnum: U16, },\n    { shentsize: U16, },\n    { shnum: U16, },\n    { shstrndx: U16, },\n]);\nconsole.assert(Header.reduce((a, entry) => a + entry.size, 0) === 52);\n\nlet ProgramHeader = create_struct([\n    { type: U32, },\n    { offset: U32, },\n    { vaddr: U32, },\n    { paddr: U32, },\n    { filesz: U32, },\n    { memsz: U32, },\n    { flags: U32, },\n    { align: U32, },\n]);\nconsole.assert(ProgramHeader.reduce((a, entry) => a + entry.size, 0) === 32);\n\nlet SectionHeader = create_struct([\n    { name: U32, },\n    { type: U32, },\n    { flags: U32, },\n    { addr: U32, },\n    { offset: U32, },\n    { size: U32, },\n    { link: U32, },\n    { info: U32, },\n    { addralign: U32, },\n    { entsize: U32, },\n]);\nconsole.assert(SectionHeader.reduce((a, entry) => a + entry.size, 0) === 40);\n\n\n// From [{ name: type }, ...] to [{ name, type, size, get, set }, ...]\nfunction create_struct(struct)\n{\n    return struct.map(function(entry)\n    {\n        let keys = Object.keys(entry);\n        console.assert(keys.length === 1);\n        let name = keys[0];\n        let type = entry[name];\n\n        console.assert(type.size > 0);\n\n        return {\n            name,\n            type,\n            size: type.size,\n            get: type.get,\n            set: type.set,\n        };\n    });\n}\n\n/** @param {ArrayBuffer} buffer */\nfunction read_elf(buffer)\n{\n    let view = new DataView(buffer);\n\n    let [header, offset] = read_struct(view, Header);\n    console.assert(offset === 52);\n\n    if(DEBUG)\n    {\n        for(let key in header)\n        {\n            console.log(key + \": 0x\" + header[key].toString(16));\n        }\n        console.log(header);\n    }\n\n    console.assert(header.magic === ELF_MAGIC, \"Bad magic\");\n    console.assert(header.class === 1, \"Unimplemented: 64 bit elf\");\n    console.assert(header.data === 1, \"Unimplemented: big endian\");\n    console.assert(header.version0 === 1, \"Bad version0\");\n\n    // 1, 2, 3, 4 specify whether the object is relocatable, executable,\n    // shared, or core, respectively.\n    console.assert(header.type === 2, \"Unimplemented type\");\n\n    console.assert(header.version1 === 1, \"Bad version1\");\n\n    // these are different in 64 bit\n    console.assert(header.ehsize === 52, \"Bad header size\");\n    console.assert(header.phentsize === 32, \"Bad program header size\");\n    console.assert(header.shentsize === 40, \"Bad section header size\");\n\n    let [program_headers, ph_offset] = read_structs(\n        view_slice(view, header.phoff, header.phentsize * header.phnum),\n        ProgramHeader,\n        header.phnum);\n\n    let [sections_headers, sh_offset] = read_structs(\n        view_slice(view, header.shoff, header.shentsize * header.shnum),\n        SectionHeader,\n        header.shnum);\n\n    if(DEBUG)\n    {\n        console.log(\"%d program headers:\", program_headers.length);\n        for(let program of program_headers)\n        {\n            console.log(\n                \"type=%s offset=%s vaddr=%s paddr=%s \" +\n                \"filesz=%s memsz=%s flags=%s align=%s\",\n                program.type.toString(16),\n                program.offset.toString(16),\n                program.vaddr.toString(16),\n                program.paddr.toString(16),\n                program.filesz.toString(16),\n                program.memsz.toString(16),\n                program.flags.toString(16),\n                program.align.toString(16)\n            );\n        }\n\n        console.log(\"%d program headers:\", sections_headers.length);\n        for(let section of sections_headers)\n        {\n            console.log(\n                \"name=%s type=%s flags=%s addr=%s offset=%s \" +\n                \"size=%s link=%s info=%s addralign=%s entsize=%s\",\n                section.name.toString(16),\n                section.type.toString(16),\n                section.flags.toString(16),\n                section.addr.toString(16),\n                section.offset.toString(16),\n                section.size.toString(16),\n                section.link.toString(16),\n                section.info.toString(16),\n                section.addralign.toString(16),\n                section.entsize.toString(16)\n            );\n        }\n    }\n\n    return {\n        header,\n        program_headers,\n        sections_headers,\n    };\n}\n\nfunction read_struct(view, Struct)\n{\n    let result = {};\n    let offset = 0;\n    const LITTLE_ENDIAN = true; // big endian not supported yet\n\n    for(let entry of Struct)\n    {\n        let value = entry.get.call(view, offset, LITTLE_ENDIAN);\n        console.assert(result[entry.name] === undefined);\n        result[entry.name] = value;\n        offset += entry.size;\n    }\n\n    return [result, offset];\n}\n\nfunction read_structs(view, Struct, count)\n{\n    let result = [];\n    let offset = 0;\n\n    for(var i = 0; i < count; i++)\n    {\n        let [s, size] = read_struct(view_slice(view, offset), Struct);\n        result.push(s);\n        offset += size;\n    }\n\n    return [result, offset];\n}\n\n/** @param {number=} length */\nfunction view_slice(view, offset, length)\n{\n    return new DataView(view.buffer, view.byteOffset + offset, length);\n}\n","\"use strict\";\n\n/** @const */\nvar SHIFT_SCAN_CODE = 0x2A;\n\n/** @const */\nvar SCAN_CODE_RELEASE = 0x80;\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction KeyboardAdapter(bus)\n{\n    var\n        /**\n         * @type {!Object.<boolean>}\n         */\n        keys_pressed = {},\n\n        keyboard = this;\n\n    /**\n     * Set by emulator\n     * @type {boolean}\n     */\n    this.emu_enabled = true;\n\n    /**\n     * Format:\n     * Javascript event.keyCode -> make code\n     * @const\n     */\n    var charmap = new Uint16Array([\n        0, 0, 0, 0,  0, 0, 0, 0,\n        // 0x08: backspace, tab, enter\n        0x0E, 0x0F, 0, 0,  0, 0x1C, 0, 0,\n\n        // 0x10: shift, ctrl, alt, pause, caps lock\n        0x2A, 0x1D, 0x38, 0,  0x3A, 0, 0, 0,\n\n        // 0x18: escape\n        0, 0, 0, 0x01,  0, 0, 0, 0,\n\n        // 0x20: spacebar, page down/up, end, home, arrow keys, ins, del\n        0x39, 0xE049, 0xE051, 0xE04F,  0xE047, 0xE04B, 0xE048, 0xE04D,\n        0x50, 0, 0, 0,  0, 0x52, 0x53, 0,\n\n        // 0x30: numbers\n        0x0B, 0x02, 0x03, 0x04,  0x05, 0x06, 0x07, 0x08,\n        0x09, 0x0A,\n\n        // 0x3B: ;= (firefox only)\n        0, 0x27, 0, 0x0D, 0, 0,\n\n        // 0x40\n        0,\n\n        // 0x41: letters\n        0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32,\n        0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C,\n\n        // 0x5B: Left Win, Right Win, Menu\n        0xE05B, 0xE05C, 0xE05D, 0, 0,\n\n        // 0x60: keypad\n        0x52, 0x4F, 0x50, 0x51, 0x4B, 0x4C, 0x4D, 0x47,\n        0x48, 0x49, 0, 0, 0, 0, 0, 0,\n\n        // 0x70: F1 to F12\n        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58,\n\n        0, 0, 0, 0,\n\n        // 0x80\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0, 0, 0,\n\n        // 0x90: Numlock\n        0x45, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xA0: - (firefox only)\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0x0C, 0, 0,\n\n        // 0xB0\n        // ,\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0x27, 0x0D,  0x33, 0x0C, 0x34, 0x35,\n\n        // 0xC0\n        // `\n        0x29, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xD0\n        // [']\\\n        0, 0, 0, 0,     0, 0, 0, 0,\n        0, 0, 0, 0x1A,  0x2B, 0x1B, 0x28, 0,\n\n        // 0xE0\n        // Apple key on Gecko, Right alt\n        0xE05B, 0xE038, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,            0, 0, 0, 0,\n    ]);\n\n\n    /**\n     * ascii -> javascript event code (US layout)\n     * @const\n     */\n    var asciimap = {10: 13, 32: 32, 39: 222, 44: 188, 45: 189, 46: 190, 47: 191, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 59: 186, 61: 187, 91: 219, 92: 220, 93: 221, 96: 192, 97: 65, 98: 66, 99: 67, 100: 68, 101: 69, 102: 70, 103: 71, 104: 72, 105: 73, 106: 74, 107: 75, 108: 76, 109: 77, 110: 78, 111: 79, 112: 80, 113: 81, 114: 82, 115: 83, 116: 84, 117: 85, 118: 86, 119: 87, 120: 88, 121: 89, 122: 90};\n    var asciimap_shift = {33: 49, 34: 222, 35: 51, 36: 52, 37: 53, 38: 55, 40: 57, 41: 48, 42: 56, 43: 187, 58: 186, 60: 188, 62: 190, 63: 191, 64: 50, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 94: 54, 95: 189, 123: 219, 124: 220, 125: 221, 126: 192};\n\n    // From:\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values_on_Linux_%28X11%29_%28When_scancode_is_available%29\n    // http://stanislavs.org/helppc/make_codes.html\n    // http://www.computer-engineering.org/ps2keyboard/scancodes1.html\n    //\n    // Mapping from event.code to scancode\n    var codemap = {\n        \"Escape\": 0x0001,\n        \"Digit1\": 0x0002,\n        \"Digit2\": 0x0003,\n        \"Digit3\": 0x0004,\n        \"Digit4\": 0x0005,\n        \"Digit5\": 0x0006,\n        \"Digit6\": 0x0007,\n        \"Digit7\": 0x0008,\n        \"Digit8\": 0x0009,\n        \"Digit9\": 0x000a,\n        \"Digit0\": 0x000b,\n        \"Minus\": 0x000c,\n        \"Equal\": 0x000d,\n        \"Backspace\": 0x000e,\n        \"Tab\": 0x000f,\n        \"KeyQ\": 0x0010,\n        \"KeyW\": 0x0011,\n        \"KeyE\": 0x0012,\n        \"KeyR\": 0x0013,\n        \"KeyT\": 0x0014,\n        \"KeyY\": 0x0015,\n        \"KeyU\": 0x0016,\n        \"KeyI\": 0x0017,\n        \"KeyO\": 0x0018,\n        \"KeyP\": 0x0019,\n        \"BracketLeft\": 0x001a,\n        \"BracketRight\": 0x001b,\n        \"Enter\": 0x001c,\n        \"ControlLeft\": 0x001d,\n        \"KeyA\": 0x001e,\n        \"KeyS\": 0x001f,\n        \"KeyD\": 0x0020,\n        \"KeyF\": 0x0021,\n        \"KeyG\": 0x0022,\n        \"KeyH\": 0x0023,\n        \"KeyJ\": 0x0024,\n        \"KeyK\": 0x0025,\n        \"KeyL\": 0x0026,\n        \"Semicolon\": 0x0027,\n        \"Quote\": 0x0028,\n        \"Backquote\": 0x0029,\n        \"ShiftLeft\": 0x002a,\n        \"Backslash\": 0x002b,\n        \"KeyZ\": 0x002c,\n        \"KeyX\": 0x002d,\n        \"KeyC\": 0x002e,\n        \"KeyV\": 0x002f,\n        \"KeyB\": 0x0030,\n        \"KeyN\": 0x0031,\n        \"KeyM\": 0x0032,\n        \"Comma\": 0x0033,\n        \"Period\": 0x0034,\n        \"Slash\": 0x0035,\n        \"ShiftRight\": 0x0036,\n        \"NumpadMultiply\": 0x0037,\n        \"AltLeft\": 0x0038,\n        \"Space\": 0x0039,\n        \"CapsLock\": 0x003a,\n        \"F1\": 0x003b,\n        \"F2\": 0x003c,\n        \"F3\": 0x003d,\n        \"F4\": 0x003e,\n        \"F5\": 0x003f,\n        \"F6\": 0x0040,\n        \"F7\": 0x0041,\n        \"F8\": 0x0042,\n        \"F9\": 0x0043,\n        \"F10\": 0x0044,\n        \"NumLock\": 0x0045,\n        \"ScrollLock\": 0x0046,\n        \"Numpad7\": 0x0047,\n        \"Numpad8\": 0x0048,\n        \"Numpad9\": 0x0049,\n        \"NumpadSubtract\": 0x004a,\n        \"Numpad4\": 0x004b,\n        \"Numpad5\": 0x004c,\n        \"Numpad6\": 0x004d,\n        \"NumpadAdd\": 0x004e,\n        \"Numpad1\": 0x004f,\n        \"Numpad2\": 0x0050,\n        \"Numpad3\": 0x0051,\n        \"Numpad0\": 0x0052,\n        \"NumpadDecimal\": 0x0053,\n        \"IntlBackslash\": 0x0056,\n        \"F11\": 0x0057,\n        \"F12\": 0x0058,\n\n        \"NumpadEnter\": 0xe01c,\n        \"ControlRight\": 0xe01d,\n        \"NumpadDivide\": 0xe035,\n        //\"PrintScreen\": 0x0063,\n        \"AltRight\": 0xe038,\n        \"Home\": 0xe047,\n        \"ArrowUp\": 0xe048,\n        \"PageUp\": 0xe049,\n        \"ArrowLeft\": 0xe04b,\n        \"ArrowRight\": 0xe04d,\n        \"End\": 0xe04f,\n        \"ArrowDown\": 0xe050,\n        \"PageDown\": 0xe051,\n        \"Insert\": 0xe052,\n        \"Delete\": 0xe053,\n\n        \"OSLeft\": 0xe05b,\n        \"OSRight\": 0xe05c,\n        \"ContextMenu\": 0xe05d,\n    };\n\n    this.bus = bus;\n\n    this.destroy = function()\n    {\n        if(typeof window !== \"undefined\")\n        {\n            window.removeEventListener(\"keyup\", keyup_handler, false);\n            window.removeEventListener(\"keydown\", keydown_handler, false);\n            window.removeEventListener(\"blur\", blur_handler, false);\n        }\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"keyup\", keyup_handler, false);\n        window.addEventListener(\"keydown\", keydown_handler, false);\n        window.addEventListener(\"blur\", blur_handler, false);\n    };\n    this.init();\n\n    this.simulate_press = function(code)\n    {\n        var ev = { keyCode: code };\n        handler(ev, true);\n        handler(ev, false);\n    };\n\n    this.simulate_char = function(chr)\n    {\n        var code = chr.charCodeAt(0);\n\n        if(code in asciimap)\n        {\n            this.simulate_press(asciimap[code]);\n        }\n        else if(code in asciimap_shift)\n        {\n            send_to_controller(SHIFT_SCAN_CODE);\n            this.simulate_press(asciimap_shift[code]);\n            send_to_controller(SHIFT_SCAN_CODE | SCAN_CODE_RELEASE);\n        }\n        else\n        {\n            console.log(\"ascii -> keyCode not found: \", code, chr);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(e.shiftKey && e.ctrlKey && (e.keyCode === 74 || e.keyCode === 75))\n        {\n              // don't prevent opening chromium dev tools\n              // maybe add other important combinations here, too\n              return false;\n        }\n\n        if(!keyboard.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.target)\n        {\n            // className shouldn't be hardcoded here\n            return e.target.classList.contains(\"phone_keyboard\") ||\n                (e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\");\n        }\n        else\n        {\n            return true;\n        }\n    }\n\n    function translate(e)\n    {\n        if(e.code !== undefined)\n        {\n            var code = codemap[e.code];\n\n            if(code !== undefined)\n            {\n                return code;\n            }\n        }\n\n        return charmap[e.keyCode];\n    }\n\n    function keyup_handler(e)\n    {\n        if(!e.altKey && keys_pressed[0x38])\n        {\n            // trigger ALT keyup manually - some browsers don't\n            // see issue #165\n            handle_code(0x38, false);\n        }\n        return handler(e, false);\n    }\n\n    function keydown_handler(e)\n    {\n        if(!e.altKey && keys_pressed[0x38])\n        {\n            // trigger ALT keyup manually - some browsers don't\n            // see issue #165\n            handle_code(0x38, false);\n        }\n        return handler(e, true);\n    }\n\n    function blur_handler(e)\n    {\n        // trigger keyup for all pressed keys\n        var keys = Object.keys(keys_pressed),\n            key;\n\n        for(var i = 0; i < keys.length; i++)\n        {\n            key = +keys[i];\n\n            if(keys_pressed[key])\n            {\n                handle_code(key, false);\n            }\n        }\n\n        keys_pressed = {};\n    }\n\n    /**\n     * @param {boolean} keydown\n     */\n    function handler(e, keydown)\n    {\n        if(!keyboard.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var code = translate(e);\n\n        if(!code)\n        {\n            console.log(\"Missing char in map: \" + e.keyCode.toString(16));\n            return;\n        }\n\n        handle_code(code, keydown);\n\n        e.preventDefault && e.preventDefault();\n\n        return false;\n    }\n\n    /**\n     * @param {number} code\n     * @param {boolean} keydown\n     */\n    function handle_code(code, keydown)\n    {\n        if(keydown)\n        {\n            if(keys_pressed[code])\n            {\n                handle_code(code, false);\n            }\n        }\n        else\n        {\n            if(!keys_pressed[code])\n            {\n                // stray keyup\n                return;\n            }\n        }\n\n        keys_pressed[code] = keydown;\n\n        if(!keydown)\n        {\n            code |= 0x80;\n        }\n        //console.log(\"Key: \" + code.toString(16) + \" from \" + chr.toString(16) + \" down=\" + keydown);\n\n        if(code > 0xFF)\n        {\n            // prefix\n            send_to_controller(code >> 8);\n            send_to_controller(code & 0xFF);\n        }\n        else\n        {\n            send_to_controller(code);\n        }\n    }\n\n    function send_to_controller(code)\n    {\n        keyboard.bus.send(\"keyboard-code\", code);\n    }\n}\n\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction MouseAdapter(bus, screen_container)\n{\n    /** @const */\n    var SPEED_FACTOR = 0.15;\n\n    var left_down = false,\n        right_down = false,\n        middle_down = false,\n\n        last_x = 0,\n        last_y = 0,\n\n        mouse = this;\n\n    // set by controller\n    this.enabled = false;\n\n    // set by emulator\n    this.emu_enabled = true;\n\n    this.bus = bus;\n\n    this.bus.register(\"mouse-enable\", function(enabled)\n    {\n        this.enabled = enabled;\n    }, this);\n\n    this.destroy = function()\n    {\n        window.removeEventListener(\"touchstart\", touch_start_handler, false);\n        window.removeEventListener(\"touchend\", touch_end_handler, false);\n        window.removeEventListener(\"touchmove\", mousemove_handler, false);\n        window.removeEventListener(\"mousemove\", mousemove_handler, false);\n        window.removeEventListener(\"mousedown\", mousedown_handler, false);\n        window.removeEventListener(\"mouseup\", mouseup_handler, false);\n        window.removeEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.removeEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"touchstart\", touch_start_handler, false);\n        window.addEventListener(\"touchend\", touch_end_handler, false);\n        window.addEventListener(\"touchmove\", mousemove_handler, false);\n        window.addEventListener(\"mousemove\", mousemove_handler, false);\n        window.addEventListener(\"mousedown\", mousedown_handler, false);\n        window.addEventListener(\"mouseup\", mouseup_handler, false);\n        window.addEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.addEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n    this.init();\n\n    function is_child(child, parent)\n    {\n        while(child.parentNode)\n        {\n            if(child === parent)\n            {\n                return true;\n            }\n            child = child.parentNode;\n        }\n\n        return false;\n    }\n\n    function may_handle(e)\n    {\n        if(!mouse.enabled || !mouse.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.type === \"mousemove\" || e.type === \"touchmove\")\n        {\n            return true;\n        }\n\n        if(e.type === \"mousewheel\" || e.type === \"DOMMouseScroll\")\n        {\n            var parent = screen_container || document.body;\n            return is_child(e.target, parent);\n        }\n\n        return !e.target || e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\";\n    }\n\n    function touch_start_handler(e)\n    {\n        if(may_handle(e))\n        {\n            var touches = e[\"changedTouches\"];\n\n            if(touches && touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n            }\n        }\n    }\n\n    function touch_end_handler(e)\n    {\n        if(left_down || middle_down || right_down)\n        {\n            mouse.bus.send(\"mouse-click\", [false, false, false]);\n            left_down = middle_down = right_down = false;\n        }\n    }\n\n    function mousemove_handler(e)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = 0;\n        var delta_y = 0;\n\n        var touches = e[\"changedTouches\"];\n\n        if(touches)\n        {\n            if(touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                delta_x = touch.clientX - last_x;\n                delta_y = touch.clientY - last_y;\n\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n\n                e.preventDefault();\n            }\n        }\n        else\n        {\n            if(typeof e[\"movementX\"] === \"number\")\n            {\n                delta_x = e[\"movementX\"];\n                delta_y = e[\"movementY\"];\n            }\n            else if(typeof e[\"webkitMovementX\"] === \"number\")\n            {\n                delta_x = e[\"webkitMovementX\"];\n                delta_y = e[\"webkitMovementY\"];\n            }\n            else if(typeof e[\"mozMovementX\"] === \"number\")\n            {\n                delta_x = e[\"mozMovementX\"];\n                delta_y = e[\"mozMovementY\"];\n            }\n            else\n            {\n                // Fallback for other browsers?\n                delta_x = e.clientX - last_x;\n                delta_y = e.clientY - last_y;\n\n                last_x = e.clientX;\n                last_y = e.clientY;\n            }\n        }\n\n        if(SPEED_FACTOR !== 1)\n        {\n            delta_x = delta_x * SPEED_FACTOR;\n            delta_y = delta_y * SPEED_FACTOR;\n        }\n\n        //if(Math.abs(delta_x) > 100 || Math.abs(delta_y) > 100)\n        //{\n        //    // Large mouse delta, drop?\n        //}\n\n        delta_y = -delta_y;\n\n        mouse.bus.send(\"mouse-delta\", [delta_x, delta_y]);\n\n        let absolute_x = e.pageX - screen_container.offsetLeft;\n        let absolute_y = e.pageY - screen_container.offsetTop;\n        mouse.bus.send(\"mouse-absolute\", [\n            absolute_x, absolute_y, screen_container.offsetWidth, screen_container.offsetHeight]);\n    }\n\n    function mousedown_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, true);\n        }\n    }\n\n    function mouseup_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, false);\n        }\n    }\n\n    function click_event(e, down)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(e.which === 1)\n        {\n            left_down = down;\n        }\n        else if(e.which === 2)\n        {\n            middle_down = down;\n        }\n        else if(e.which === 3)\n        {\n            right_down = down;\n        }\n        else\n        {\n            console.log(\"Unknown event.which: \" + e.which);\n        }\n        mouse.bus.send(\"mouse-click\", [left_down, middle_down, right_down]);\n    }\n\n    function mousewheel_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = e.wheelDelta || -e.detail;\n        var delta_y = 0;\n\n        if(delta_x < 0)\n        {\n            delta_x = -1;\n        }\n        else if(delta_x > 0)\n        {\n            delta_x = 1;\n        }\n\n        mouse.bus.send(\"mouse-wheel\", [delta_x, delta_y]);\n        e.preventDefault();\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar DAC_QUEUE_RESERVE = 0.2;\n\n/** @const */\nvar AUDIOBUFFER_MINIMUM_SAMPLING_RATE = 8000;\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n */\nfunction SpeakerAdapter(bus)\n{\n    if(typeof window === \"undefined\")\n    {\n        return;\n    }\n    if(!window.AudioContext && !window[\"webkitAudioContext\"])\n    {\n        console.warn(\"Web browser doesn't support Web Audio API\");\n        return;\n    }\n\n    var SpeakerDAC = window.AudioWorklet ? SpeakerWorkletDAC : SpeakerBufferSourceDAC;\n\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = new (window.AudioContext || window[\"webkitAudioContext\"])();\n\n    /** @const */\n    this.mixer = new SpeakerMixer(bus, this.audio_context);\n\n    /** @const */\n    this.pcspeaker = new PCSpeaker(bus, this.audio_context, this.mixer);\n\n    /** @const */\n    this.dac = new SpeakerDAC(bus, this.audio_context, this.mixer);\n\n    this.pcspeaker.start();\n\n    bus.register(\"emulator-stopped\", function()\n    {\n        this.audio_context.suspend();\n    }, this);\n\n    bus.register(\"emulator-started\", function()\n    {\n        this.audio_context.resume();\n    }, this);\n\n    bus.register(\"speaker-confirm-initialized\", function()\n    {\n        bus.send(\"speaker-has-initialized\");\n    }, this);\n    bus.send(\"speaker-has-initialized\");\n}\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n */\nfunction SpeakerMixer(bus, audio_context)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    this.sources = new Map();\n\n    // States\n\n    this.volume_both = 1;\n    this.volume_left = 1;\n    this.volume_right = 1;\n    this.gain_left = 1;\n    this.gain_right = 1;\n\n    // Nodes\n    // TODO: Find / calibrate / verify the filter frequencies\n\n    this.node_treble_left = this.audio_context.createBiquadFilter();\n    this.node_treble_right = this.audio_context.createBiquadFilter();\n    this.node_treble_left.type = \"highshelf\";\n    this.node_treble_right.type = \"highshelf\";\n    this.node_treble_left.frequency.setValueAtTime(2000, this.audio_context.currentTime);\n    this.node_treble_right.frequency.setValueAtTime(2000, this.audio_context.currentTime);\n\n    this.node_bass_left = this.audio_context.createBiquadFilter();\n    this.node_bass_right = this.audio_context.createBiquadFilter();\n    this.node_bass_left.type = \"lowshelf\";\n    this.node_bass_right.type = \"lowshelf\";\n    this.node_bass_left.frequency.setValueAtTime(200, this.audio_context.currentTime);\n    this.node_bass_right.frequency.setValueAtTime(200, this.audio_context.currentTime);\n\n    this.node_gain_left = this.audio_context.createGain();\n    this.node_gain_right = this.audio_context.createGain();\n\n    this.node_merger = this.audio_context.createChannelMerger(2);\n\n    // Graph\n\n    this.input_left = this.node_treble_left;\n    this.input_right = this.node_treble_right;\n\n    this.node_treble_left.connect(this.node_bass_left);\n    this.node_bass_left.connect(this.node_gain_left);\n    this.node_gain_left.connect(this.node_merger, 0, 0);\n\n    this.node_treble_right.connect(this.node_bass_right);\n    this.node_bass_right.connect(this.node_gain_right);\n    this.node_gain_right.connect(this.node_merger, 0, 1);\n\n    this.node_merger.connect(this.audio_context.destination);\n\n    // Interface\n\n    bus.register(\"mixer-connect\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        this.connect_source(source_id, channel);\n    }, this);\n\n    bus.register(\"mixer-disconnect\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        this.disconnect_source(source_id, channel);\n    }, this);\n\n    bus.register(\"mixer-volume\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        var decibels = data[2];\n\n        var gain = Math.pow(10, decibels / 20);\n\n        var source = source_id === MIXER_SRC_MASTER ? this : this.sources.get(source_id);\n\n        if(source === undefined)\n        {\n            dbg_assert(false, \"Mixer set volume - cannot set volume for undefined source: \" + source_id);\n            return;\n        }\n\n        source.set_volume(gain, channel);\n    }, this);\n\n    bus.register(\"mixer-gain-left\", function(/** number */ decibels)\n    {\n        this.gain_left = Math.pow(10, decibels / 20);\n        this.update();\n    }, this);\n\n    bus.register(\"mixer-gain-right\", function(/** number */ decibels)\n    {\n        this.gain_right = Math.pow(10, decibels / 20);\n        this.update();\n    }, this);\n\n    function create_gain_handler(audio_node)\n    {\n        return function(decibels)\n        {\n            audio_node.gain.setValueAtTime(decibels, this.audio_context.currentTime);\n        };\n    }\n    bus.register(\"mixer-treble-left\", create_gain_handler(this.node_treble_left), this);\n    bus.register(\"mixer-treble-right\", create_gain_handler(this.node_treble_right), this);\n    bus.register(\"mixer-bass-left\", create_gain_handler(this.node_bass_left), this);\n    bus.register(\"mixer-bass-right\", create_gain_handler(this.node_bass_right), this);\n}\n\n/**\n * @param {!AudioNode} source_node\n * @param {number} source_id\n * @return {SpeakerMixerSource}\n */\nSpeakerMixer.prototype.add_source = function(source_node, source_id)\n{\n    var source = new SpeakerMixerSource(\n        this.audio_context,\n        source_node,\n        this.input_left,\n        this.input_right\n    );\n\n    dbg_assert(!this.sources.has(source_id), \"Mixer add source - overwritting source: \" + source_id);\n\n    this.sources.set(source_id, source);\n    return source;\n};\n\n/**\n * @param {number} source_id\n * @param {number=} channel\n */\nSpeakerMixer.prototype.connect_source = function(source_id, channel)\n{\n    var source = this.sources.get(source_id);\n\n    if(source === undefined)\n    {\n        dbg_assert(false, \"Mixer connect - cannot connect undefined source: \" + source_id);\n        return;\n    }\n\n    source.connect(channel);\n};\n\n/**\n * @param {number} source_id\n * @param {number=} channel\n */\nSpeakerMixer.prototype.disconnect_source = function(source_id, channel)\n{\n    var source = this.sources.get(source_id);\n\n    if(source === undefined)\n    {\n        dbg_assert(false, \"Mixer disconnect - cannot disconnect undefined source: \" + source_id);\n        return;\n    }\n\n    source.disconnect(channel);\n};\n\n/**\n * @param {number} value\n * @param {number=} channel\n */\nSpeakerMixer.prototype.set_volume = function(value, channel)\n{\n    if(channel === undefined)\n    {\n        channel = MIXER_CHANNEL_BOTH;\n    }\n\n    switch(channel)\n    {\n        case MIXER_CHANNEL_LEFT:\n            this.volume_left = value;\n            break;\n        case MIXER_CHANNEL_RIGHT:\n            this.volume_right = value;\n            break;\n        case MIXER_CHANNEL_BOTH:\n            this.volume_both = value;\n            break;\n        default:\n            dbg_assert(false, \"Mixer set master volume - unknown channel: \" + channel);\n            return;\n    }\n\n    this.update();\n};\n\nSpeakerMixer.prototype.update = function()\n{\n    var net_gain_left = this.volume_both * this.volume_left * this.gain_left;\n    var net_gain_right = this.volume_both * this.volume_right * this.gain_right;\n\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\n};\n\n/**\n * @constructor\n * @param {!AudioContext} audio_context\n * @param {!AudioNode} source_node\n * @param {!AudioNode} destination_left\n * @param {!AudioNode} destination_right\n */\nfunction SpeakerMixerSource(audio_context, source_node, destination_left, destination_right)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    // States\n\n    this.connected_left = true;\n    this.connected_right = true;\n    this.gain_hidden = 1;\n    this.volume_both = 1;\n    this.volume_left = 1;\n    this.volume_right = 1;\n\n    // Nodes\n\n    this.node_splitter = audio_context.createChannelSplitter(2);\n    this.node_gain_left = audio_context.createGain();\n    this.node_gain_right = audio_context.createGain();\n\n    // Graph\n\n    source_node.connect(this.node_splitter);\n\n    this.node_splitter.connect(this.node_gain_left, 0);\n    this.node_gain_left.connect(destination_left);\n\n    this.node_splitter.connect(this.node_gain_right, 1);\n    this.node_gain_right.connect(destination_right);\n}\n\nSpeakerMixerSource.prototype.update = function()\n{\n    var net_gain_left = this.connected_left * this.gain_hidden * this.volume_both * this.volume_left;\n    var net_gain_right = this.connected_right * this.gain_hidden * this.volume_both * this.volume_right;\n\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\n};\n\n/** @param {number=} channel */\nSpeakerMixerSource.prototype.connect = function(channel)\n{\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\n    if(both || channel === MIXER_CHANNEL_LEFT)\n    {\n        this.connected_left = true;\n    }\n    if(both || channel === MIXER_CHANNEL_RIGHT)\n    {\n        this.connected_right = true;\n    }\n    this.update();\n};\n\n/** @param {number=} channel */\nSpeakerMixerSource.prototype.disconnect = function(channel)\n{\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\n    if(both || channel === MIXER_CHANNEL_LEFT)\n    {\n        this.connected_left = false;\n    }\n    if(both || channel === MIXER_CHANNEL_RIGHT)\n    {\n        this.connected_right = false;\n    }\n    this.update();\n};\n\n/**\n * @param {number} value\n * @param {number=} channel\n */\nSpeakerMixerSource.prototype.set_volume = function(value, channel)\n{\n    if(channel === undefined)\n    {\n        channel = MIXER_CHANNEL_BOTH;\n    }\n\n    switch(channel)\n    {\n        case MIXER_CHANNEL_LEFT:\n            this.volume_left = value;\n            break;\n        case MIXER_CHANNEL_RIGHT:\n            this.volume_right = value;\n            break;\n        case MIXER_CHANNEL_BOTH:\n            this.volume_both = value;\n            break;\n        default:\n            dbg_assert(false, \"Mixer set volume - unknown channel: \" + channel);\n            return;\n    }\n\n    this.update();\n};\n\nSpeakerMixerSource.prototype.set_gain_hidden = function(value)\n{\n    this.gain_hidden = value;\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction PCSpeaker(bus, audio_context, mixer)\n{\n    // Nodes\n\n    this.node_oscillator = audio_context.createOscillator();\n    this.node_oscillator.type = \"square\";\n    this.node_oscillator.frequency.setValueAtTime(440, audio_context.currentTime);\n\n    // Interface\n\n    this.mixer_connection = mixer.add_source(this.node_oscillator, MIXER_SRC_PCSPEAKER);\n    this.mixer_connection.disconnect();\n\n    bus.register(\"pcspeaker-enable\", function()\n    {\n        mixer.connect_source(MIXER_SRC_PCSPEAKER);\n    }, this);\n\n    bus.register(\"pcspeaker-disable\", function()\n    {\n        mixer.disconnect_source(MIXER_SRC_PCSPEAKER);\n    }, this);\n\n    bus.register(\"pcspeaker-update\", function(data)\n    {\n        var counter_mode = data[0];\n        var counter_reload = data[1];\n\n        var frequency = 0;\n        var beep_enabled = counter_mode === 3;\n\n        if(beep_enabled)\n        {\n            frequency = OSCILLATOR_FREQ * 1000 / counter_reload;\n            frequency = Math.min(frequency, this.node_oscillator.frequency.maxValue);\n            frequency = Math.max(frequency, 0);\n        }\n\n        this.node_oscillator.frequency.setValueAtTime(frequency, audio_context.currentTime);\n    }, this);\n}\n\nPCSpeaker.prototype.start = function()\n{\n    this.node_oscillator.start();\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction SpeakerWorkletDAC(bus, audio_context, mixer)\n{\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = audio_context;\n\n    // State\n\n    this.enabled = false;\n    this.sampling_rate = 48000;\n\n    // Worklet\n\n    function worklet()\n    {\n        /** @const */\n        var RENDER_QUANTUM = 128;\n\n        /** @const */\n        var MINIMUM_BUFFER_SIZE = 2 * RENDER_QUANTUM;\n\n        /** @const */\n        var QUEUE_RESERVE = 1024;\n\n        function sinc(x)\n        {\n            if(x === 0) return 1;\n            x *= Math.PI;\n            return Math.sin(x) / x;\n        }\n\n        var EMPTY_BUFFER =\n        [\n            new Float32Array(MINIMUM_BUFFER_SIZE),\n            new Float32Array(MINIMUM_BUFFER_SIZE),\n        ];\n\n        /**\n         * @constructor\n         * @extends AudioWorkletProcessor\n         */\n        function DACProcessor()\n        {\n            var self = Reflect.construct(AudioWorkletProcessor, [], DACProcessor);\n\n            // Params\n\n            self.kernel_size = 3;\n\n            // States\n\n            // Buffers waiting for their turn to be consumed\n            self.queue_data = new Array(1024);\n            self.queue_start = 0;\n            self.queue_end = 0;\n            self.queue_length = 0;\n            self.queue_size = self.queue_data.length;\n            self.queued_samples = 0;\n\n            // Buffers being actively consumed\n            /** @type{Array<Float32Array>} */\n            self.source_buffer_previous = EMPTY_BUFFER;\n            /** @type{Array<Float32Array>} */\n            self.source_buffer_current = EMPTY_BUFFER;\n\n            // Ratio of alienland sample rate to homeland sample rate.\n            self.source_samples_per_destination = 1.0;\n\n            // Integer representing the position of the first destination sample\n            // for the current block, relative to source_buffer_current.\n            self.source_block_start = 0;\n\n            // Real number representing the position of the current destination\n            // sample relative to source_buffer_current, since source_block_start.\n            self.source_time = 0.0;\n\n            // Same as source_time but rounded down to an index.\n            self.source_offset = 0;\n\n            // Interface\n\n            self.port.onmessage = (event) =>\n            {\n                switch(event.data.type)\n                {\n                    case \"queue\":\n                        self.queue_push(event.data.value);\n                        break;\n                    case \"sampling-rate\":\n                        self.source_samples_per_destination = event.data.value / sampleRate;\n                        break;\n                }\n            };\n\n            return self;\n        }\n\n        Reflect.setPrototypeOf(DACProcessor.prototype, AudioWorkletProcessor.prototype);\n        Reflect.setPrototypeOf(DACProcessor, AudioWorkletProcessor);\n\n        DACProcessor.prototype[\"process\"] =\n        DACProcessor.prototype.process = function(inputs, outputs, parameters)\n        {\n            for(var i = 0; i < outputs[0][0].length; i++)\n            {\n                // Lanczos resampling\n                var sum0 = 0;\n                var sum1 = 0;\n\n                var start = this.source_offset - this.kernel_size + 1;\n                var end = this.source_offset + this.kernel_size;\n\n                for(var j = start; j <= end; j++)\n                {\n                    var convolute_index = this.source_block_start + j;\n                    sum0 += this.get_sample(convolute_index, 0) * this.kernel(this.source_time - j);\n                    sum1 += this.get_sample(convolute_index, 1) * this.kernel(this.source_time - j);\n                }\n\n                if(isNaN(sum0) || isNaN(sum1))\n                {\n                    // NaN values cause entire audio graph to cease functioning.\n                    sum0 = sum1 = 0;\n                    this.dbg_log(\"ERROR: NaN values! Ignoring for now.\");\n                }\n\n                outputs[0][0][i] = sum0;\n                outputs[0][1][i] = sum1;\n\n                this.source_time += this.source_samples_per_destination;\n                this.source_offset = Math.floor(this.source_time);\n            }\n\n            // +2 to safeguard against rounding variations\n            var samples_needed_per_block = this.source_offset;\n            samples_needed_per_block += this.kernel_size + 2;\n\n            this.source_time -= this.source_offset;\n            this.source_block_start += this.source_offset;\n            this.source_offset = 0;\n\n            // Note: This needs to be done after source_block_start is updated.\n            this.ensure_enough_data(samples_needed_per_block);\n\n            return true;\n        };\n\n        DACProcessor.prototype.kernel = function(x)\n        {\n            return sinc(x) * sinc(x / this.kernel_size);\n        };\n\n        DACProcessor.prototype.get_sample = function(index, channel)\n        {\n            if(index < 0)\n            {\n                // -ve index represents previous buffer\n                //          <-------|\n                // [Previous buffer][Current buffer]\n                index += this.source_buffer_previous[0].length;\n                return this.source_buffer_previous[channel][index];\n            }\n            else\n            {\n                return this.source_buffer_current[channel][index];\n            }\n        };\n\n        DACProcessor.prototype.ensure_enough_data = function(needed)\n        {\n            var current_length = this.source_buffer_current[0].length;\n            var remaining = current_length - this.source_block_start;\n\n            if(remaining < needed)\n            {\n                this.prepare_next_buffer();\n                this.source_block_start -= current_length;\n            }\n        };\n\n        DACProcessor.prototype.prepare_next_buffer = function()\n        {\n            if(this.queued_samples < MINIMUM_BUFFER_SIZE && this.queue_length)\n            {\n                this.dbg_log(\"Not enough samples - should not happen during midway of playback\");\n            }\n\n            this.source_buffer_previous = this.source_buffer_current;\n            this.source_buffer_current = this.queue_shift();\n\n            var sample_count = this.source_buffer_current[0].length;\n\n            if(sample_count < MINIMUM_BUFFER_SIZE)\n            {\n                // Unfortunately, this single buffer is too small :(\n\n                var queue_pos = this.queue_start;\n                var buffer_count = 0;\n\n                // Figure out how many small buffers to combine.\n                while(sample_count < MINIMUM_BUFFER_SIZE && buffer_count < this.queue_length)\n                {\n                    sample_count += this.queue_data[queue_pos][0].length;\n\n                    queue_pos = queue_pos + 1 & this.queue_size - 1;\n                    buffer_count++;\n                }\n\n                // Note: if not enough buffers, this will be end-padded with zeros:\n                var new_big_buffer_size = Math.max(sample_count, MINIMUM_BUFFER_SIZE);\n                var new_big_buffer =\n                [\n                    new Float32Array(new_big_buffer_size),\n                    new Float32Array(new_big_buffer_size),\n                ];\n\n                // Copy the first, already-shifted, small buffer into the new buffer.\n                new_big_buffer[0].set(this.source_buffer_current[0]);\n                new_big_buffer[1].set(this.source_buffer_current[1]);\n                var new_big_buffer_pos = this.source_buffer_current[0].length;\n\n                // Copy the rest.\n                for(var i = 0; i < buffer_count; i++)\n                {\n                    var small_buffer = this.queue_shift();\n                    new_big_buffer[0].set(small_buffer[0], new_big_buffer_pos);\n                    new_big_buffer[1].set(small_buffer[1], new_big_buffer_pos);\n                    new_big_buffer_pos += small_buffer[0].length;\n                }\n\n                // Pretend that everything's just fine.\n                this.source_buffer_current = new_big_buffer;\n            }\n\n            this.pump();\n        };\n\n        DACProcessor.prototype.pump = function()\n        {\n            if(this.queued_samples / this.source_samples_per_destination < QUEUE_RESERVE)\n            {\n                this.port.postMessage(\n                {\n                    type: \"pump\",\n                });\n            }\n        };\n\n        DACProcessor.prototype.queue_push = function(item)\n        {\n            if(this.queue_length < this.queue_size)\n            {\n                this.queue_data[this.queue_end] = item;\n                this.queue_end = this.queue_end + 1 & this.queue_size - 1;\n                this.queue_length++;\n\n                this.queued_samples += item[0].length;\n\n                this.pump();\n            }\n        };\n\n        DACProcessor.prototype.queue_shift = function()\n        {\n            if(!this.queue_length)\n            {\n                return EMPTY_BUFFER;\n            }\n\n            var item = this.queue_data[this.queue_start];\n\n            this.queue_data[this.queue_start] = null;\n            this.queue_start = this.queue_start + 1 & this.queue_size - 1;\n            this.queue_length--;\n\n            this.queued_samples -= item[0].length;\n\n            return item;\n        };\n\n        DACProcessor.prototype.dbg_log = function(message)\n        {\n            if(DEBUG)\n            {\n                this.port.postMessage(\n                {\n                    type: \"debug-log\",\n                    value: message,\n                });\n            }\n        };\n\n        registerProcessor(\"dac-processor\", DACProcessor);\n    }\n\n    var worklet_string = worklet.toString();\n\n    var worklet_code_start = worklet_string.indexOf(\"{\") + 1;\n    var worklet_code_end = worklet_string.lastIndexOf(\"}\");\n    var worklet_code = worklet_string.substring(worklet_code_start, worklet_code_end);\n\n    if(DEBUG)\n    {\n        worklet_code = \"var DEBUG = true;\\n\" + worklet_code;\n    }\n\n    var worklet_blob = new Blob([worklet_code], { type: \"application/javascript\" });\n    var worklet_url = URL.createObjectURL(worklet_blob);\n\n    /** @type {AudioWorkletNode} */\n    this.node_processor = null;\n\n    // Placeholder pass-through node to connect to, when worklet node is not ready yet.\n    this.node_output = this.audio_context.createGain();\n\n    this.audio_context\n        .audioWorklet\n        .addModule(worklet_url)\n        .then(() =>\n    {\n        URL.revokeObjectURL(worklet_url);\n\n        this.node_processor = new AudioWorkletNode(this.audio_context, \"dac-processor\",\n        {\n            \"numberOfInputs\": 0,\n            \"numberOfOutputs\": 1,\n            \"outputChannelCount\": [2],\n        });\n\n        this.node_processor.port.postMessage(\n        {\n            type: \"sampling-rate\",\n            value: this.sampling_rate,\n        });\n\n        this.node_processor.port.onmessage = (event) =>\n        {\n            switch(event.data.type)\n            {\n                case \"pump\":\n                    this.pump();\n                    break;\n                case \"debug-log\":\n                    dbg_log(\"SpeakerWorkletDAC - Worklet: \" + event.data.value);\n                    break;\n            }\n        };\n\n        // Graph\n\n        this.node_processor.connect(this.node_output);\n    });\n\n    // Interface\n\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\n    this.mixer_connection.set_gain_hidden(3);\n\n    bus.register(\"dac-send-data\", function(data)\n    {\n        this.queue(data);\n    }, this);\n\n    bus.register(\"dac-enable\", function(enabled)\n    {\n        this.enabled = true;\n    }, this);\n\n    bus.register(\"dac-disable\", function()\n    {\n        this.enabled = false;\n    }, this);\n\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\n    {\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\n        this.sampling_rate = rate;\n\n        if(!this.node_processor)\n        {\n            return;\n        }\n\n        this.node_processor.port.postMessage(\n        {\n            type: \"sampling-rate\",\n            value: rate,\n        });\n    }, this);\n\n    if(DEBUG)\n    {\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\n    }\n}\n\nSpeakerWorkletDAC.prototype.queue = function(data)\n{\n    if(!this.node_processor)\n    {\n        return;\n    }\n\n    if(DEBUG)\n    {\n        this.debugger.push_queued_data(data);\n    }\n\n    this.node_processor.port.postMessage(\n    {\n        type: \"queue\",\n        value: data,\n    }, [data[0].buffer, data[1].buffer]);\n};\n\nSpeakerWorkletDAC.prototype.pump = function()\n{\n    if(!this.enabled)\n    {\n        return;\n    }\n    this.bus.send(\"dac-request-data\");\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction SpeakerBufferSourceDAC(bus, audio_context, mixer)\n{\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = audio_context;\n\n    // States\n\n    this.enabled = false;\n    this.sampling_rate = 22050;\n    this.buffered_time = 0;\n    this.rate_ratio = 1;\n\n    // Nodes\n\n    this.node_lowpass = this.audio_context.createBiquadFilter();\n    this.node_lowpass.type = \"lowpass\";\n\n    // Interface\n\n    this.node_output = this.node_lowpass;\n\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\n    this.mixer_connection.set_gain_hidden(3);\n\n    bus.register(\"dac-send-data\", function(data)\n    {\n        this.queue(data);\n    }, this);\n\n    bus.register(\"dac-enable\", function(enabled)\n    {\n        this.enabled = true;\n        this.pump();\n    }, this);\n\n    bus.register(\"dac-disable\", function()\n    {\n        this.enabled = false;\n    }, this);\n\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\n    {\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\n        this.sampling_rate = rate;\n        this.rate_ratio = Math.ceil(AUDIOBUFFER_MINIMUM_SAMPLING_RATE / rate);\n        this.node_lowpass.frequency.setValueAtTime(rate / 2, this.audio_context.currentTime);\n    }, this);\n\n    if(DEBUG)\n    {\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\n    }\n}\n\nSpeakerBufferSourceDAC.prototype.queue = function(data)\n{\n    if(DEBUG)\n    {\n        this.debugger.push_queued_data(data);\n    }\n\n    var sample_count = data[0].length;\n    var block_duration = sample_count / this.sampling_rate;\n\n    var buffer;\n    if(this.rate_ratio > 1)\n    {\n        var new_sample_count = sample_count * this.rate_ratio;\n        var new_sampling_rate = this.sampling_rate * this.rate_ratio;\n        buffer = this.audio_context.createBuffer(2, new_sample_count, new_sampling_rate);\n        var buffer_data0 = buffer.getChannelData(0);\n        var buffer_data1 = buffer.getChannelData(1);\n\n        var buffer_index = 0;\n        for(var i = 0; i < sample_count; i++)\n        {\n            for(var j = 0; j < this.rate_ratio; j++, buffer_index++)\n            {\n                buffer_data0[buffer_index] = data[0][i];\n                buffer_data1[buffer_index] = data[1][i];\n            }\n        }\n    }\n    else\n    {\n        // Allocating new AudioBuffer every block\n        // - Memory profiles show insignificant improvements if recycling old buffers.\n        buffer = this.audio_context.createBuffer(2, sample_count, this.sampling_rate);\n        if(buffer.copyToChannel)\n        {\n            buffer.copyToChannel(data[0], 0);\n            buffer.copyToChannel(data[1], 1);\n        }\n        else\n        {\n            // Safari doesn't support copyToChannel yet. See #286\n            buffer.getChannelData(0).set(data[0]);\n            buffer.getChannelData(1).set(data[1]);\n        }\n    }\n\n    var source = this.audio_context.createBufferSource();\n    source.buffer = buffer;\n    source.connect(this.node_lowpass);\n    source.addEventListener(\"ended\", this.pump.bind(this));\n\n    var current_time = this.audio_context.currentTime;\n\n    if(this.buffered_time < current_time)\n    {\n        dbg_log(\"Speaker DAC - Creating/Recreating reserve - shouldn't occur frequently during playback\");\n\n        // Schedule pump() to queue evenly, starting from current time\n        this.buffered_time = current_time;\n        var target_silence_duration = DAC_QUEUE_RESERVE - block_duration;\n        var current_silence_duration = 0;\n        while(current_silence_duration <= target_silence_duration)\n        {\n            current_silence_duration += block_duration;\n            this.buffered_time += block_duration;\n            setTimeout(() => this.pump(), current_silence_duration * 1000);\n        }\n    }\n\n    source.start(this.buffered_time);\n    this.buffered_time += block_duration;\n\n    // Chase the schedule - ensure reserve is full\n    setTimeout(() => this.pump(), 0);\n};\n\nSpeakerBufferSourceDAC.prototype.pump = function()\n{\n    if(!this.enabled)\n    {\n        return;\n    }\n    if(this.buffered_time - this.audio_context.currentTime > DAC_QUEUE_RESERVE)\n    {\n        return;\n    }\n    this.bus.send(\"dac-request-data\");\n};\n\n/**\n * @constructor\n */\nfunction SpeakerDACDebugger(audio_context, source_node)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    /** @const */\n    this.node_source = source_node;\n\n    this.node_processor = null;\n\n    this.node_gain = this.audio_context.createGain();\n    this.node_gain.gain.setValueAtTime(0, this.audio_context.currentTime);\n\n    this.node_gain.connect(this.audio_context.destination);\n\n    this.is_active = false;\n    this.queued_history = [];\n    this.output_history = [];\n    this.queued = [[], []];\n    this.output = [[], []];\n}\n\n/** @suppress {deprecated} */\nSpeakerDACDebugger.prototype.start = function(duration_ms)\n{\n    this.is_active = true;\n    this.queued = [[], []];\n    this.output = [[], []];\n    this.queued_history.push(this.queued);\n    this.output_history.push(this.output);\n\n    this.node_processor = this.audio_context.createScriptProcessor(1024, 2, 2);\n    this.node_processor.onaudioprocess = (event) =>\n    {\n        this.output[0].push(event.inputBuffer.getChannelData(0).slice());\n        this.output[1].push(event.inputBuffer.getChannelData(1).slice());\n    };\n\n    this.node_source.connect(this.node_processor);\n    this.node_processor.connect(this.node_gain);\n\n    setTimeout(() =>\n    {\n        this.stop();\n    }, duration_ms);\n};\n\nSpeakerDACDebugger.prototype.stop = function()\n{\n    this.is_active = false;\n    this.node_source.disconnect(this.node_processor);\n    this.node_processor.disconnect();\n    this.node_processor = null;\n};\n\nSpeakerDACDebugger.prototype.push_queued_data = function(data)\n{\n    if(this.is_active)\n    {\n        this.queued[0].push(data[0].slice());\n        this.queued[1].push(data[1].slice());\n    }\n};\n\n// Useful for Audacity imports\nSpeakerDACDebugger.prototype.download_txt = function(history_id, channel)\n{\n    var txt = this.output_history[history_id][channel]\n        .map((v) => v.join(\" \"))\n        .join(\" \");\n\n    dump_file(txt, \"dacdata.txt\");\n};\n\n// Useful for general plotting\nSpeakerDACDebugger.prototype.download_csv = function(history_id)\n{\n    var buffers = this.output_history[history_id];\n    var csv_rows = [];\n    for(var buffer_id = 0; buffer_id < buffers[0].length; buffer_id++)\n    {\n        for(var i = 0; i < buffers[0][buffer_id].length; i++)\n        {\n            csv_rows.push(`${buffers[0][buffer_id][i]},${buffers[1][buffer_id][i]}`);\n        }\n    }\n    dump_file(csv_rows.join(\"\\n\"), \"dacdata.csv\");\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction SerialAdapter(element, bus)\n{\n    var serial = this;\n\n    this.enabled = true;\n    this.bus = bus;\n    this.text = \"\";\n    this.text_new_line = false;\n\n    this.last_update = 0;\n\n\n    this.bus.register(\"serial0-output-char\", function(chr)\n    {\n        this.show_char(chr);\n    }, this);\n\n\n    this.destroy = function()\n    {\n        element.removeEventListener(\"keypress\", keypress_handler, false);\n        element.removeEventListener(\"keydown\", keydown_handler, false);\n        element.removeEventListener(\"paste\", paste_handler, false);\n        window.removeEventListener(\"mousedown\", window_click_handler, false);\n    };\n\n    this.init = function()\n    {\n        this.destroy();\n\n        element.addEventListener(\"keypress\", keypress_handler, false);\n        element.addEventListener(\"keydown\", keydown_handler, false);\n        element.addEventListener(\"paste\", paste_handler, false);\n        window.addEventListener(\"mousedown\", window_click_handler, false);\n    };\n    this.init();\n\n\n    this.show_char = function(chr)\n    {\n        if(chr === \"\\x08\")\n        {\n            this.text = this.text.slice(0, -1);\n            this.update();\n        }\n        else if(chr === \"\\r\")\n        {\n            // do nothing\n        }\n        else\n        {\n            this.text += chr;\n\n            if(chr === \"\\n\")\n            {\n                this.text_new_line = true;\n            }\n\n            this.update();\n        }\n    };\n\n    this.update = function()\n    {\n        var now = Date.now();\n        var delta = now - this.last_update;\n\n        if(delta < 16)\n        {\n            if(this.update_timer === undefined)\n            {\n                this.update_timer = setTimeout(() => {\n                    this.update_timer = undefined;\n                    var now = Date.now();\n                    dbg_assert(now - this.last_update >= 16);\n                    this.last_update = now;\n                    this.render();\n                }, 16 - delta);\n            }\n        }\n        else\n        {\n            if(this.update_timer !== undefined)\n            {\n                clearTimeout(this.update_timer);\n                this.update_timer = undefined;\n            }\n\n            this.last_update = now;\n            this.render();\n        }\n    };\n\n    this.render = function()\n    {\n        element.value = this.text;\n\n        if(this.text_new_line)\n        {\n            this.text_new_line = false;\n            element.scrollTop = 1e9;\n        }\n    }\n\n    /**\n     * @param {number} chr_code\n     */\n    this.send_char = function(chr_code)\n    {\n        if(serial.bus)\n        {\n            serial.bus.send(\"serial0-input\", chr_code);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(!serial.enabled)\n        {\n            return false;\n        }\n\n        // Something here?\n\n        return true;\n    }\n\n    function keypress_handler(e)\n    {\n        if(!serial.bus)\n        {\n            return;\n        }\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var chr = e.which;\n\n        serial.send_char(chr);\n        e.preventDefault();\n    }\n\n    function keydown_handler(e)\n    {\n        var chr = e.which;\n\n        if(chr === 8)\n        {\n            // supress backspace\n            serial.send_char(127);\n            e.preventDefault();\n        }\n        else if(chr === 9)\n        {\n            // tab\n            serial.send_char(9);\n            e.preventDefault();\n        }\n    }\n\n    function paste_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var data = e.clipboardData.getData(\"text/plain\");\n\n        for(var i = 0; i < data.length; i++)\n        {\n            serial.send_char(data.charCodeAt(i));\n        }\n\n        e.preventDefault();\n    }\n\n    function window_click_handler(e)\n    {\n        if(e.target !== element)\n        {\n            element.blur();\n        }\n    }\n}\n","\"use strict\";\n\n/**\n * An ethernet-through-websocket adapter, to be used with\n *     https://github.com/benjamincburns/websockproxy\n *\n * emulated ethernet card <--\u003e this <--\u003e websocket proxy <--\u003e network\n *\n * @constructor\n *\n * @param {string} url\n * @param {BusConnector} bus\n */\nfunction NetworkAdapter(url, bus)\n{\n    this.send_data = function(x) {};\n\n    this.bus = bus;\n    this.socket = undefined;\n\n    // TODO: circular buffer?\n    this.send_queue = [];\n    this.url = url;\n\n    this.reconnect_interval = 10000;\n    this.last_connect_attempt = Date.now() - this.reconnect_interval;\n    this.send_queue_limit = 64;\n\n    this.bus.register(\"net0-send\", function(data)\n    {\n        this.send(data);\n    }, this);\n}\n\nNetworkAdapter.prototype.handle_message = function(e)\n{\n    if(this.bus)\n    {\n        this.bus.send(\"net0-receive\", new Uint8Array(e.data));\n    }\n};\n\nNetworkAdapter.prototype.handle_close = function(e)\n{\n    //console.log(\"onclose\", e);\n\n    this.connect();\n    setTimeout(this.connect.bind(this), this.reconnect_interval);\n};\n\nNetworkAdapter.prototype.handle_open = function(e)\n{\n    //console.log(\"open\", e);\n\n    for(var i = 0; i < this.send_queue.length; i++)\n    {\n        this.send(this.send_queue[i]);\n    }\n\n    this.send_queue = [];\n};\n\nNetworkAdapter.prototype.handle_error = function(e)\n{\n    //console.log(\"onerror\", e);\n};\n\nNetworkAdapter.prototype.destroy = function()\n{\n    if(this.socket)\n    {\n        this.socket.close();\n    }\n};\n\nNetworkAdapter.prototype.connect = function()\n{\n    if(this.socket)\n    {\n        var state = this.socket.readyState;\n\n        if(state === 0 || state === 1)\n        {\n            // already or almost there\n            return;\n        }\n    }\n\n    var now = Date.now();\n\n    if(this.last_connect_attempt + this.reconnect_interval > now)\n    {\n        return;\n    }\n\n    this.last_connect_attempt = Date.now();\n\n    try\n    {\n        this.socket = new WebSocket(this.url);\n    }\n    catch(e)\n    {\n        this.handle_close(undefined);\n        return;\n    }\n\n    this.socket.binaryType = \"arraybuffer\";\n\n    this.socket.onopen = this.handle_open.bind(this);;\n    this.socket.onmessage = this.handle_message.bind(this);\n    this.socket.onclose = this.handle_close.bind(this);\n    this.socket.onerror = this.handle_error.bind(this);\n};\n\nNetworkAdapter.prototype.send = function(data)\n{\n    //console.log(\"send\", data);\n\n    if(!this.socket || this.socket.readyState !== 1)\n    {\n        this.send_queue.push(data);\n\n        if(this.send_queue.length > 2 * this.send_queue_limit)\n        {\n            this.send_queue = this.send_queue.slice(-this.send_queue_limit);\n        }\n\n        this.connect();\n    }\n    else\n    {\n        this.socket.send(data);\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar ASYNC_SAFE = false;\n\n(function()\n{\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        v86util.load_file = load_file_nodejs;\n    }\n    else\n    {\n        v86util.load_file = load_file;\n    }\n\n    v86util.AsyncXHRBuffer = AsyncXHRBuffer;\n    v86util.AsyncFileBuffer = AsyncFileBuffer;\n    v86util.SyncFileBuffer = SyncFileBuffer;\n\n    /**\n     * @param {string} filename\n     * @param {Object} options\n     */\n    function load_file(filename, options)\n    {\n        var http = new XMLHttpRequest();\n\n        http.open(options.method || \"get\", filename, true);\n\n        if(!options.as_text)\n        {\n            http.responseType = \"arraybuffer\";\n        }\n\n        if(options.headers)\n        {\n            var header_names = Object.keys(options.headers);\n\n            for(var i = 0; i < header_names.length; i++)\n            {\n                var name = header_names[i];\n                http.setRequestHeader(name, options.headers[name]);\n            }\n        }\n\n        if(options.range)\n        {\n            let start = options.range.start;\n            let end = start + options.range.length - 1;\n            http.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + end);\n        }\n\n        http.onload = function(e)\n        {\n            if(http.readyState === 4)\n            {\n                if(http.status !== 200 && http.status !== 206)\n                {\n                    console.error(\"Loading the image `\" + filename + \"` failed (status %d)\", http.status);\n                }\n                else if(http.response)\n                {\n                    options.done && options.done(http.response, http);\n                }\n            }\n        };\n\n        if(options.progress)\n        {\n            http.onprogress = function(e)\n            {\n                options.progress(e);\n            };\n        }\n\n        http.send(null);\n    }\n\n    function load_file_nodejs(filename, options)\n    {\n        let fs = require(\"fs\");\n\n        if(options.range)\n        {\n            dbg_assert(!options.as_text);\n\n            fs[\"open\"](filename, \"r\", (err, fd) =>\n            {\n                if(err) throw err;\n\n                let length = options.range.length;\n                var buffer = new global[\"Buffer\"](length);\n\n                fs[\"read\"](fd, buffer, 0, length, options.range.start, (err, bytes_read) =>\n                {\n                    if(err) throw err;\n\n                    dbg_assert(bytes_read === length);\n                    options.done && options.done(new Uint8Array(buffer));\n\n                    fs[\"close\"](fd, (err) => {\n                        if(err) throw err;\n                    });\n                });\n            });\n        }\n        else\n        {\n            var o = {\n                encoding: options.as_text ? \"utf-8\" : null,\n            };\n\n            fs[\"readFile\"](filename, o, function(err, data)\n            {\n                if(err)\n                {\n                    console.log(\"Could not read file:\", filename, err);\n                }\n                else\n                {\n                    var result = data;\n\n                    if(!options.as_text)\n                    {\n                        result = new Uint8Array(result).buffer;\n                    }\n\n                    options.done(result);\n                }\n            });\n        }\n    }\n\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        var determine_size = function(path, cb)\n        {\n            require(\"fs\")[\"stat\"](path, (err, stats) =>\n            {\n                if(err)\n                {\n                    cb(err);\n                }\n                else\n                {\n                    cb(null, stats.size);\n                }\n            });\n        };\n    }\n    else\n    {\n        var determine_size = function(url, cb)\n        {\n            v86util.load_file(url, {\n                done: (buffer, http) =>\n                {\n                    var header = http.getResponseHeader(\"Content-Range\") || \"\";\n                    var match = header.match(/\\/(\\d+)\\s*$/);\n\n                    if(match)\n                    {\n                        cb(null, +match[1]);\n                    }\n                    else\n                    {\n                        cb({ header });\n                    }\n                },\n                headers: {\n                    Range: \"bytes=0-0\",\n\n                    //\"Accept-Encoding\": \"\",\n\n                    // Added by Chromium, but can cause the whole file to be sent\n                    // Settings this to empty also causes problems and Chromium\n                    // doesn't seem to create this header any more\n                    //\"If-Range\": \"\",\n                }\n            });\n        };\n    }\n\n    /**\n     * Asynchronous access to ArrayBuffer, loading blocks lazily as needed,\n     * using the `Range: bytes=...` header\n     *\n     * @constructor\n     * @param {string} filename Name of the file to download\n     * @param {number|undefined} size\n     */\n    function AsyncXHRBuffer(filename, size)\n    {\n        this.filename = filename;\n\n        /** @const */\n        this.block_size = 256;\n        this.byteLength = size;\n\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncXHRBuffer.prototype.load = function()\n    {\n        if(this.byteLength !== undefined)\n        {\n            this.onload && this.onload({});\n            return;\n        }\n\n        // Determine the size using a request\n\n        determine_size(this.filename, (error, size) =>\n        {\n            if(error)\n            {\n                console.assert(false,\n                    \"Cannot use: \" + this.filename + \". \" +\n                    \"`Range: bytes=...` header not supported (Got `\" + error.header + \"`)\");\n            }\n            else\n            {\n                dbg_assert(size >= 0);\n                this.byteLength = size;\n                this.onload && this.onload({});\n            }\n        });\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get_from_cache = function(offset, len, fn)\n    {\n        var number_of_blocks = len / this.block_size;\n        var block_index = offset / this.block_size;\n\n        for(var i = 0; i < number_of_blocks; i++)\n        {\n            var block = this.loaded_blocks[block_index + i];\n\n            if(!block)\n            {\n                return;\n            }\n        }\n\n        if(number_of_blocks === 1)\n        {\n            return this.loaded_blocks[block_index];\n        }\n        else\n        {\n            var result = new Uint8Array(len);\n            for(var i = 0; i < number_of_blocks; i++)\n            {\n                result.set(this.loaded_blocks[block_index + i], i * this.block_size);\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset + len <= this.byteLength);\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            if(ASYNC_SAFE)\n            {\n                setTimeout(fn.bind(this, block), 0);\n            }\n            else\n            {\n                fn(block);\n            }\n            return;\n        }\n\n        v86util.load_file(this.filename, {\n            done: function done(buffer)\n            {\n                var block = new Uint8Array(buffer);\n                this.handle_read(offset, len, block);\n                fn(block);\n            }.bind(this),\n            range: { start: offset, length: len },\n        });\n    };\n\n    /**\n     * Relies on this.byteLength, this.loaded_blocks and this.block_size\n     *\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     *\n     * @param {number} start\n     * @param {!Uint8Array} data\n     * @param {function()} fn\n     */\n    AsyncXHRBuffer.prototype.set = function(start, data, fn)\n    {\n        console.assert(start + data.byteLength <= this.byteLength);\n\n        var len = data.length;\n\n        console.assert(start % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var start_block = start / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var block = this.loaded_blocks[start_block + i];\n\n            if(block === undefined)\n            {\n                block = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            }\n\n            var data_slice = data.subarray(i * this.block_size, (i + 1) * this.block_size);\n            block.set(data_slice);\n\n            console.assert(block.byteLength === data_slice.length);\n        }\n\n        fn();\n    };\n\n    /**\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     * @param {number} offset\n     * @param {number} len\n     * @param {!Uint8Array} block\n     */\n    AsyncXHRBuffer.prototype.handle_read = function(offset, len, block)\n    {\n        // Used by AsyncXHRBuffer and AsyncFileBuffer\n        // Overwrites blocks from the original source that have been written since\n\n        var start_block = offset / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var written_block = this.loaded_blocks[start_block + i];\n\n            if(written_block)\n            {\n                block.set(written_block, i * this.block_size);\n            }\n            //else\n            //{\n            //    var cached = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            //    cached.set(block.subarray(i * this.block_size, (i + 1) * this.block_size));\n            //}\n        }\n    };\n\n    AsyncXHRBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must download all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncXHRBuffer.prototype.get_written_blocks = function()\n    {\n        var count = 0;\n        for(var _ in this.loaded_blocks)\n        {\n            count++;\n        }\n\n        var buffer = new Uint8Array(count * this.block_size);\n        var indices = [];\n\n        var i = 0;\n        for(var index in this.loaded_blocks)\n        {\n            var block = this.loaded_blocks[index];\n            dbg_assert(block.length === this.block_size);\n            index = +index;\n            indices.push(index);\n            buffer.set(\n                block,\n                i * this.block_size\n            );\n            i++;\n        }\n\n        return {\n            buffer,\n            indices,\n            block_size: this.block_size,\n        };\n    };\n\n    /**\n     * Synchronous access to File, loading blocks from the input type=file\n     * The whole file is loaded into memory during initialisation\n     *\n     * @constructor\n     */\n    function SyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        if(file.size > (1 << 30))\n        {\n            console.warn(\"SyncFileBuffer: Allocating buffer of \" + (file.size >> 20) + \" MB ...\");\n        }\n\n        this.buffer = new ArrayBuffer(file.size);\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    SyncFileBuffer.prototype.load = function()\n    {\n        this.load_next(0);\n    };\n\n    /**\n     * @param {number} start\n     */\n    SyncFileBuffer.prototype.load_next = function(start)\n    {\n        /** @const */\n        var PART_SIZE = 4 << 20;\n\n        var filereader = new FileReader();\n\n        filereader.onload = function(e)\n        {\n            var buffer = new Uint8Array(e.target.result);\n            new Uint8Array(this.buffer, start).set(buffer);\n            this.load_next(start + PART_SIZE);\n        }.bind(this);\n\n        if(this.onprogress)\n        {\n            this.onprogress({\n                loaded: start,\n                total: this.byteLength,\n                lengthComputable: true,\n            });\n        }\n\n        if(start < this.byteLength)\n        {\n            var end = Math.min(start + PART_SIZE, this.byteLength);\n            var slice = this.file.slice(start, end);\n            filereader.readAsArrayBuffer(slice);\n        }\n        else\n        {\n            this.file = undefined;\n            this.onload && this.onload({ buffer: this.buffer });\n        }\n    };\n\n    /**\n     * @param {number} start\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    SyncFileBuffer.prototype.get = function(start, len, fn)\n    {\n        console.assert(start + len <= this.byteLength);\n        fn(new Uint8Array(this.buffer, start, len));\n    };\n\n    /**\n     * @param {number} offset\n     * @param {!Uint8Array} slice\n     * @param {function()} fn\n     */\n    SyncFileBuffer.prototype.set = function(offset, slice, fn)\n    {\n        console.assert(offset + slice.byteLength <= this.byteLength);\n\n        new Uint8Array(this.buffer, offset, slice.byteLength).set(slice);\n        fn();\n    };\n\n    SyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        fn(this.buffer);\n    };\n\n    /**\n     * Asynchronous access to File, loading blocks from the input type=file\n     *\n     * @constructor\n     */\n    function AsyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        /** @const */\n        this.block_size = 256;\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncFileBuffer.prototype.load = function()\n    {\n        this.onload && this.onload({});\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncFileBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            fn(block);\n            return;\n        }\n\n        var fr = new FileReader();\n\n        fr.onload = function(e)\n        {\n            var buffer = e.target.result;\n            var block = new Uint8Array(buffer);\n\n            this.handle_read(offset, len, block);\n            fn(block);\n        }.bind(this);\n\n        fr.readAsArrayBuffer(this.file.slice(offset, offset + len));\n    };\n    AsyncFileBuffer.prototype.get_from_cache = AsyncXHRBuffer.prototype.get_from_cache;\n    AsyncFileBuffer.prototype.set = AsyncXHRBuffer.prototype.set;\n    AsyncFileBuffer.prototype.handle_read = AsyncXHRBuffer.prototype.handle_read;\n\n    AsyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must load all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncFileBuffer.prototype.get_as_file = function(name)\n    {\n        var parts = [];\n        var existing_blocks = Object.keys(this.loaded_blocks)\n                                .map(Number)\n                                .sort(function(x, y) { return x - y; });\n\n        var current_offset = 0;\n\n        for(var i = 0; i < existing_blocks.length; i++)\n        {\n            var block_index = existing_blocks[i];\n            var block = this.loaded_blocks[block_index];\n            var start = block_index * this.block_size;\n            console.assert(start >= current_offset);\n\n            if(start !== current_offset)\n            {\n                parts.push(this.file.slice(current_offset, start));\n                current_offset = start;\n            }\n\n            parts.push(block);\n            current_offset += block.length;\n        }\n\n        if(current_offset !== this.file.size)\n        {\n            parts.push(this.file.slice(current_offset));\n        }\n\n        var file = new File(parts, name);\n        console.assert(file.size === this.file.size);\n\n        return file;\n    };\n\n})();\n","\"use strict\";\n\n/**\n * Constructor for emulator instances.\n *\n * Usage: `var emulator = new V86Starter(options);`\n *\n * Options can have the following properties (all optional, default in parenthesis):\n *\n * - `memory_size number` (16 * 1024 * 1024) - The memory size in bytes, should\n *   be a power of 2.\n * - `vga_memory_size number` (8 * 1024 * 1024) - VGA memory size in bytes.\n *\n * - `autostart boolean` (false) - If emulation should be started when emulator\n *   is ready.\n *\n * - `disable_keyboard boolean` (false) - If the keyboard should be disabled.\n * - `disable_mouse boolean` (false) - If the mouse should be disabled.\n *\n * - `network_relay_url string` (No network card) - The url of a server running\n *   websockproxy. See [networking.md](networking.md). Setting this will\n *   enable an emulated network card.\n *\n * - `bios Object` (No bios) - Either a url pointing to a bios or an\n *   ArrayBuffer, see below.\n * - `vga_bios Object` (No VGA bios) - VGA bios, see below.\n * - `hda Object` (No hard drive) - First hard disk, see below.\n * - `fda Object` (No floppy disk) - First floppy disk, see below.\n * - `cdrom Object` (No CD) - See below.\n * - `initial_state Object` (Normal boot) - An initial state to load, see\n *   [`restore_state`](#restore_statearraybuffer-state) and below.\n *\n * - `filesystem Object` (No 9p filesystem) - A 9p filesystem, see\n *   [filesystem.md](filesystem.md).\n *\n * - `serial_container HTMLTextAreaElement` (No serial terminal) - A textarea\n *   that will receive and send data to the emulated serial terminal.\n *   Alternatively the serial terminal can also be accessed programatically,\n *   see [serial.html](../examples/serial.html).\n *\n * - `screen_container HTMLElement` (No screen) - An HTMLElement. This should\n *   have a certain structure, see [basic.html](../examples/basic.html).\n *\n * ***\n *\n * There are two ways to load images (`bios`, `vga_bios`, `cdrom`, `hda`, ...):\n *\n * - Pass an object that has a url. Optionally, `async: true` and `size:\n *   size_in_bytes` can be added to the object, so that sectors of the image\n *   are loaded on demand instead of being loaded before boot (slower, but\n *   strongly recommended for big files). In that case, the `Range: bytes=...`\n *   header must be supported on the server.\n *\n *   ```javascript\n *   // download file before boot\n *   bios: {\n *       url: \"bios/seabios.bin\"\n *   }\n *   // download file sectors as requested, size is required\n *   hda: {\n *       url: \"disk/linux.iso\",\n *       async: true,\n *       size: 16 * 1024 * 1024\n *   }\n *   ```\n *\n * - Pass an `ArrayBuffer` or `File` object as `buffer` property.\n *\n *   ```javascript\n *   // use <input type=file>\n *   bios: {\n *       buffer: document.all.hd_image.files[0]\n *   }\n *   // start with empty hard drive\n *   hda: {\n *       buffer: new ArrayBuffer(16 * 1024 * 1024)\n *   }\n *   ```\n *\n * ***\n *\n * @param {Object} options Options to initialize the emulator with.\n * @constructor\n */\nfunction V86Starter(options)\n{\n    //var worker = new Worker(\"src/browser/worker.js\");\n    //var adapter_bus = this.bus = WorkerBus.init(worker);\n\n    this.cpu_is_running = false;\n\n    var bus = Bus.create();\n    var adapter_bus = this.bus = bus[0];\n    this.emulator_bus = bus[1];\n    var emulator = this.v86 = new v86(this.emulator_bus);\n\n    this.bus.register(\"emulator-stopped\", function()\n    {\n        this.cpu_is_running = false;\n    }, this);\n\n    this.bus.register(\"emulator-started\", function()\n    {\n        this.cpu_is_running = true;\n    }, this);\n\n    var settings = {};\n\n    this.disk_images = {\n        \"fda\": undefined,\n        \"fdb\": undefined,\n        \"hda\": undefined,\n        \"hdb\": undefined,\n        \"cdrom\": undefined,\n    };\n\n    settings.load_devices = true;\n    settings.memory_size = options[\"memory_size\"] || 64 * 1024 * 1024;\n    settings.vga_memory_size = options[\"vga_memory_size\"] || 8 * 1024 * 1024;\n    settings.boot_order = options[\"boot_order\"] || 0x213;\n    settings.fastboot = options[\"fastboot\"] || false;\n    settings.fda = undefined;\n    settings.fdb = undefined;\n    settings.uart1 = options[\"uart1\"] || false;\n    settings.uart2 = options[\"uart2\"] || false;\n    settings.uart3 = options[\"uart3\"] || false;\n\n    if(options[\"network_relay_url\"])\n    {\n        this.network_adapter = new NetworkAdapter(options[\"network_relay_url\"], adapter_bus);\n        settings.enable_ne2k = true;\n    }\n\n    if(!options[\"disable_keyboard\"])\n    {\n        this.keyboard_adapter = new KeyboardAdapter(adapter_bus);\n    }\n    if(!options[\"disable_mouse\"])\n    {\n        this.mouse_adapter = new MouseAdapter(adapter_bus, options[\"screen_container\"]);\n    }\n\n    if(options[\"screen_container\"])\n    {\n        this.screen_adapter = new ScreenAdapter(options[\"screen_container\"], adapter_bus);\n    }\n    else if(options[\"screen_dummy\"])\n    {\n        this.screen_adapter = new DummyScreenAdapter(adapter_bus);\n    }\n\n    if(options[\"serial_container\"])\n    {\n        this.serial_adapter = new SerialAdapter(options[\"serial_container\"], adapter_bus);\n    }\n\n    if(!options[\"disable_speaker\"])\n    {\n        this.speaker_adapter = new SpeakerAdapter(adapter_bus);\n    }\n\n    // ugly, but required for closure compiler compilation\n    function put_on_settings(name, buffer)\n    {\n        switch(name)\n        {\n            case \"hda\":\n                settings.hda = this.disk_images[\"hda\"] = buffer;\n                break;\n            case \"hdb\":\n                settings.hdb = this.disk_images[\"hdb\"] = buffer;\n                break;\n            case \"cdrom\":\n                settings.cdrom = this.disk_images[\"cdrom\"] = buffer;\n                break;\n            case \"fda\":\n                settings.fda = this.disk_images[\"fda\"] = buffer;\n                break;\n            case \"fdb\":\n                settings.fdb = this.disk_images[\"fdb\"] = buffer;\n                break;\n\n            case \"multiboot\":\n                settings.multiboot = this.disk_images[\"multiboot\"] = buffer;\n                break;\n\n            case \"bios\":\n                settings.bios = buffer.buffer;\n                break;\n            case \"vga_bios\":\n                settings.vga_bios = buffer.buffer;\n                break;\n            case \"initial_state\":\n                settings.initial_state = buffer.buffer;\n                break;\n            case \"fs9p_json\":\n                settings.fs9p_json = buffer.buffer;\n                break;\n            default:\n                dbg_assert(false, name);\n        }\n    }\n\n    var files_to_load = [];\n\n    function add_file(name, file)\n    {\n        if(!file)\n        {\n            return;\n        }\n\n        if(file[\"get\"] && file[\"set\"] && file[\"load\"])\n        {\n            files_to_load.push({\n                name: name,\n                loadable: file,\n            });\n            return;\n        }\n\n        // Anything coming from the outside world needs to be quoted for\n        // Closure Compiler compilation\n        file = {\n            buffer: file[\"buffer\"],\n            async: file[\"async\"],\n            url: file[\"url\"],\n            size: file[\"size\"],\n        };\n\n        if(name === \"bios\" || name === \"vga_bios\" ||\n            name === \"initial_state\" || name === \"multiboot\")\n        {\n            // Ignore async for these because they must be available before boot.\n            // This should make result.buffer available after the object is loaded\n            file.async = false;\n        }\n\n        if(file.buffer instanceof ArrayBuffer)\n        {\n            var buffer = new SyncBuffer(file.buffer);\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(typeof File !== \"undefined\" && file.buffer instanceof File)\n        {\n            // SyncFileBuffer:\n            // - loads the whole disk image into memory, impossible for large files (more than 1GB)\n            // - can later serve get/set operations fast and synchronously\n            // - takes some time for first load, neglectable for small files (up to 100Mb)\n            //\n            // AsyncFileBuffer:\n            // - loads slices of the file asynchronously as requested\n            // - slower get/set\n\n            // Heuristics: If file is larger than or equal to 256M, use AsyncFileBuffer\n            if(file.async === undefined)\n            {\n                file.async = file.buffer.size >= 256 * 1024 * 1024;\n            }\n\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncFileBuffer(file.buffer);\n            }\n            else\n            {\n                var buffer = new v86util.SyncFileBuffer(file.buffer);\n            }\n\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(file.url)\n        {\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncXHRBuffer(file.url, file.size);\n                files_to_load.push({\n                    name: name,\n                    loadable: buffer,\n                });\n            }\n            else\n            {\n                files_to_load.push({\n                    name: name,\n                    url: file.url,\n                    size: file.size,\n                });\n            }\n        }\n        else\n        {\n            dbg_log(\"Ignored file: url=\" + file.url + \" buffer=\" + file.buffer);\n        }\n    }\n\n    var image_names = [\n        \"bios\", \"vga_bios\",\n        \"cdrom\", \"hda\", \"hdb\", \"fda\", \"fdb\",\n        \"initial_state\", \"multiboot\",\n    ];\n\n    for(var i = 0; i < image_names.length; i++)\n    {\n        add_file(image_names[i], options[image_names[i]]);\n    }\n\n    if(options[\"filesystem\"])\n    {\n        var fs_url = options[\"filesystem\"][\"basefs\"];\n        var base_url = options[\"filesystem\"][\"baseurl\"];\n\n        this.fs9p = new FS(base_url);\n        settings.fs9p = this.fs9p;\n\n        if(fs_url)\n        {\n            console.assert(base_url, \"Filesystem: baseurl must be specified\");\n\n            var size;\n\n            if(typeof fs_url === \"object\")\n            {\n                size = fs_url[\"size\"];\n                fs_url = fs_url[\"url\"];\n            }\n            dbg_assert(typeof fs_url === \"string\");\n\n            files_to_load.push({\n                name: \"fs9p_json\",\n                url: fs_url,\n                size: size,\n                as_text: true,\n            });\n        }\n    }\n\n    var starter = this;\n    var total = files_to_load.length;\n\n    var cont = function(index)\n    {\n        if(index === total)\n        {\n            setTimeout(done.bind(this), 0);\n            return;\n        }\n\n        var f = files_to_load[index];\n\n        if(f.loadable)\n        {\n            f.loadable.onload = function(e)\n            {\n                put_on_settings.call(this, f.name, f.loadable);\n                cont(index + 1);\n            }.bind(this);\n            f.loadable.load();\n        }\n        else\n        {\n            v86util.load_file(f.url, {\n                done: function(result)\n                {\n                    put_on_settings.call(this, f.name, new SyncBuffer(result));\n                    cont(index + 1);\n                }.bind(this),\n                progress: function progress(e)\n                {\n                    if(e.target.status === 200)\n                    {\n                        starter.emulator_bus.send(\"download-progress\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n\n                            lengthComputable: e.lengthComputable,\n                            total: e.total || f.size,\n                            loaded: e.loaded,\n                        });\n                    }\n                    else\n                    {\n                        starter.emulator_bus.send(\"download-error\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n                            request: e.target,\n                        });\n                    }\n                },\n                as_text: f.as_text,\n            });\n        }\n    }.bind(this);\n    cont(0);\n\n    function done()\n    {\n        if(settings.initial_state)\n        {\n            // avoid large allocation now, memory will be restored later anyway\n            settings.memory_size = 0;\n        }\n\n        this.bus.send(\"cpu-init\", settings);\n\n        setTimeout(function()\n        {\n            if(settings.initial_state)\n            {\n                emulator.restore_state(settings.initial_state);\n            }\n\n            setTimeout(function()\n            {\n                if(settings.fs9p && settings.fs9p_json)\n                {\n                    settings.fs9p.OnJSONLoaded(settings.fs9p_json);\n                }\n\n                if(options[\"autostart\"])\n                {\n                    this.bus.send(\"cpu-run\");\n                }\n            }.bind(this), 0);\n        }.bind(this), 0);\n    }\n}\n\n/**\n * Start emulation. Do nothing if emulator is running already. Can be\n * asynchronous.\n * @export\n */\nV86Starter.prototype.run = function()\n{\n    this.bus.send(\"cpu-run\");\n};\n\n/**\n * Stop emulation. Do nothing if emulator is not running. Can be asynchronous.\n * @export\n */\nV86Starter.prototype.stop = function()\n{\n    this.bus.send(\"cpu-stop\");\n};\n\n/**\n * @ignore\n * @export\n */\nV86Starter.prototype.destroy = function()\n{\n    this.stop();\n\n    this.v86.destroy();\n    this.keyboard_adapter && this.keyboard_adapter.destroy();\n    this.network_adapter && this.network_adapter.destroy();\n    this.mouse_adapter && this.mouse_adapter.destroy();\n    this.screen_adapter && this.screen_adapter.destroy();\n    this.serial_adapter && this.serial_adapter.destroy();\n};\n\n/**\n * Restart (force a reboot).\n * @export\n */\nV86Starter.prototype.restart = function()\n{\n    this.bus.send(\"cpu-restart\");\n};\n\n/**\n * Add an event listener (the emulator is an event emitter). A list of events\n * can be found at [events.md](events.md).\n *\n * The callback function gets a single argument which depends on the event.\n *\n * @param {string} event Name of the event.\n * @param {function(*)} listener The callback function.\n * @export\n */\nV86Starter.prototype.add_listener = function(event, listener)\n{\n    this.bus.register(event, listener, this);\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} event\n * @param {function(*)} listener\n * @export\n */\nV86Starter.prototype.remove_listener = function(event, listener)\n{\n    this.bus.unregister(event, listener);\n};\n\n/**\n * Restore the emulator state from the given state, which must be an\n * ArrayBuffer returned by\n * [`save_state`](#save_statefunctionobject-arraybuffer-callback).\n *\n * Note that the state can only be restored correctly if this constructor has\n * been created with the same options as the original instance (e.g., same disk\n * images, memory size, etc.).\n *\n * Different versions of the emulator might use a different format for the\n * state buffer.\n *\n * @param {ArrayBuffer} state\n * @export\n */\nV86Starter.prototype.restore_state = function(state)\n{\n    this.v86.restore_state(state);\n};\n\n/**\n * Asynchronously save the current state of the emulator. The first argument to\n * the callback is an Error object if something went wrong and is null\n * otherwise.\n *\n * @param {function(Object, ArrayBuffer)} callback\n * @export\n */\nV86Starter.prototype.save_state = function(callback)\n{\n    // Might become asynchronous at some point\n\n    setTimeout(function()\n    {\n        try\n        {\n            callback(null, this.v86.save_state());\n        }\n        catch(e)\n        {\n            callback(e, null);\n        }\n    }.bind(this), 0);\n};\n\n/**\n * Return an object with several statistics. Return value looks similar to\n * (but can be subject to change in future versions or different\n * configurations, so use defensively):\n *\n * ```javascript\n * {\n *     \"cpu\": {\n *         \"instruction_counter\": 2821610069\n *     },\n *     \"hda\": {\n *         \"sectors_read\": 95240,\n *         \"sectors_written\": 952,\n *         \"bytes_read\": 48762880,\n *         \"bytes_written\": 487424,\n *         \"loading\": false\n *     },\n *     \"cdrom\": {\n *         \"sectors_read\": 0,\n *         \"sectors_written\": 0,\n *         \"bytes_read\": 0,\n *         \"bytes_written\": 0,\n *         \"loading\": false\n *     },\n *     \"mouse\": {\n *         \"enabled\": true\n *     },\n *     \"vga\": {\n *         \"is_graphical\": true,\n *         \"res_x\": 800,\n *         \"res_y\": 600,\n *         \"bpp\": 32\n *     }\n * }\n * ```\n *\n * @deprecated\n * @return {Object}\n * @export\n */\nV86Starter.prototype.get_statistics = function()\n{\n    console.warn(\"V86Starter.prototype.get_statistics is deprecated. Use events instead.\");\n\n    var stats = {\n        cpu: {\n            instruction_counter: this.get_instruction_counter(),\n        },\n    };\n\n    if(!this.v86)\n    {\n        return stats;\n    }\n\n    var devices = this.v86.cpu.devices;\n\n    if(devices.hda)\n    {\n        stats.hda = devices.hda.stats;\n    }\n\n    if(devices.cdrom)\n    {\n        stats.cdrom = devices.cdrom.stats;\n    }\n\n    if(devices.ps2)\n    {\n        stats[\"mouse\"] = {\n            \"enabled\": devices.ps2.use_mouse,\n        };\n    }\n\n    if(devices.vga)\n    {\n        stats[\"vga\"] = {\n            \"is_graphical\": devices.vga.stats.is_graphical,\n        };\n    }\n\n    return stats;\n};\n\n/**\n * @return {number}\n * @ignore\n * @export\n */\nV86Starter.prototype.get_instruction_counter = function()\n{\n    if(this.v86)\n    {\n        return this.v86.cpu.timestamp_counter;\n    }\n    else\n    {\n        // TODO: Should be handled using events\n        return 0;\n    }\n};\n\n/**\n * @return {boolean}\n * @export\n */\nV86Starter.prototype.is_running = function()\n{\n    return this.cpu_is_running;\n};\n\n/**\n * Send a sequence of scan codes to the emulated PS2 controller. A list of\n * codes can be found at http://stanislavs.org/helppc/make_codes.html.\n * Do nothing if there is no keyboard controller.\n *\n * @param {Array.<number>} codes\n * @export\n */\nV86Starter.prototype.keyboard_send_scancodes = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.bus.send(\"keyboard-code\", codes[i]);\n    }\n};\n\n/**\n * Send translated keys\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_keys = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.keyboard_adapter.simulate_press(codes[i]);\n    }\n};\n\n/**\n * Send text\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_text = function(string)\n{\n    for(var i = 0; i < string.length; i++)\n    {\n        this.keyboard_adapter.simulate_char(string[i]);\n    }\n};\n\n/**\n * Download a screenshot.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_make_screenshot = function()\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.make_screenshot();\n    }\n};\n\n/**\n * Set the scaling level of the emulated screen.\n *\n * @param {number} sx\n * @param {number} sy\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_set_scale = function(sx, sy)\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.set_scale(sx, sy);\n    }\n};\n\n/**\n * Go fullscreen.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_go_fullscreen = function()\n{\n    if(!this.screen_adapter)\n    {\n        return;\n    }\n\n    var elem = document.getElementById(\"screen_container\");\n\n    if(!elem)\n    {\n        return;\n    }\n\n    // bracket notation because otherwise they get renamed by closure compiler\n    var fn = elem[\"requestFullScreen\"] ||\n            elem[\"webkitRequestFullscreen\"] ||\n            elem[\"mozRequestFullScreen\"] ||\n            elem[\"msRequestFullScreen\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n\n        // This is necessary, because otherwise chromium keyboard doesn't work anymore.\n        // Might (but doesn't seem to) break something else\n        var focus_element = document.getElementsByClassName(\"phone_keyboard\")[0];\n        focus_element && focus_element.focus();\n    }\n\n    //this.lock_mouse(elem);\n    this.lock_mouse();\n};\n\n/**\n * Lock the mouse cursor: It becomes invisble and is not moved out of the\n * browser window.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.lock_mouse = function()\n{\n    var elem = document.body;\n\n    var fn = elem[\"requestPointerLock\"] ||\n                elem[\"mozRequestPointerLock\"] ||\n                elem[\"webkitRequestPointerLock\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n    }\n};\n\n/**\n * Enable or disable sending mouse events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n */\nV86Starter.prototype.mouse_set_status = function(enabled)\n{\n    if(this.mouse_adapter)\n    {\n        this.mouse_adapter.emu_enabled = enabled;\n    }\n};\n\n/**\n * Enable or disable sending keyboard events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n * @export\n */\nV86Starter.prototype.keyboard_set_status = function(enabled)\n{\n    if(this.keyboard_adapter)\n    {\n        this.keyboard_adapter.emu_enabled = enabled;\n    }\n};\n\n\n/**\n * Send a string to the first emulated serial terminal.\n *\n * @param {string} data\n * @export\n */\nV86Starter.prototype.serial0_send = function(data)\n{\n    for(var i = 0; i < data.length; i++)\n    {\n        this.bus.send(\"serial0-input\", data.charCodeAt(i));\n    }\n};\n\n/**\n * Send bytes to a serial port (to be received by the emulated PC).\n *\n * @param {Uint8Array} data\n * @export\n */\nV86Starter.prototype.serial_send_bytes = function(serial, data)\n{\n    for(var i = 0; i < data.length; i++)\n    {\n        this.bus.send(\"serial\" + serial + \"-input\", data[i]);\n    }\n};\n\n/**\n * Write to a file in the 9p filesystem. Nothing happens if no filesystem has\n * been initialized. First argument to the callback is an error object if\n * something went wrong and null otherwise.\n *\n * @param {string} file\n * @param {Uint8Array} data\n * @param {function(Object)=} callback\n * @export\n */\nV86Starter.prototype.create_file = function(file, data, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var parts = file.split(\"/\");\n    var filename = parts[parts.length - 1];\n\n    var path_infos = fs.SearchPath(file);\n    var parent_id = path_infos.parentid;\n    var not_found = filename === \"\" || parent_id === -1;\n\n    if(!not_found)\n    {\n        fs.CreateBinaryFile(filename, parent_id, data);\n    }\n\n    if(callback)\n    {\n        setTimeout(function()\n        {\n            if(not_found)\n            {\n                callback(new FileNotFoundError());\n            }\n            else\n            {\n                callback(null);\n            }\n        }, 0);\n    }\n};\n\n/**\n * Read a file in the 9p filesystem. Nothing happens if no filesystem has been\n * initialized.\n *\n * @param {string} file\n * @param {function(Object, Uint8Array)} callback\n * @export\n */\nV86Starter.prototype.read_file = function(file, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var path_infos = fs.SearchPath(file);\n    var id = path_infos.id;\n\n    if(id === -1)\n    {\n        callback(new FileNotFoundError(), null);\n    }\n    else\n    {\n        fs.OpenInode(id, undefined);\n        fs.AddEvent(\n            id,\n            function()\n            {\n                var data = fs.inodedata[id];\n\n                if(data)\n                {\n                    callback(null, data.subarray(0, fs.inodes[id].size));\n                }\n                else\n                {\n                    callback(new FileNotFoundError(), null);\n                }\n            }\n        );\n    }\n};\n\n/**\n * @ignore\n * @constructor\n *\n * @param {string=} message\n */\nfunction FileNotFoundError(message)\n{\n    this.message = message || \"File not found\";\n}\nFileNotFoundError.prototype = Error.prototype;\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"V86Starter\"] = V86Starter;\n    window[\"V86\"] = V86Starter;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"V86Starter\"] = V86Starter;\n    module.exports[\"V86\"] = V86Starter;\n}\nelse if(typeof importScripts === \"function\")\n{\n    // web worker\n    self[\"V86Starter\"] = V86Starter;\n    self[\"V86\"] = V86Starter;\n}\n","\"use strict\";\n\nvar WorkerBus = {};\n\n/** @constructor */\nWorkerBus.Connector = function(pair)\n{\n    this.listeners = {};\n    this.pair = pair;\n\n    pair.addEventListener(\"message\", function(e)\n    {\n        var data = e.data;\n        var listeners = this.listeners[data[0]];\n\n        for(var i = 0; i < listeners.length; i++)\n        {\n            var listener = listeners[i];\n            listener.fn.call(listener.this_value, data[1]);\n        }\n    }.bind(this), false);\n\n};\n\nWorkerBus.Connector.prototype.register = function(name, fn, this_value)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        listeners = this.listeners[name] = [];\n    }\n\n    listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\n/**\n * Send (\"emit\") a message\n *\n * @param {string} name\n * @param {*=} value\n * @param {*=} transfer_list\n */\nWorkerBus.Connector.prototype.send = function(name, value, transfer_list)\n{\n    dbg_assert(arguments.length >= 1);\n\n    if(!this.pair)\n    {\n        return;\n    }\n\n    this.pair.postMessage([name, value], transfer_list);\n};\n\n\nWorkerBus.init = function(worker)\n{\n    return new WorkerBus.Connector(worker);\n};\n\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction DummyScreenAdapter(bus)\n{\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        var min = data[0];\n        var max = data[1];\n\n        this.update_buffer(min, max);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-text-scroll\", function(rows)\n    {\n        console.log(\"scroll\", rows);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1]);\n    }, this);\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n        }\n    };\n\n    this.destroy = function()\n    {\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n    };\n\n    this.clear_screen = function()\n    {\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n    };\n\n    this.set_size_graphical = function(width, height)\n    {\n        graphic_buffer = new Uint8Array(4 * width * height);\n        graphic_buffer32 = new Int32Array(graphic_buffer.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n    };\n\n    this.update_cursor_scanline = function(start, end)\n    {\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.update_buffer = function(min, max)\n    {\n        if(max < min)\n        {\n            return;\n        }\n\n        var min_y = min / graphical_mode_width | 0;\n        var max_y = max / graphical_mode_width | 0;\n    };\n\n    this.get_text_screen = function()\n    {\n        var screen = [];\n\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            screen.push(this.get_text_row(i));\n        }\n\n        return screen;\n    };\n\n    this.get_text_row = function(i)\n    {\n        var row = \"\";\n        var offset = 3 * i * text_mode_width;\n\n        for(var j = 0; j < text_mode_width; j++)\n        {\n            row += String.fromCharCode(text_mode_data[offset + 3 * j]);\n        }\n\n        return row;\n    };\n}\n","// -------------------------------------------------\n// ----------------- FILESYSTEM---------------------\n// -------------------------------------------------\n// Implementation of a unix filesystem in memory.\n\n\"use strict\";\n\nvar S_IRWXUGO = 0x1FF;\nvar S_IFMT = 0xF000;\nvar S_IFSOCK = 0xC000;\nvar S_IFLNK = 0xA000;\nvar S_IFREG = 0x8000;\nvar S_IFBLK = 0x6000;\nvar S_IFDIR = 0x4000;\nvar S_IFCHR = 0x2000;\n\n//var S_IFIFO  0010000\n//var S_ISUID  0004000\n//var S_ISGID  0002000\n//var S_ISVTX  0001000\n\nvar O_RDONLY = 0x0000; // open for reading only \nvar O_WRONLY = 0x0001; // open for writing only\nvar O_RDWR = 0x0002; // open for reading and writing\nvar O_ACCMODE = 0x0003; // mask for above modes\n\nvar STATUS_INVALID = -0x1;\nvar STATUS_OK = 0x0;\nvar STATUS_OPEN = 0x1;\nvar STATUS_ON_SERVER = 0x2;\nvar STATUS_LOADING = 0x3;\nvar STATUS_UNLINKED = 0x4;\n\n\n/** @const */ var JSONFS_VERSION = 2;\n\n\n/** @const */ var JSONFS_IDX_NAME = 0\n/** @const */ var JSONFS_IDX_SIZE = 1\n/** @const */ var JSONFS_IDX_MTIME = 2\n/** @const */ var JSONFS_IDX_MODE = 3\n/** @const */ var JSONFS_IDX_UID = 4\n/** @const */ var JSONFS_IDX_GID = 5\n/** @const */ var JSONFS_IDX_TARGET = 6\n\n\n/** @constructor */\nfunction FS(baseurl) {\n    /** @type {Array.<Inode>} */\n    this.inodes = [];\n    this.events = [];\n\n    this.baseurl = baseurl;\n\n    this.qidnumber = 0x0;\n    this.filesinloadingqueue = 0;\n    this.OnLoaded = function() {};\n\n    //this.tar = new TAR(this);\n\n    this.inodedata = {};\n\n    this.total_size = 256 * 1024 * 1024 * 1024;\n    this.used_size = 0;\n\n    //RegisterMessage(\"LoadFilesystem\", this.LoadFilesystem.bind(this) );\n    //RegisterMessage(\"MergeFile\", this.MergeFile.bind(this) );\n    //RegisterMessage(\"tar\",\n    //    function(data) {\n    //        SendToMaster(\"tar\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n    //RegisterMessage(\"sync\",\n    //    function(data) {\n    //        SendToMaster(\"sync\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n\n    // root entry\n    this.CreateDirectory(\"\", -1);\n}\n\n\n// -----------------------------------------------------\n\nFS.prototype.AddEvent = function(id, OnEvent) {\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_OK) {\n        OnEvent();\n        return;\n    }\n    this.events.push({id: id, OnEvent: OnEvent});    \n}\n\nFS.prototype.HandleEvent = function(id) {\n\n    if (this.filesinloadingqueue == 0) {\n        this.OnLoaded();\n        this.OnLoaded = function() {}\n    }\n    //message.Debug(\"number of events: \" + this.events.length);\n    var newevents = [];\n    for(var i=0; i<this.events.length; i++) {\n        if (this.events[i].id == id) {\n            this.events[i].OnEvent();\n        } else {\n            newevents.push(this.events[i]);\n        }\n    }\n    this.events = newevents;\n}\n\nFS.prototype.OnJSONLoaded = function(fs)\n{\n    if(DEBUG)\n    {\n        console.assert(fs, \"Invalid fs passed to OnJSONLoaded\");\n    }\n\n    //console.time(\"parse\");\n    var fsdata = JSON.parse(fs);\n    //console.timeEnd(\"parse\");\n\n    if(fsdata[\"version\"] !== JSONFS_VERSION)\n    {\n        throw \"The filesystem JSON format has changed. \" +\n              \"Please update your fs2json (https://github.com/copy/fs2json) and recreate the filesystem JSON.\";\n    }\n\n    var fsroot = fsdata[\"fsroot\"];\n    this.used_size = fsdata[\"size\"];\n\n    var me = this;\n\n    setTimeout(function()\n    {\n        //console.time(\"Load\");\n        //console.profile(\"Load\");\n        for(var i = 0; i < fsroot.length; i++) {\n            me.LoadRecursive(fsroot[i], 0);\n        }\n        //console.profileEnd(\"Load\");\n        //console.timeEnd(\"Load\");\n\n        //if(DEBUG)\n        //{\n        //    console.time(\"Check\");\n        //    me.Check();\n        //    console.timeEnd(\"Check\");\n        //}\n\n        me.OnLoaded();\n        me.OnLoaded = function() {};\n    }, 0);\n};\n\nFS.prototype.LoadRecursive = function(data, parentid)\n{\n    var inode = this.CreateInode();\n\n    inode.name = data[JSONFS_IDX_NAME]\n    inode.size = data[JSONFS_IDX_SIZE];\n    inode.mtime = data[JSONFS_IDX_MTIME];\n    inode.ctime = inode.mtime;\n    inode.atime = inode.mtime;\n    inode.mode = data[JSONFS_IDX_MODE];\n    inode.uid = data[JSONFS_IDX_UID];\n    inode.gid = data[JSONFS_IDX_GID];\n\n    inode.parentid = parentid;\n    this.inodes[inode.parentid].nlinks++;\n\n    var ifmt = inode.mode & S_IFMT;\n\n    if(ifmt === S_IFDIR)\n    {\n        this.LoadDir(inode, data[JSONFS_IDX_TARGET]);\n    }\n    else if(ifmt === S_IFREG)\n    {\n        inode.status = STATUS_ON_SERVER;\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFLNK)\n    {\n        inode.symlink = data[JSONFS_IDX_TARGET];\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFSOCK)\n    {\n        // socket: ignore\n    }\n    else\n    {\n        dbg_log(\"Unexpected ifmt: \" + h(ifmt) + \" (\" + inode.name + \")\");\n    }\n}\n\nFS.prototype.LoadDir = function(inode, children)\n{\n    inode.updatedir = true;\n    inode.nlinks = 2; // . and ..\n\n    var p = this.inodes.length;\n    this.PushInode(inode);\n\n    for(var i = 0; i < children.length; i++) {\n        this.LoadRecursive(children[i], p);\n    }\n}\n\n// Loads the data from a url for a specific inode\nFS.prototype.LoadFile = function(idx) {\n    var inode = this.inodes[idx];\n    if (inode.status != STATUS_ON_SERVER) {\n        return;\n    }\n    inode.status = STATUS_LOADING;\n    this.filesinloadingqueue++;\n\n    //if (inode.compressed) {\n    //    inode.data = new Uint8Array(inode.size);\n    //    LoadBinaryResource(inode.url + \".bz2\",\n    //    function(buffer){\n    //        var buffer8 = new Uint8Array(buffer);\n    //        var ofs = 0;\n    //        bzip2.simple(buffer8, function(x){inode.data[ofs++] = x;}.bind(this) );    \n    //        inode.status = STATUS_OK;\n    //        this.filesinloadingqueue--;\n    //        this.HandleEvent(idx);            \n    //    }.bind(this), \n    //    function(error){throw error;});\n    //    return;\n    //}\n\n    if(this.baseurl)\n    {\n        LoadBinaryResource(this.baseurl + this.GetFullPath(inode.fid),  \n            function(buffer){\n                var data = this.inodedata[idx] = new Uint8Array(buffer);\n                inode.size = data.length; // correct size if the previous was wrong. \n                inode.status = STATUS_OK;\n\n                this.filesinloadingqueue--;\n                this.HandleEvent(idx);            \n            }.bind(this), \n            function(error){throw error;});\n    }\n    else\n    {\n        // If baseurl is not set, we started with an empty filesystem. No files\n        // can be loaded\n    }\n}\n\n// -----------------------------------------------------\n\nFS.prototype.PushInode = function(inode) {\n    if (inode.parentid != -1) {\n        this.inodes.push(inode);\n        inode.fid = this.inodes.length - 1;\n        var parent_node = this.inodes[inode.parentid];\n        parent_node.updatedir = true;\n        inode.nextid = parent_node.firstid;\n        parent_node.firstid = this.inodes.length-1;\n        return;\n    } else {\n        if (this.inodes.length == 0) { // if root directory\n            this.inodes.push(inode);\n            return;\n        }\n    }\n\n    message.Debug(\"Error in Filesystem: Pushed inode with name = \"+ inode.name + \" has no parent\");\n    message.Abort();\n\n}\n\n/** @constructor */\nfunction Inode(qidnumber)\n{\n    this.updatedir = false; // did the directory listing changed?\n    this.parentid = -1;\n    this.firstid = -1; // first file id in directory\n    this.nextid = -1; // next id in directory\n    this.status = 0;\n    this.name = \"\";\n    this.size = 0x0;\n    this.uid = 0x0;\n    this.gid = 0x0;\n    this.fid = 0;\n    this.ctime = 0;\n    this.atime = 0;\n    this.mtime = 0;\n    this.major = 0x0;\n    this.minor = 0x0;\n    //data = new Uint8Array(0);\n    this.symlink = \"\";\n    this.nlinks = 1;\n    this.mode = 0x01ED;\n    this.qid = {\n        type: 0,\n        version: 0,\n        path: qidnumber,\n    };\n    this.caps = undefined;\n\n    //this.qid_type = 0;\n    //this.qid_version = 0;\n    //this.qid_path = qidnumber;\n}\n\nFS.prototype.CreateInode = function() {\n    //console.log(\"CreateInode\", Error().stack);\n    return new Inode(++this.qidnumber);\n};\n\n\nFS.prototype.CreateDirectory = function(name, parentid) {\n    var x = this.CreateInode();\n    x.name = name;\n    x.parentid = parentid;\n    x.mode = 0x01FF | S_IFDIR;\n    x.updatedir = true;\n    x.nlinks = 2; // . and ..\n    if (parentid >= 0) {\n        x.uid = this.inodes[parentid].uid;\n        x.gid = this.inodes[parentid].gid;\n        x.mode = (this.inodes[parentid].mode & 0x1FF) | S_IFDIR;\n        this.inodes[parentid].nlinks++;\n    }\n    x.qid.type = S_IFDIR >> 8;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newdir');\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateFile = function(filename, parentid) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFREG >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6) | S_IFREG;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newfile');\n    return this.inodes.length-1;\n}\n\n\nFS.prototype.CreateNode = function(filename, parentid, major, minor) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.major = major;\n    x.minor = minor;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFSOCK >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6);\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n     \nFS.prototype.CreateSymlink = function(filename, parentid, symlink) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFLNK >> 8;\n    x.symlink = symlink;\n    x.mode = S_IFLNK;\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateTextFile = function(filename, parentid, str) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(str.length);\n    x.size = str.length;\n    for (var j = 0; j < str.length; j++) {\n        data[j] = str.charCodeAt(j);\n    }\n    return id;\n}\n\n/** \n * @param {Uint8Array} buffer\n */\nFS.prototype.CreateBinaryFile = function(filename, parentid, buffer) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(buffer.length);\n    data.set(buffer);\n    x.size = buffer.length;\n    return id;\n}\n\n\nFS.prototype.OpenInode = function(id, mode) {\n    var inode = this.GetInode(id);\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n        this.FillDirectory(id);\n    }\n    /*\n    var type = \"\";\n    switch(inode.mode&S_IFMT) {\n        case S_IFREG: type = \"File\"; break;\n        case S_IFBLK: type = \"Block Device\"; break;\n        case S_IFDIR: type = \"Directory\"; break;\n        case S_IFCHR: type = \"Character Device\"; break;\n    }\n    */\n    //message.Debug(\"open:\" + this.GetFullPath(id) +  \" type: \" + inode.mode + \" status:\" + inode.status);\n    if (inode.status == STATUS_ON_SERVER) {\n        this.LoadFile(id);\n        return false;\n    }\n    return true;\n}\n\nFS.prototype.CloseInode = function(id) {\n    //message.Debug(\"close: \" + this.GetFullPath(id));\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_UNLINKED) {\n        //message.Debug(\"Filesystem: Delete unlinked file\");\n        inode.status = STATUS_INVALID;\n        delete this.inodedata[id];\n        inode.size = 0;\n    }\n}\n\nFS.prototype.Rename = function(olddirid, oldname, newdirid, newname) {\n    // message.Debug(\"Rename \" + oldname + \" to \" + newname);\n    if ((olddirid == newdirid) && (oldname == newname)) {\n        return true;\n    }\n    var oldid = this.Search(olddirid, oldname);\n    var oldpath = this.GetFullPath(oldid);\n    if (oldid == -1) {\n        return false;\n    }\n    var newid = this.Search(newdirid, newname);\n    if (newid != -1) {\n        this.Unlink(newid);\n    }\n\n    var idx = oldid; // idx contains the id which we want to rename\n    var inode = this.inodes[idx];\n\n    // remove inode ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n\n    inode.parentid = newdirid;\n    inode.name = newname;\n    inode.qid.version++;\n\n    inode.nextid = this.inodes[inode.parentid].firstid;\n    this.inodes[inode.parentid].firstid = idx;\n\n    this.inodes[olddirid].updatedir = true;\n    this.inodes[newdirid].updatedir = true;\n    this.inodes[olddirid].nlinks--;\n    this.inodes[newdirid].nlinks++;\n\n    this.NotifyListeners(idx, \"rename\", {oldpath: oldpath});\n    \n    return true;\n}\n\nFS.prototype.Write = function(id, offset, count, GetByte) {\n    this.NotifyListeners(id, 'write');\n    var inode = this.inodes[id];\n    var data = this.inodedata[id];\n\n    if (!data || data.length < (offset+count)) {\n        this.ChangeSize(id, Math.floor(((offset+count)*3)/2) );\n        inode.size = offset + count;\n        data = this.inodedata[id];\n    } else\n    if (inode.size < (offset+count)) {\n        inode.size = offset + count;\n    }\n    for(var i=0; i<count; i++)\n        data[offset+i] = GetByte();\n}\n\nFS.prototype.Search = function(parentid, name) {\n    var id = this.inodes[parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].parentid != parentid) { // consistency check\n            message.Debug(\"Error in Filesystem: Found inode with wrong parent id\");\n        }\n        if (this.inodes[id].name == name) return id;\n        id = this.inodes[id].nextid;\n    }\n    return -1;\n}\n\nFS.prototype.GetTotalSize = function() {\n    return this.used_size;\n    //var size = 0;\n    //for(var i=0; i<this.inodes.length; i++) {\n    //    var d = this.inodes[i].data;\n    //    size += d ? d.length : 0;\n    //}\n    //return size;\n}\n\nFS.prototype.GetSpace = function() {\n    return this.total_size;\n};\n\nFS.prototype.GetFullPath = function(idx) {\n    var path = \"\";\n\n    while(idx != 0) {\n        path = \"/\" + this.inodes[idx].name + path;\n        idx = this.inodes[idx].parentid;\n    }\n    return path.substring(1);\n}\n\n// no double linked list. So, we need this\nFS.prototype.FindPreviousID = function(idx) {\n    var inode = this.GetInode(idx);\n    var id = this.inodes[inode.parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].nextid == idx) return id;\n        id = this.inodes[id].nextid;\n    }\n    return id;\n}\n\nFS.prototype.Unlink = function(idx) {\n    this.NotifyListeners(idx, 'delete');\n    if (idx == 0) return false; // root node cannot be deleted\n    var inode = this.GetInode(idx);\n    //message.Debug(\"Unlink \" + inode.name);\n\n    // check if directory is not empty\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n       if (inode.firstid != -1) return false;\n    }\n\n    // update ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n    // don't delete the content. The file is still accessible\n    this.inodes[inode.parentid].updatedir = true;\n    this.inodes[inode.parentid].nlinks--;\n    inode.status = STATUS_UNLINKED;\n    inode.nextid = -1;\n    inode.firstid = -1;\n    inode.parentid = -1;\n    inode.nlinks--;\n    return true;\n}\n\nFS.prototype.GetInode = function(idx)\n{\n    if (isNaN(idx)) {\n        message.Debug(\"Error in filesystem: id is not a number \");\n        return 0;\n    }\n\n    if ((idx < 0) || (idx > this.inodes.length)) {\n        message.Debug(\"Error in filesystem: Attempt to get inode with id \" + idx);\n        return 0;\n    }\n    return this.inodes[idx];\n}\n\nFS.prototype.ChangeSize = function(idx, newsize)\n{\n    var inode = this.GetInode(idx);\n    var temp = this.inodedata[idx];\n    //message.Debug(\"change size to: \" + newsize);\n    if (newsize == inode.size) return;\n    var data = this.inodedata[idx] = new Uint8Array(newsize);\n    inode.size = newsize;\n    if(!temp) return;\n    var size = Math.min(temp.length, inode.size);\n    for(var i=0; i<size; i++) {\n        data[i] = temp[i];\n    }\n}\n\nFS.prototype.SearchPath = function(path) {\n    //path = path.replace(/\\/\\//g, \"/\");\n    path = path.replace(\"//\", \"/\");\n    var walk = path.split(\"/\");\n    var n = walk.length;\n    if (walk[n-1].length == 0) walk.pop();\n    if (walk[0].length == 0) walk.shift();\n    n = walk.length;\n\n    var parentid = 0;\n    var id = -1;\n    for(var i=0; i<n; i++) {\n        id = this.Search(parentid, walk[i]);        \n        if (id == -1) {\n            if (i < n-1) return {id: -1, parentid: -1, name: walk[i]}; // one name of the path cannot be found\n            return {id: -1, parentid: parentid, name: walk[i]}; // the last element in the path does not exist, but the parent\n        }\n        parentid = id;\n    }\n    return {id: id, parentid: parentid, name: walk[i]};\n}\n// -----------------------------------------------------\n\nFS.prototype.GetRecursiveList = function(dirid, list) {\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        list.push(id);\n        if ((this.inodes[id].mode&S_IFMT) == S_IFDIR) {\n            this.GetRecursiveList(id, list);\n        }\n        id = this.inodes[id].nextid;\n    }\n}\n\nFS.prototype.MergeFile = function(file) {\n    message.Debug(\"Merge path:\" + file.name);\n    var ids = this.SearchPath(file.name);\n    if (ids.parentid == -1) return; // not even the path seems to exist\n    if (ids.id == -1) {\n        ids.id = this.CreateFile(ids.name, ids.parentid); \n    }\n    this.inodes[ids.id].data = file.data;\n    this.inodes[ids.id].size = file.data.length;\n    // Don't forget to update the timestamps !\n    this.inodes[ids.id].mtime = Math.floor((new Date()).getTime()/1000);\n    this.inodes[ids.id].atime = this.inodes[ids.id].mtime;\n    this.inodes[ids.id].ctime = this.inodes[ids.id].mtime;\n}\n\n\nFS.prototype.RecursiveDelete = function(path) {\n    var toDelete = []\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    this.GetRecursiveList(ids.id, toDelete);\n\n    for(var i=toDelete.length-1; i>=0; i--)\n        this.Unlink(toDelete[i]);\n\n}\n\nFS.prototype.DeleteNode = function(path) {\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFREG){\n        this.Unlink(ids.id);\n        return;\n    }\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFDIR){\n        var toDelete = []\n        this.GetRecursiveList(ids.id, toDelete);\n        for(var i=toDelete.length-1; i>=0; i--)\n            this.Unlink(toDelete[i]);\n        this.Unlink(ids.id);\n        return;\n    }\n}\n\n/** @param {*=} info */\nFS.prototype.NotifyListeners = function(id, action, info) {\n    //if(info==undefined)\n    //    info = {};\n\n    //var path = this.GetFullPath(id);\n    //if (this.watchFiles[path] == true && action=='write') {\n    //  message.Send(\"WatchFileEvent\", path);\n    //}\n    //for (var directory in this.watchDirectories) {\n    //    if (this.watchDirectories.hasOwnProperty(directory)) {\n    //        var indexOf = path.indexOf(directory)\n    //        if(indexOf == 0 || indexOf == 1)\n    //            message.Send(\"WatchDirectoryEvent\", {path: path, event: action, info: info});         \n    //    }\n    //}\n}\n\n\nFS.prototype.Check = function() {\n    for(var i=1; i<this.inodes.length; i++)\n    {\n        if (this.inodes[i].status == STATUS_INVALID) continue;\n        if (this.inodes[i].nextid == i) {\n            message.Debug(\"Error in filesystem: file points to itself\");\n            message.Abort();\n        }\n\n        var inode = this.GetInode(i);\n        if (inode.parentid < 0) {\n            message.Debug(\"Error in filesystem: negative parent id \" + i);\n        }\n        var n = inode.name.length;\n        if (n == 0) {\n            message.Debug(\"Error in filesystem: inode with no name and id \" + i);\n        }\n\n        for (var j in inode.name) {\n            var c = inode.name.charCodeAt(j);\n            if (c < 32) {\n                message.Debug(\"Error in filesystem: Unallowed char in filename\");\n            } \n        }\n    }\n}\n\nFS.prototype.FillDirectory = function(dirid) {\n    var inode = this.GetInode(dirid);\n    if (!inode.updatedir) return;\n    var parentid = inode.parentid;\n    if (parentid == -1) parentid = 0; // if root directory point to the root directory\n\n    // first get size\n    var size = 0;\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        size += 13 + 8 + 1 + 2 + UTF8.UTF8Length(this.inodes[id].name);\n        id = this.inodes[id].nextid;\n    }\n\n    size += 13 + 8 + 1 + 2 + 1; // \".\" entry\n    size += 13 + 8 + 1 + 2 + 2; // \"..\" entry\n    //message.Debug(\"size of dir entry: \" + size);\n    var data = this.inodedata[dirid] = new Uint8Array(size);\n    inode.size = size;\n\n    var offset = 0x0;\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[dirid].qid, \n        offset+13+8+1+2+1, \n        this.inodes[dirid].mode >> 12, \n        \".\"],\n        data, offset);\n\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[parentid].qid,\n        offset+13+8+1+2+2, \n        this.inodes[parentid].mode >> 12, \n        \"..\"],\n        data, offset);\n\n    id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [\n            this.inodes[id].qid,\n            offset+13+8+1+2+UTF8.UTF8Length(this.inodes[id].name),\n            this.inodes[id].mode >> 12,\n            this.inodes[id].name\n        ],\n        data, offset);\n        id = this.inodes[id].nextid;\n    }\n    inode.updatedir = false;\n}\n\n\n// -----------------------------------------------------\n\n// only support for security.capabilities\n// should return a  \"struct vfs_cap_data\" defined in\n// linux/capability for format\n// check also:\n//   sys/capability.h\n//   http://lxr.free-electrons.com/source/security/commoncap.c#L376\n//   http://man7.org/linux/man-pages/man7/capabilities.7.html\n//   http://man7.org/linux/man-pages/man8/getcap.8.html\n//   http://man7.org/linux/man-pages/man3/libcap.3.html\nFS.prototype.PrepareCAPs = function(id) {\n    var inode = this.GetInode(id);\n    if (inode.caps) return inode.caps.length;\n    inode.caps = new Uint8Array(12);\n    // format is little endian\n    // magic_etc (revision=0x01: 12 bytes)\n    inode.caps[0]  = 0x00;\n    inode.caps[1]  = 0x00;\n    inode.caps[2]  = 0x00;\n    inode.caps[3]  = 0x01;\n    // permitted (full capabilities)\n    inode.caps[4]  = 0xFF;\n    inode.caps[5]  = 0xFF;\n    inode.caps[6]  = 0xFF;\n    inode.caps[7]  = 0xFF;\n    // inheritable (full capabilities\n    inode.caps[8]  = 0xFF;\n    inode.caps[9]  = 0xFF;\n    inode.caps[10] = 0xFF;\n    inode.caps[11] = 0xFF;\n\n    return inode.caps.length;\n}\n\n","\"use strict\";\n\n// jor1k compatibility\n\nvar VIRTIO_MAGIC_REG = 0x0;\nvar VIRTIO_VERSION_REG = 0x4;\nvar VIRTIO_DEVICE_REG = 0x8;\nvar VIRTIO_VENDOR_REG = 0xc;\nvar VIRTIO_HOSTFEATURES_REG = 0x10;\nvar VIRTIO_HOSTFEATURESSEL_REG = 0x14;\nvar VIRTIO_GUESTFEATURES_REG = 0x20;\nvar VIRTIO_GUESTFEATURESSEL_REG = 0x24;\nvar VIRTIO_GUEST_PAGE_SIZE_REG = 0x28;\nvar VIRTIO_QUEUESEL_REG = 0x30;\nvar VIRTIO_QUEUENUMMAX_REG = 0x34;\nvar VIRTIO_QUEUENUM_REG = 0x38;\nvar VIRTIO_QUEUEALIGN_REG = 0x3C;\nvar VIRTIO_QUEUEPFN_REG = 0x40;\nvar VIRTIO_QUEUENOTIFY_REG = 0x50;\nvar VIRTIO_INTERRUPTSTATUS_REG = 0x60;\nvar VIRTIO_INTERRUPTACK_REG = 0x64;\nvar VIRTIO_STATUS_REG = 0x70;\n\n/** @const */\nvar VRING_DESC_F_NEXT =      1; /* This marks a buffer as continuing via the next field. */\n/** @const */\nvar VRING_DESC_F_WRITE =     2; /* This marks a buffer as write-only (otherwise read-only). */\n/** @const */\nvar VRING_DESC_F_INDIRECT =  4; /* This means the buffer contains a list of buffer descriptors. */\n\n\nfunction hex8(n)\n{\n    return h(n);\n}\n\nvar message = {};\n\n/** @param {...string} log */\nmessage.Debug = function(log)\n{\n    dbg_log([].slice.apply(arguments).join(\" \"), LOG_9P);\n}\n\nmessage.Abort = function()\n{ \n    if(DEBUG)\n    {\n        throw \"abort\"; \n    }\n}\n\n\n// XXX: Should go through emulator interface\nvar LoadBinaryResource;\n\nif(typeof XMLHttpRequest !== \"undefined\")\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError) {\n        var req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        req.responseType = \"arraybuffer\";\n        req.onreadystatechange = function () {\n            if (req.readyState != 4) {\n                return;\n            }\n            if ((req.status != 200) && (req.status != 0)) {\n                OnError(\"Error: Could not load file \" + url);\n                return;\n            }\n            var arrayBuffer = req.response;\n            if (arrayBuffer) {\n                OnSuccess(arrayBuffer);\n            } else {\n                OnError(\"Error: No data received from: \" + url);\n            }\n        };\n        /*\n            req.onload = function(e)\n            {\n                    var arrayBuffer = req.response;\n                    if (arrayBuffer) {\n                        OnLoadFunction(arrayBuffer);\n                    }\n            };\n        */\n        req.send(null);\n    }\n}\nelse\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError)\n    {\n        //console.log(url);\n        require(\"fs\")[\"readFile\"](url, function(err, data)\n        {\n            if(err)\n            {\n                OnError(err);\n            }\n            else\n            {\n                OnSuccess(new Uint8Array(data).buffer);\n            }\n        });\n    }\n}\n","// -------------------------------------------------\n// ------------------ Marshall ---------------------\n// -------------------------------------------------\n// helper functions for virtio and 9p.\n\nvar marshall = {};\n\n\n// Inserts data from an array to a byte aligned struct in memory\nmarshall.Marshall = function(typelist, input, struct, offset) {\n    var item;\n    var size = 0;\n    for (var i=0; i < typelist.length; i++) {\n        item = input[i];\n        switch (typelist[i]) {\n            case \"w\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                size += 4;\n                break;\n            case \"d\": // double word\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                size += 8;\n                break;\n            case \"h\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = item >> 8;\n                size += 2;\n                break;\n            case \"b\":\n                struct[offset++] = item;\n                size += 1;\n                break;\n            case \"s\":\n                var lengthoffset = offset;\n                var length = 0;\n                struct[offset++] = 0; // set the length later\n                struct[offset++] = 0;\n                size += 2;\n                for (var j in item) {\n                    var utf8 = UnicodeToUTF8Stream(item.charCodeAt(j));\n                    utf8.forEach( function(c) {\n                        struct[offset++] = c;\n                        size += 1;\n                        length++;\n                    });\n                }\n                struct[lengthoffset+0] = length & 0xFF;\n                struct[lengthoffset+1] = (length >> 8) & 0xFF;\n                break;\n            case \"Q\":\n                marshall.Marshall([\"b\", \"w\", \"d\"], [item.type, item.version, item.path], struct, offset)\n                offset += 13;\n                size += 13;\n                break;\n            default:\n                message.Debug(\"Marshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return size;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall = function(typelist, struct, offset) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                offset += 4;\n                output.push(val);\n                break;\n            case \"h\":\n                var val = struct[offset++];\n                output.push(val + (struct[offset++] << 8));\n                break;\n            case \"b\":\n                output.push(struct[offset++]);\n                break;\n            case \"s\":\n                var len = struct[offset++];\n                len += struct[offset++] << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(struct[offset++])\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall2 = function(typelist, GetByte) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                GetByte();GetByte();GetByte();GetByte();\n                output.push(val);\n                break;\n            case \"h\":\n                var val = GetByte();\n                output.push(val + (GetByte() << 8));\n                break;\n            case \"b\":\n                output.push(GetByte());\n                break;\n            case \"s\":\n                var len = GetByte();\n                len += GetByte() << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(GetByte())\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall2: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n","// -------------------------------------------------\n// ------------------ UTF8 Helpers -----------------\n// -------------------------------------------------\n\n\"use strict\";\n\nvar UTF8 = {}\n\n/** @constructor */\nfunction UTF8StreamToUnicode() {\n\n    this.stream = new Uint8Array(5);\n    this.ofs = 0;\n\n    this.Put = function(key) {\n        this.stream[this.ofs] = key;\n        this.ofs++;\n        switch(this.ofs) {\n            case 1:\n                if (this.stream[0] < 128) {\n                    this.ofs = 0;\n                    return this.stream[0];\n                }\n                break;\n\n            case 2:\n                if ((this.stream[0]&0xE0) == 0xC0)\n                if ((this.stream[1]&0xC0) == 0x80) {\n                    this.ofs = 0;\n                    return ((this.stream[0]&0x1F)<<6) | (this.stream[1]&0x3F);\n                }\n                break;\n\n            case 3:\n                break;\n\n            case 4:\n                break;\n\n            default:\n                return -1;\n                //this.ofs = 0;\n                //break;\n        }\n        return -1;\n    }\n}\n\nfunction UnicodeToUTF8Stream(key)\n{\n        if (key < 0x80)  return [key];\n        if (key < 0x800) return [0xC0|((key>>6)&0x1F), 0x80|(key&0x3F)];\n}\n\nUTF8.UTF8Length = function(s)\n{\n    var length = 0;\n    for(var i=0; i<s.length; i++) {\n        var c = s.charCodeAt(i);\n        length += c<128?1:2;\n    }\n    return length;\n}\n"],
"names":["COMPILED","goog","global","isDef","goog.isDef","val","exportPath_","goog.exportPath_","name","opt_object","opt_objectToExportTo","parts","split","cur","execScript","part","length","shift","define","goog.define","defaultValue","CLOSURE_UNCOMPILED_DEFINES","Object","prototype","hasOwnProperty","call","value","CLOSURE_DEFINES","DEBUG","provide","goog.provide","isProvided_","Error","constructNamespace_","goog.constructNamespace_","opt_obj","implicitNamespaces_","namespace","substring","lastIndexOf","getObjectByName","VALID_MODULE_RE_","module","goog.module","isString","search","isInModuleLoader_","moduleLoaderState_","moduleName","get","goog.module.get","getInternal_","goog.module.getInternal_","loadedModules_","goog.isInModuleLoader_","declareTestMethods","goog.module.declareTestMethods","declareLegacyNamespace","goog.module.declareLegacyNamespace","setTestOnly","goog.setTestOnly","opt_message","DISALLOW_TEST_ONLY_CODE","forwardDeclare","goog.forwardDeclare","goog.isProvided_","isDefAndNotNull","goog.getObjectByName","globalize","goog.globalize","obj","opt_global","x","addDependency","goog.addDependency","relPath","provides","requires","opt_isModule","DEPENDENCIES_ENABLED","path","replace","deps","dependencies_","i","nameToPath","pathIsModule","j","require","logToConsole_","goog.logToConsole_","msg","console","goog.require","ENABLE_DEBUG_LOADER","IS_OLD_IE_","maybeProcessDeferredDep_","getPathFromDeps_","included_","writeScripts_","errorMessage","basePath","nullFunction","goog.nullFunction","abstractMethod","goog.abstractMethod","addSingletonGetter","goog.addSingletonGetter","ctor","getInstance","ctor.getInstance","instance_","instantiatedSingletons_","visited","written","deferred","inHtmlDocument_","goog.inHtmlDocument_","doc","document","findBasePath_","goog.findBasePath_","CLOSURE_BASE_PATH","scripts","getElementsByTagName","src","script","qmark","l","substr","importScript_","goog.importScript_","opt_sourceText","CLOSURE_IMPORT_SCRIPT","writeScriptTag_","atob","all","importModule_","goog.importModule_","queuedModules_","wrapModule_","goog.wrapModule_","srcUrl","scriptText","LOAD_MODULE_USING_EVAL","JSON","stringify","loadQueuedModules_","goog.loadQueuedModules_","count","queue","maybeProcessDeferredPath_","goog.maybeProcessDeferredDep_","isDeferredModule_","allDepsAreAvailable_","goog.isDeferredModule_","goog.allDepsAreAvailable_","requireName","goog.maybeProcessDeferredPath_","abspath","globalEval","loadModule","goog.loadModule","moduleDef","previousState","undefined","isFunction","exports","loadModuleFromSource_","SEAL_MODULE_EXPORTS","seal","entry","indexOf","goog.loadModuleFromSource_","source","eval","writeScriptSrcNode_","goog.writeScriptSrcNode_","write","appendScriptSrcNode_","goog.appendScriptSrcNode_","scriptEl","createElement","type","defer","async","head","appendChild","goog.writeScriptTag_","ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING","readyState","test","isDeps","isOldIE","state","lastNonModuleScriptIndex_","onScriptLoad_","goog.onScriptLoad_","scriptIndex","goog.writeScripts_","visitNode","seenScript","push","moduleState","goog.getPathFromDeps_","rule","CLOSURE_NO_DEPS","normalizePath_","goog.normalizePath_","components","splice","join","loadFileSync_","goog.loadFileSync_","CLOSURE_LOAD_FILE_SYNC","xhr","open","send","responseText","retrieveAndExecModule_","goog.retrieveAndExecModule_","originalPath","importScript","execModuleScript","typeOf","goog.typeOf","s","Array","className","toString","propertyIsEnumerable","isNull","goog.isNull","goog.isDefAndNotNull","isArray","goog.isArray","isArrayLike","goog.isArrayLike","isDateLike","goog.isDateLike","isObject","getFullYear","goog.isString","isBoolean","goog.isBoolean","isNumber","goog.isNumber","goog.isFunction","goog.isObject","getUid","goog.getUid","UID_PROPERTY_","uidCounter_","hasUid","goog.hasUid","removeUid","goog.removeUid","removeAttribute","ex","Math","random","getHashCode","removeHashCode","cloneObject","goog.cloneObject","clone","key","bindNative_","goog.bindNative_","fn","selfObj","var_args","apply","bind","arguments","bindJs_","goog.bindJs_","boundArgs","slice","newArgs","unshift","goog.bind","Function","partial","goog.partial","args","mixin","goog.mixin","target","now","TRUSTED_SITE","Date","goog.globalEval","evalWorksForGlobals_","scriptElt","createTextNode","body","removeChild","getCssName","goog.getCssName","opt_modifier","getMapping","cssName","cssNameMapping_","renameByParts","mapped","rename","cssNameMappingStyle_","a","setCssNameMapping","goog.setCssNameMapping","mapping","opt_style","CLOSURE_CSS_NAME_MAPPING","getMsg","goog.getMsg","str","opt_values","match","getMsgWithFallback","goog.getMsgWithFallback","b","exportSymbol","goog.exportSymbol","publicPath","object","exportProperty","goog.exportProperty","publicName","symbol","inherits","goog.inherits","childCtor","parentCtor","tempCtor","superClass_","constructor","base","childCtor.base","me","methodName","goog.base","opt_methodName","caller","callee","STRICT_MODE_COMPATIBLE","ctorArgs","foundCaller","scope","goog.scope","defineClass","goog.defineClass","superClass","def","statics","cls","createSealingConstructor_","applyProperties_","goog.defineClass.createSealingConstructor_","ctr","SEAL_CLASS_INSTANCES","UNSEALABLE_CONSTRUCTOR_PROPERTY_","wrappedCtr","instance","OBJECT_PROTOTYPE_FIELDS_","goog.defineClass.applyProperties_","tagUnsealableClass","goog.tagUnsealableClass","LOG_ALL","LOG_NONE","LOG_OTHER","LOG_CPU","LOG_FPU","LOG_MEM","LOG_DMA","LOG_IO","LOG_PS2","LOG_PIC","LOG_VGA","LOG_PIT","LOG_MOUSE","LOG_PCI","LOG_BIOS","LOG_FLOPPY","LOG_SERIAL","LOG_DISK","LOG_RTC","LOG_HPET","LOG_ACPI","LOG_APIC","LOG_NET","LOG_VIRTIO","LOG_9P","LOG_SB16","LOG_NAMES","TLB_SYSTEM_READ","TLB_SYSTEM_WRITE","TLB_USER_READ","TLB_USER_WRITE","flag_carry","flag_parity","flag_adjust","flag_zero","flag_sign","flag_trap","flag_interrupt","flag_direction","flag_overflow","flag_iopl","flag_nt","flag_rf","flag_vm","flag_ac","flag_vif","flag_vip","flag_id","flags_default","flags_mask","flags_all","OPSIZE_8","OPSIZE_16","OPSIZE_32","PSE_ENABLED","reg_eax","reg_ecx","reg_edx","reg_ebx","reg_esp","reg_ebp","reg_esi","reg_edi","reg_ax","reg_cx","reg_dx","reg_bx","reg_sp","reg_bp","reg_si","reg_di","reg_al","reg_cl","reg_dl","reg_bl","reg_ah","reg_ch","reg_dh","reg_bh","reg_es","reg_cs","reg_ss","reg_ds","reg_fs","reg_gs","reg_tr","reg_ldtr","MMAP_BLOCK_BITS","MMAP_BLOCK_SIZE","MEM_PAGE_WRITTEN","MAGIC_CPU_EXCEPTION","REPEAT_STRING_PREFIX_NONE","REPEAT_STRING_PREFIX_NZ","REPEAT_STRING_PREFIX_Z","CR0_PE","CR0_MP","CR0_EM","CR0_TS","CR0_ET","CR0_WP","CR0_NW","CR0_CD","CR0_PG","CR4_VME","CR4_PVI","CR4_TSD","CR4_PSE","CR4_DE","CR4_PAE","CR4_PGE","CR4_OSFXSR","CR4_OSXMMEXCPT","SEG_PREFIX_NONE","SEG_PREFIX_ZERO","IA32_SYSENTER_CS","IA32_SYSENTER_ESP","IA32_SYSENTER_EIP","IA32_TIME_STAMP_COUNTER","IA32_PLATFORM_ID","MSR_EBC_FREQUENCY_ID","IA32_APIC_BASE_MSR","IA32_BIOS_SIGN_ID","IA32_MISC_ENABLE","IA32_RTIT_CTL","MSR_SMI_COUNT","IA32_MCG_CAP","IA32_KERNEL_GS_BASE","MSR_PKG_C2_RESIDENCY","IA32_APIC_BASE_BSP","IA32_APIC_BASE_EXTD","IA32_APIC_BASE_EN","TSR_BACKLINK","TSR_CR3","TSR_EIP","TSR_EFLAGS","TSR_EAX","TSR_ECX","TSR_EDX","TSR_EBX","TSR_ESP","TSR_EBP","TSR_ESI","TSR_EDI","TSR_ES","TSR_CS","TSR_SS","TSR_DS","TSR_FS","TSR_GS","TSR_LDT","FW_CFG_SIGNATURE","FW_CFG_RAM_SIZE","FW_CFG_NB_CPUS","PREFIX_MASK_REP","PREFIX_REPZ","PREFIX_REPNZ","PREFIX_MASK_SEGMENT","PREFIX_MASK_OPSIZE","PREFIX_MASK_ADDRSIZE","PREFIX_F2","PREFIX_F3","PREFIX_66","MXCSR_MASK","MIXER_CHANNEL_LEFT","MIXER_CHANNEL_RIGHT","MIXER_CHANNEL_BOTH","MIXER_SRC_MASTER","MIXER_SRC_PCSPEAKER","MIXER_SRC_DAC","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","ScreenAdapter","screen_container","bus","number_as_color","n","elem_set_scale","elem","scale_x","scale_y","use_scale","style","width","height","transform","webkitTransform","MozTransform","rectangle","getBoundingClientRect","scale_str","graphic_screen","imageRendering","device_pixel_ratio","devicePixelRatio","assert","graphic_context","getContext","text_screen","cursor_element","graphic_image_data","graphic_buffer32","cursor_row","cursor_col","changed_rows","is_graphical","text_mode_data","text_mode_width","text_mode_height","stopped","screen","charmap_high","Uint16Array","charmap_low","charmap","chr","String","fromCharCode","position","backgroundColor","display","register","data","set_mode","update_buffer","put_char","update_cursor","update_cursor_scanline","clear_screen","set_size_text","set_size_graphical","init","this.init","timer","make_screenshot","this.make_screenshot","toDataURL","e","this.put_char","row","col","bg_color","fg_color","p","this.timer","update_graphical","update_text","text_update_row","destroy","this.destroy","this.set_mode","graphical","this.clear_screen","fillStyle","fillRect","this.set_size_text","cols","rows","Int8Array","Int32Array","childNodes","firstChild","this.set_size_graphical","buffer_width","buffer_height","DEBUG_SCREEN_LAYERS","createImageData","Uint8Array","buffer","set_scale","this.set_scale","s_x","s_y","this.update_cursor_scanline","start","end","min","marginTop","this.update_cursor","this.text_update_row","offset","text","row_element","fragment","color_element","color","ascii","textContent","parentNode","replaceChild","this.update_buffer","layers","putImageData","strokeStyle","lineWidth","forEach","layer","strokeRect","buffer_x","buffer_y","screen_x","screen_y","EPERM","ENOENT","EINVAL","ENOTSUPP","ENOTEMPTY","EPROTO","P9_SETATTR_MODE","P9_SETATTR_UID","P9_SETATTR_GID","P9_SETATTR_SIZE","P9_SETATTR_ATIME","P9_SETATTR_MTIME","P9_SETATTR_CTIME","P9_SETATTR_ATIME_SET","P9_SETATTR_MTIME_SET","P9_STAT_MODE_DIR","P9_STAT_MODE_APPEND","P9_STAT_MODE_EXCL","P9_STAT_MODE_MOUNT","P9_STAT_MODE_AUTH","P9_STAT_MODE_TMP","P9_STAT_MODE_SYMLINK","P9_STAT_MODE_LINK","P9_STAT_MODE_DEVICE","P9_STAT_MODE_NAMED_PIPE","P9_STAT_MODE_SOCKET","P9_STAT_MODE_SETUID","P9_STAT_MODE_SETGID","P9_STAT_MODE_SETVTX","FID_NONE","FID_INODE","FID_XATTR","Virtio9p","filesystem","fs","SendReply","this.SendReply","y","deviceid","hostfeature","configspace","VERSION","msize","BLOCKSIZE","replybuffer","replybuffersize","fids","get_state","Virtio9p.prototype.get_state","map","f","inodeid","uid","set_state","Virtio9p.prototype.set_state","Createfid","Virtio9p.prototype.Createfid","inode","Reset","Virtio9p.prototype.Reset","BuildReply","Virtio9p.prototype.BuildReply","id","tag","payloadsize","marshall","Marshall","message","Debug","SendError","Virtio9p.prototype.SendError","errormsg","errorcode","size","ReceiveRequest","Virtio9p.prototype.ReceiveRequest","index","GetByte","header","Unmarshall2","GetTotalSize","space","GetSpace","req","floor","inodes","fid","mode","idx","GetInode","ret","OpenInode","AddEvent","qid","dfid","CreateInode","inodetarget","targetdata","inodedata","symlink","parentid","PushInode","symgt","gid","CreateSymlink","major","minor","CreateNode","CreateDirectory","S_IFDIR","flags","CreateFile","status","STATUS_UNLINKED","nlinks","atime","mtime","ctime","getTime","ChangeSize","caps","file","Write","olddirfid","oldname","newdirfid","newname","Rename","dirfd","Search","Unlink","version","hex8","nwfid","nwname","wnames","walk","nwidx","CloseInode","attr_size","newfid","PrepareCAPs","Abort","LOG_TO_FILE","LOG_ALL_IO","LOG_PAGE_FAULTS","LOG_LEVEL","ENABLE_HPET","ENABLE_ACPI","LOOP_COUNTER","TIME_PER_FRAME","TSC_RATE","APIC_TIMER_FREQ","VMWARE_HYPERVISOR_PORT","IO","cpu","ports","create_empty_entry","memory_size","memory_map_read8","memory_map_write8","memory_map_read32","memory_map_write32","mmap_register","addr","dbg_log","h","IO.prototype.create_empty_entry","read8","empty_port_read8","read16","empty_port_read16","read32","empty_port_read32","write8","empty_port_write","write16","write32","device","IO.prototype.empty_port_read8","IO.prototype.empty_port_read16","IO.prototype.empty_port_read32","IO.prototype.empty_port_write","register_read","IO.prototype.register_read","port_addr","r8","r16","r32","dbg_assert","fail","register_write","IO.prototype.register_write","w8","w16","w32","register_read_consecutive","IO.prototype.register_read_consecutive","r8_1","r8_2","r8_3","r8_4","r16_1","r16_2","register_write_consecutive","IO.prototype.register_write_consecutive","w8_1","w8_2","w8_3","w8_4","w16_1","w16_2","in_mmap_range","IO.prototype.in_mmap_range","in_mapped_range","mmap_read32_shim","IO.prototype.mmap_read32_shim","mmap_write32_shim","IO.prototype.mmap_write32_shim","IO.prototype.mmap_register","read_func8","write_func8","read_func32","write_func32","aligned_addr","port_write8","IO.prototype.port_write8","get_port_description","port_write16","IO.prototype.port_write16","port_write32","IO.prototype.port_write32","port_read8","IO.prototype.port_read8","port_read16","IO.prototype.port_read16","port_read32","IO.prototype.port_read32","debug_port_list","IO.prototype.get_port_description","v86","running","CPU","run","stop","restart","register_tick","v86.prototype.run","fast_next_tick","do_tick","v86.prototype.do_tick","dt","main_run","next_tick","v86.prototype.stop","v86.prototype.destroy","unregister_tick","v86.prototype.restart","reset","load_bios","v86.prototype.init","settings","setImmediate","postMessage","MAGIC_POST_MESSAGE","tick","addEventListener","removeEventListener","setTimeout","hidden","t","save_state","v86.prototype.save_state","restore_state","v86.prototype.restore_state","microtick","performance","v86.microtick","v86util","pads","v86util.pads","len","pad0","v86util.pad0","toUpperCase","crypto","getRandomValues","rand_data","has_rand_int","v86util.has_rand_int","get_rand_int","v86util.get_rand_int","SyncBuffer","byteLength","onprogress","onload","load","SyncBuffer.prototype.load","SyncBuffer.prototype.get","set","SyncBuffer.prototype.set","get_buffer","SyncBuffer.prototype.get_buffer","clz32","int_log2_byte","v86util.int_log2_byte","int_log2","v86util.int_log2","int_log2_table","tt","mul_low","imul_low","imul","imul_high","v86util.imul_high","mul_high","v86util.mul_high","ByteQueue","this.push","item","this.shift","peek","this.peek","clear","this.clear","FloatQueue","Float32Array","FloatQueue.prototype.push","FloatQueue.prototype.shift","shift_block","FloatQueue.prototype.shift_block","slice_end","subarray","FloatQueue.prototype.peek","FloatQueue.prototype.clear","CircularQueue","add","CircularQueue.prototype.add","toArray","CircularQueue.prototype.toArray","concat","CircularQueue.prototype.clear","CircularQueue.prototype.set","new_data","dump_file","ab","blob","Blob","download","file_or_blob","href","URL","createObjectURL","dataset","createEvent","ev","initMouseEvent","dispatchEvent","click","revokeObjectURL","FPU_LOG_OP","FPU_C0","FPU_C1","FPU_C2","FPU_C3","FPU_RESULT_FLAGS","FPU_STACK_TOP","FPU_PC","FPU_RC","FPU_IF","FPU_EX_SF","FPU_EX_P","FPU_EX_U","FPU_EX_O","FPU_EX_Z","FPU_EX_D","FPU_EX_I","TWO_POW_63","FPU","st","Float64Array","float32","float32_byte","float32_int","float64","float64_byte","float64_int","st8","st32","stack_empty","stack_ptr","control_word","fpu_dp_selector","fpu_dp","fpu_opcode","fpu_ip_selector","fpu_ip","status_word","indefinite_nan","NaN","constants","log","LN2","LOG2E","PI","LN10","FPU.prototype.get_state","FPU.prototype.set_state","fpu_unimpl","FPU.prototype.fpu_unimpl","dbg_trace","trigger_ud","stack_fault","FPU.prototype.stack_fault","invalid_arithmatic","FPU.prototype.invalid_arithmatic","fcom","FPU.prototype.fcom","get_st0","fucom","FPU.prototype.fucom","fcomi","FPU.prototype.fcomi","flags_changed","fucomi","FPU.prototype.fucomi","ftst","FPU.prototype.ftst","isNaN","fxam","FPU.prototype.fxam","sign","Infinity","finit","FPU.prototype.finit","load_status_word","FPU.prototype.load_status_word","set_status_word","FPU.prototype.set_status_word","sw","load_tag_word","FPU.prototype.load_tag_word","tag_word","isFinite","set_tag_word","FPU.prototype.set_tag_word","fstenv","FPU.prototype.fstenv","is_osize_32","writable_or_pagefault","safe_write16","safe_write32","fldenv","FPU.prototype.fldenv","safe_read16","safe_read32s","fsave","FPU.prototype.fsave","store_m80","frstor","FPU.prototype.frstor","load_m80","fxtract","FPU.prototype.fxtract","exponent","integer_round","FPU.prototype.integer_round","truncate","FPU.prototype.truncate","ceil","FPU.prototype.push","pop","FPU.prototype.pop","get_sti","FPU.prototype.get_sti","FPU.prototype.get_st0","FPU.prototype.load_m80","low","high","mantissa","pow","FPU.prototype.store_m80","load_m64","FPU.prototype.load_m64","store_m64","FPU.prototype.store_m64","load_m32","FPU.prototype.load_m32","store_m32","FPU.prototype.store_m32","FPU.prototype.sign","dbg_log_fpu_op","FPU.prototype.dbg_log_fpu_op","op","imm8","instruction_pointer","fwait","FPU.prototype.fwait","op_D8_reg","FPU.prototype.op_D8_reg","mod","sti","st0","op_D8_mem","FPU.prototype.op_D8_mem","m32","op_D9_reg","FPU.prototype.op_D9_reg","abs","tan","atan2","st1","fprem_quotient","trunc","sqrt","sin","cos","op_D9_mem","FPU.prototype.op_D9_mem","word","op_DA_reg","FPU.prototype.op_DA_reg","test_b","test_z","test_be","test_p","op_DA_mem","FPU.prototype.op_DA_mem","op_DB_reg","FPU.prototype.op_DB_reg","op_DB_mem","FPU.prototype.op_DB_mem","int32","op_DC_reg","FPU.prototype.op_DC_reg","low_ptr","op_DC_mem","FPU.prototype.op_DC_mem","m64","op_DD_reg","FPU.prototype.op_DD_reg","op_DD_mem","FPU.prototype.op_DD_mem","op_DE_reg","FPU.prototype.op_DE_reg","op_DE_mem","FPU.prototype.op_DE_mem","m16","op_DF_reg","FPU.prototype.op_DF_reg","reg16","op_DF_mem","FPU.prototype.op_DF_mem","st0_low","st0_high","hex_dump","result","line","byt","CDROM_SECTOR_SIZE","HD_SECTOR_SIZE","IDEDevice","master_buffer","slave_buffer","is_cd","nr","master","IDEInterface","slave","current_interface","ata_port","irq","pci_id","ata_port_high","master_port","pci_space","pci_bars","device_control","io","device_lower_irq","read_status","write_control","read_data","error","bytecount","sector","cylinder_low","cylinder_high","drive_head","write_data_port8","write_data_port16","write_data_port32","lba_count","is_lba","dma_command","dma_status","prdt_addr","ata_command","dma_read_addr","dma_set_addr","dma_read_command8","dma_read_command","dma_write_command8","dma_write_command","dma_read_status","dma_write_status","devices","pci","register_device","IDEDevice.prototype.read_status","IDEDevice.prototype.write_control","device_reset","IDEDevice.prototype.dma_read_addr","IDEDevice.prototype.dma_set_addr","IDEDevice.prototype.dma_read_status","IDEDevice.prototype.dma_write_status","IDEDevice.prototype.dma_read_command","IDEDevice.prototype.dma_read_command8","IDEDevice.prototype.dma_write_command","IDEDevice.prototype.dma_write_command8","old_command","current_command","do_ata_read_sectors_dma","do_ata_write_sectors_dma","do_atapi_dma","push_irq","IDEDevice.prototype.push_irq","device_raise_irq","IDEDevice.prototype.get_state","IDEDevice.prototype.set_state","device_nr","interface_nr","sector_size","is_atapi","cylinder_count","sectors_per_track","head_count","sector_count","rtc","cmos_write","CMOS_BIOS_DISKTRANSFLAG","cmos_read","CMOS_DISK_DATA","reg","CMOS_DISK_DRIVE1_CYL","stats","sectors_read","sectors_written","bytes_read","bytes_written","loading","sectors_per_drq","data_pointer","data16","data32","data_end","data_length","current_atapi_command","write_dest","IDEInterface.prototype.device_reset","IDEInterface.prototype.push_irq","IDEInterface.prototype.ata_command","cmd","last_sector","ata_read_sectors","ata_write_sectors","data_allocate","create_identify_packet","ata_read_sectors_dma","ata_write_sectors_dma","atapi_handle","IDEInterface.prototype.atapi_handle","data_set","atapi_read_dma","atapi_read","format","page_code","do_write","IDEInterface.prototype.do_write","ata_advance","report_write","IDEInterface.prototype.atapi_read","lba","byte_count","req_length","report_read_start","report_read_end","IDEInterface.prototype.atapi_read_dma","IDEInterface.prototype.do_atapi_dma","prdt_start","read32s","write_blob","IDEInterface.prototype.read_data","align","read_end","IDEInterface.prototype.read_end","write_data_port","IDEInterface.prototype.write_data_port","write_end","IDEInterface.prototype.write_data_port8","IDEInterface.prototype.write_data_port16","IDEInterface.prototype.write_data_port32","IDEInterface.prototype.write_end","IDEInterface.prototype.ata_advance","sectors","new_sector","get_lba48","get_lba28","get_chs","c","IDEInterface.prototype.ata_read_sectors","is_lba48","get_count","get_lba","is_single","IDEInterface.prototype.ata_read_sectors_dma","IDEInterface.prototype.do_ata_read_sectors_dma","orig_prdt_start","prd_addr","prd_count","IDEInterface.prototype.ata_write_sectors","data_allocate_noclear","IDEInterface.prototype.ata_write_sectors_dma","IDEInterface.prototype.do_ata_write_sectors_dma","prdt_count","prdt_write_count","mem8","IDEInterface.prototype.get_chs","IDEInterface.prototype.get_lba28","IDEInterface.prototype.get_lba48","IDEInterface.prototype.get_lba","IDEInterface.prototype.get_count","IDEInterface.prototype.create_identify_packet","IDEInterface.prototype.data_allocate","IDEInterface.prototype.data_allocate_noclear","IDEInterface.prototype.data_set","IDEInterface.prototype.report_read_start","IDEInterface.prototype.report_read_end","IDEInterface.prototype.report_write","IDEInterface.prototype.get_state","IDEInterface.prototype.set_state","PCI_CONFIG_ADDRESS","PCI_CONFIG_DATA","PCI","pci_addr","pci_value","pci_response","pci_status","pci_addr32","pci_value32","pci_response32","pci_status32","device_spaces","pci_write8","pci_write16","pci_write32","out_byte","pci_query","host_bridge","isa_bridge","isa_bridge_space","isa_bridge_space8","PCI.prototype.get_state","PCI.prototype.set_state","bar_nr","bar","set_io_bars","original_bar","PCI.prototype.pci_query","bdf","dev","dbg_line","PCI.prototype.pci_write8","address","PCI.prototype.pci_write16","PCI.prototype.pci_write32","space_addr","from","to","pci_rom_size","pci_rom_address","PCI.prototype.register_device","device_id","bar_space","bar_base","entries","port","PCI.prototype.set_io_bars","old_entry","empty_entry","raise_irq","PCI.prototype.raise_irq","lower_irq","PCI.prototype.lower_irq","FloppyController","fda_image","fdb_image","dma","bytes_expecting","receiving_command","receiving_index","next_command","response_data","floppy_size","response_length","response_index","last_head","last_cylinder","drive","status_reg2","status_reg1","status_reg0","dor","floppy_type","floppy_types","tracks","heads","CMOS_FLOPPY_DRIVE_TYPE","number_of_heads","number_of_cylinders","port3F0_read","port3F2_read","port3F4_read","port3F5_read","port3F7_read","port3F2_write","port3F5_write","FloppyController.prototype.get_state","FloppyController.prototype.set_state","FloppyController.prototype.port3F0_read","FloppyController.prototype.port3F4_read","return_byte","FloppyController.prototype.port3F7_read","FloppyController.prototype.port3F5_read","FloppyController.prototype.port3F5_write","reg_byte","fix_drive_data","check_drive_status","this.next_command","do_sector","calibrate","check_interrupt_status","read_sector_id","seek","FloppyController.prototype.port3F2_read","FloppyController.prototype.port3F2_write","FloppyController.prototype.check_drive_status","FloppyController.prototype.seek","FloppyController.prototype.calibrate","FloppyController.prototype.check_interrupt_status","FloppyController.prototype.do_sector","is_write","cylinder","read_count","read_offset","done","do_read","FloppyController.prototype.done","FloppyController.prototype.fix_drive_data","FloppyController.prototype.read_sector_id","FloppyController.prototype.raise_irq","A20_MASK","A20_MASK16","A20_MASK32","USE_A20","debug_write","CPU.prototype.debug_write","debug_read","CPU.prototype.debug_read","mmap_read8","CPU.prototype.mmap_read8","mmap_write8","CPU.prototype.mmap_write8","mmap_read16","CPU.prototype.mmap_read16","mmap_write16","CPU.prototype.mmap_write16","mmap_read32","CPU.prototype.mmap_read32","mmap_write32","CPU.prototype.mmap_write32","CPU.prototype.in_mapped_range","CPU.prototype.read8","a20_enabled","CPU.prototype.read16","read_aligned16","CPU.prototype.read_aligned16","mem16","CPU.prototype.read32s","read_aligned32","CPU.prototype.read_aligned32","mem32s","CPU.prototype.write8","CPU.prototype.write16","write_aligned16","CPU.prototype.write_aligned16","CPU.prototype.write32","write_aligned32","CPU.prototype.write_aligned32","CPU.prototype.write_blob","write_blob32","CPU.prototype.write_blob32","DMA","channel_page","channel_pagehi","channel_addr","channel_addr_init","channel_count","channel_count_init","channel_mask","channel_mode","unmask_listeners","lsb_msb_flipflop","port_addr_write","port_count_write","port_addr_read","port_count_read","port_page_write","port_page_read","port_pagehi_write","port_pagehi_read","port_singlemask_write","port_multimask_write","port_multimask_read","port_mode_write","portC_write","DMA.prototype.get_state","DMA.prototype.set_state","DMA.prototype.port_count_write","channel","data_byte","flipflop_get","DMA.prototype.port_count_read","flipflop_read","DMA.prototype.port_addr_write","DMA.prototype.port_addr_read","DMA.prototype.port_pagehi_write","DMA.prototype.port_pagehi_read","DMA.prototype.port_page_write","DMA.prototype.port_page_read","DMA.prototype.port_singlemask_write","channel_offset","update_mask","DMA.prototype.port_multimask_write","DMA.prototype.port_multimask_read","DMA.prototype.port_mode_write","DMA.prototype.portC_write","on_unmask","DMA.prototype.on_unmask","this_value","DMA.prototype.update_mask","DMA.prototype.do_read","count_get_8bit","address_get_8bit","DMA.prototype.do_write","bytes_per_count","read_bytes","unfinished","want_more","autoinit","DMA.prototype.address_get_8bit","DMA.prototype.count_get_8bit","DMA.prototype.flipflop_get","old_dword","new_byte","continuing","DMA.prototype.flipflop_read","dword","OSCILLATOR_FREQ","PIT","counter_start_time","counter_start_value","counter_next_low","counter_enabled","counter_mode","counter_read_mode","counter_latch","counter_latch_value","counter_reload","ref_toggle","counter2_out","did_rollover","counter_read","counter_write","port43_write","PIT.prototype.get_state","PIT.prototype.set_state","PIT.prototype.timer","no_irq","get_counter_value","time_to_next_interrupt","PIT.prototype.get_counter_value","diff","diff_in_ticks","reload","PIT.prototype.did_rollover","PIT.prototype.counter_read","latch","next_low","PIT.prototype.counter_write","PIT.prototype.port43_write","binary_mode","read_mode","VGA_BANK_SIZE","MAX_XRES","MAX_YRES","MAX_BPP","VGA_LFB_ADDRESS","VGA_PIXEL_BUFFER_START","VGA_PIXEL_BUFFER_SIZE","VGA_MIN_MEMORY_SIZE","VGA_HOST_MEMORY_SPACE_START","Uint32Array","VGA_HOST_MEMORY_SPACE_SIZE","VGAScreen","vga_memory_size","cursor_address","cursor_scanline_start","cursor_scanline_end","max_cols","max_rows","virtual_height","virtual_width","screen_height","screen_width","start_address_latched","start_address","crtc","line_compare","offset_register","preset_row_scan","underline_location_register","vertical_blank_start","vertical_display_enable_end","horizontal_blank_start","horizontal_display_enable_end","crtc_mode","graphical_mode_is_linear","graphical_mode","vga256_palette","svga_height","svga_width","latch_dword","svga_enabled","svga_bpp","svga_offset","svga_bank_offset","res_x","res_y","bpp","dac_state","dac_color_index_read","dac_color_index_write","index_crtc","dac_map","attribute_controller_index","palette_source","color_select","horizontal_panning","color_plane_enable","attribute_mode","sequencer_index","plane_write_bm","clocking_mode","sequencer_memory_mode","graphics_index","planar_rotate_reg","planar_mode","plane_read","planar_bitmap","max_scan_line","color_dont_care","color_compare","miscellaneous_graphics_register","planar_setreset_enable","planar_setreset","port_3DA_value","miscellaneous_output_register","port3C0_write","port3C0_read","port3C0_read16","port3C1_read","port3C2_write","port3C4_write","port3C5_write","port3C4_read","port3C5_read","port3CE_write","port3CF_write","port3CE_read","port3CF_read","port3C7_write","port3C7_read","port3C8_write","port3C8_read","port3C9_write","port3C9_read","port3CC_read","port3D4_write","port3D5_write","port3D4_read","port3D5_read","port3DA_read","dispi_index","dispi_enable_value","port1CE_write","port1CF_write","port1CF_read","svga_memory","diff_addr_min","diff_addr_max","diff_plot_min","diff_plot_max","dest_buffer","screen_fill_buffer","svga_memory16","svga_memory32","vga_memory","plane0","plane1","plane2","plane3","pixel_buffer","vga_memory_read","vga_memory_write","svga_memory_read8","svga_memory_write8","svga_memory_read32","svga_memory_write32","VGAScreen.prototype.get_state","VGAScreen.prototype.set_state","update_layers","update_vga_size","complete_replot","complete_redraw","VGAScreen.prototype.vga_memory_read","memory_space_select","reading","plane","VGAScreen.prototype.vga_memory_write","vga_memory_write_graphical_linear","vga_memory_write_graphical","vga_memory_write_text_mode","VGAScreen.prototype.vga_memory_write_graphical_linear","VGAScreen.prototype.vga_memory_write_graphical","write_mode","bitmask","apply_feed","setreset_dword","apply_expand","setreset_enable_dword","apply_rotate","plane_dword","apply_setreset","apply_logical","apply_bitmask","plane_select","pixel_addr","vga_addr_to_pixel","partial_replot","VGAScreen.prototype.apply_feed","VGAScreen.prototype.apply_expand","VGAScreen.prototype.apply_rotate","VGAScreen.prototype.apply_setreset","data_dword","enable_dword","VGAScreen.prototype.apply_logical","VGAScreen.prototype.apply_bitmask","bitmask_dword","text_mode_redraw","VGAScreen.prototype.text_mode_redraw","VGAScreen.prototype.vga_memory_write_text_mode","memory_start","VGAScreen.prototype.update_cursor","VGAScreen.prototype.svga_memory_read8","VGAScreen.prototype.svga_memory_read32","VGAScreen.prototype.svga_memory_write8","VGAScreen.prototype.svga_memory_write32","VGAScreen.prototype.complete_redraw","VGAScreen.prototype.complete_replot","partial_redraw","VGAScreen.prototype.partial_redraw","max","VGAScreen.prototype.partial_replot","reset_diffs","VGAScreen.prototype.reset_diffs","VGAScreen.prototype.destroy","vga_bytes_per_line","VGAScreen.prototype.vga_bytes_per_line","bytes_per_line","vga_addr_shift_count","VGAScreen.prototype.vga_addr_shift_count","shift_count","VGAScreen.prototype.vga_addr_to_pixel","scan_line_to_screen_row","VGAScreen.prototype.scan_line_to_screen_row","scan_line","VGAScreen.prototype.set_size_text","cols_count","rows_count","VGAScreen.prototype.set_size_graphical","VGAScreen.prototype.update_vga_size","horizontal_characters","vertical_scans","available_bytes","update_vertical_retrace","VGAScreen.prototype.update_layers","start_addr","pixel_panning","byte_panning","pixel_addr_start","start_buffer_row","start_buffer_col","split_screen_row","split_buffer_height","start_split_col","VGAScreen.prototype.update_vertical_retrace","VGAScreen.prototype.update_cursor_scanline","VGAScreen.prototype.port3C0_write","previous_mode","VGAScreen.prototype.port3C0_read","VGAScreen.prototype.port3C0_read16","VGAScreen.prototype.port3C1_read","VGAScreen.prototype.port3C2_write","VGAScreen.prototype.port3C4_write","VGAScreen.prototype.port3C4_read","VGAScreen.prototype.port3C5_write","previous_clocking_mode","VGAScreen.prototype.port3C5_read","VGAScreen.prototype.port3C7_write","VGAScreen.prototype.port3C7_read","VGAScreen.prototype.port3C8_write","VGAScreen.prototype.port3C8_read","VGAScreen.prototype.port3C9_write","color_byte","VGAScreen.prototype.port3C9_read","VGAScreen.prototype.port3CC_read","VGAScreen.prototype.port3CE_write","VGAScreen.prototype.port3CE_read","VGAScreen.prototype.port3CF_write","previous_planar_mode","VGAScreen.prototype.port3CF_read","VGAScreen.prototype.port3D4_write","VGAScreen.prototype.port3D4_read","VGAScreen.prototype.port3D5_write","previous_vertical_display_enable_end","previous_vertical_blank_start","previous_underline","VGAScreen.prototype.port3D5_read","VGAScreen.prototype.port3DA_read","svga_bytes_per_line","VGAScreen.prototype.svga_bytes_per_line","bits","VGAScreen.prototype.port1CE_write","VGAScreen.prototype.port1CF_write","VGAScreen.prototype.port1CF_read","svga_register_read","VGAScreen.prototype.svga_register_read","vga_replot","VGAScreen.prototype.vga_replot","addr_shift","addr_substitution","shift_mode","pel_width","byte0","byte1","byte2","byte3","shift_loads","vga_redraw","VGAScreen.prototype.vga_redraw","mask","colorset","color256","VGAScreen.prototype.screen_fill_buffer","start_pixel","end_pixel","red","green","blue","min_y","PS2","use_mouse","enable_mouse_stream","have_mouse","mouse_clicks","mouse_delta_y","mouse_delta_x","have_keyboard","next_read_resolution","next_read_rate","next_handle_scan_code_set","next_read_led","next_read_sample","next_is_mouse_command","enable_keyboard_stream","kbd_buffer","last_port60_byte","sample_rate","resolution","scaling2","last_mouse_packet","mouse_buffer","next_byte_is_aux","next_byte_is_ready","code","kbd_send_code","mouse_send_click","mouse_send_delta","command_register","read_command_register","read_output_register","port60_read","port64_read","port60_write","port64_write","PS2.prototype.get_state","PS2.prototype.set_state","PS2.prototype.raise_irq","kbd_irq","mouse_irq","PS2.prototype.mouse_irq","PS2.prototype.kbd_irq","PS2.prototype.kbd_send_code","PS2.prototype.mouse_send_delta","delta_x","delta_y","factor","change_x","change_y","send_mouse_packet","PS2.prototype.mouse_send_click","left","middle","right","PS2.prototype.send_mouse_packet","dx","dy","info_byte","apply_scaling2","PS2.prototype.apply_scaling2","PS2.prototype.port60_read","PS2.prototype.port64_read","status_byte","PS2.prototype.port60_write","write_byte","PS2.prototype.port64_write","reboot_internal","PIC_LOG_VERBOSE","PIC","irq_value","irr","isr","irq_map","irq_mask","requested_irq","is_master","expect_icw4","read_isr","auto_eoi","elcr","special_mask_mode","check_irqs","this.check_irqs","handle_irqs","enabled_irr","special_mask","irq_number","acknowledge_irq","this.acknowledge_irq","pic_call_irq","set_irq","dump","this.dump","io_base","iobase_high","port20_write","port20_read","port21_write","port21_read","port4D0_write","port4D0_read","this.set_irq","clear_irq","this.clear_irq","get_isr","this.get_isr","PIC.prototype.get_state","PIC.prototype.set_state","PIC.prototype.port20_write","eoi_type","PIC.prototype.port20_read","PIC.prototype.port21_write","PIC.prototype.port21_read","PIC.prototype.port4D0_read","PIC.prototype.port4D0_write","CMOS_RTC_SECONDS","CMOS_RTC_SECONDS_ALARM","CMOS_RTC_MINUTES","CMOS_RTC_MINUTES_ALARM","CMOS_RTC_HOURS","CMOS_RTC_HOURS_ALARM","CMOS_RTC_DAY_WEEK","CMOS_RTC_DAY_MONTH","CMOS_RTC_MONTH","CMOS_RTC_YEAR","CMOS_STATUS_A","CMOS_STATUS_B","CMOS_STATUS_C","CMOS_STATUS_D","CMOS_RESET_CODE","CMOS_EQUIPMENT_INFO","CMOS_MEM_BASE_LOW","CMOS_MEM_BASE_HIGH","CMOS_MEM_OLD_EXT_LOW","CMOS_MEM_OLD_EXT_HIGH","CMOS_DISK_DRIVE1_TYPE","CMOS_DISK_DRIVE2_TYPE","CMOS_DISK_DRIVE2_CYL","CMOS_MEM_EXTMEM_LOW","CMOS_MEM_EXTMEM_HIGH","CMOS_CENTURY","CMOS_MEM_EXTMEM2_LOW","CMOS_MEM_EXTMEM2_HIGH","CMOS_BIOS_BOOTFLAG1","CMOS_BIOS_BOOTFLAG2","CMOS_MEM_HIGHMEM_LOW","CMOS_MEM_HIGHMEM_MID","CMOS_MEM_HIGHMEM_HIGH","CMOS_BIOS_SMP_COUNT","RTC","cmos_index","cmos_data","last_update","rtc_time","next_interrupt","periodic_interrupt","periodic_interrupt_time","cmos_a","cmos_b","nmi_disabled","cmos_c","cmos_port_write","cmos_port_read","RTC.prototype.get_state","RTC.prototype.set_state","RTC.prototype.timer","time","legacy_mode","bcd_pack","RTC.prototype.bcd_pack","digit","encode_time","RTC.prototype.encode_time","RTC.prototype.cmos_port_read","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","RTC.prototype.cmos_port_write","RTC.prototype.cmos_read","RTC.prototype.cmos_write","DLAB","UART_IER_MSI","UART_IER_THRI","UART_IER_RDI","UART_IIR_MSI","UART_IIR_NO_INT","UART_IIR_THRI","UART_IIR_RDI","UART_IIR_RLSI","UART_IIR_CTI","UART_LSR_DATA_READY","UART_LSR_TX_EMPTY","UART_LSR_TRANSMITTER_EMPTY","UART","ints","line_control","baud_rate","lsr","ier","fifo_control","iir","scratch_register","modem_status","modem_control","input","current_line","com","data_received","write_data","out_word","CheckInterrupt","ClearInterrupt","UART.prototype.get_state","UART.prototype.set_state","UART.prototype.CheckInterrupt","ThrowInterrupt","UART.prototype.ThrowInterrupt","UART.prototype.ClearInterrupt","UART.prototype.data_received","UART.prototype.write_data","char","trimRight","HPET_ADDR","HPET_PERIOD","HPET_FREQ_MS","HPET_SUPPORT_64","HPET_COUNTER_CONFIG","HPET_COUNTER_CONFIG_MASK","HPET_NUM_COUNTERS","HPET","get_counter","hpet_enabled","hpet_start","hpet_offset_low","get_counter_high","hpet_offset_high","counter_read_acc_next","interrupt_status","counter_config","counter_comparator","counter_accumulator","last_check","counter_value","config","comparator","do_irq","mmio_read","counter","mmio_write","PMTIMER_FREQ","ACPI","acpi","pm1_enable","pm1_status","last_timer","get_timer","gpe","ACPI.prototype.timer","highest_bit_changed","ACPI.prototype.get_timer","ACPI.prototype.get_state","ACPI.prototype.set_state","APIC_LOG_VERBOSE","APIC_ADDRESS","APIC_TIMER_MODE_MASK","APIC_TIMER_MODE_ONE_SHOT","APIC_TIMER_MODE_PERIODIC","APIC_TIMER_MODE_TSC","DELIVERY_MODES","DESTINATION_MODES","APIC","timer_divider","apic_id","timer_divider_shift","timer_current_count","timer_initial_count","lvt_error","lvt_int1","lvt_int0","lvt_perf_counter","lvt_timer","IOAPIC_CONFIG_MASKED","icr1","icr0","tpr","tmr","spurious_vector","destination_format","read_error","local_destination","off","APIC.prototype.read32","APIC.prototype.write32","check_vector","highest_isr","register_clear_bit","register_get_bit","ioapic","remote_eoi","vector","delivery_mode","destination_mode","is_level","destination_shorthand","destination","route","deliver","IOAPIC_DELIVERY_FIXED","divide_shift","timer_active","APIC.prototype.timer","steps","APIC.prototype.route","APIC.prototype.deliver","IOAPIC_DELIVERY_INIT","IOAPIC_DELIVERY_NMI","register_set_bit","highest_irr","APIC.prototype.highest_irr","highest","register_get_highest_bit","APIC.prototype.highest_isr","APIC.prototype.check_vector","APIC.prototype.acknowledge_irq","APIC.prototype.get_state","APIC.prototype.set_state","APIC.prototype.register_get_bit","v","bit","APIC.prototype.register_set_bit","APIC.prototype.register_clear_bit","APIC.prototype.register_get_highest_bit","IOAPIC_ADDRESS","IOREGSEL","IOWIN","IOAPIC_IRQ_COUNT","IOAPIC_ID","IOAPIC_CONFIG_TRIGGER_MODE_LEVEL","IOAPIC_CONFIG_DELIVS","IOAPIC_CONFIG_REMOTE_IRR","IOAPIC_CONFIG_READONLY_MASK","IOAPIC_DELIVERY_LOWEST_PRIORITY","IOAPIC","ioredtbl_config","ioredtbl_destination","ioregsel","ioapic_id","read","IOAPIC.prototype.remote_eoi","check_irq","IOAPIC.prototype.check_irq","apic","IOAPIC.prototype.set_irq","IOAPIC.prototype.clear_irq","IOAPIC.prototype.read","IOAPIC.prototype.write","old_value","disabled","IOAPIC.prototype.get_state","IOAPIC.prototype.set_state","STATE_VERSION","STATE_MAGIC","STATE_INDEX_MAGIC","STATE_INDEX_VERSION","STATE_INDEX_TOTAL_LEN","STATE_INDEX_INFO_LEN","STATE_INFO_BLOCK_START","StateLoadError","save_object","saved_buffers","BYTES_PER_ELEMENT","byteOffset","restore_object","buffers","current","table","Int16Array","info","infos","full","buf","CPU.prototype.save_state","buffer_infos","total_buffer_size","info_object","buffer_block_start","total_size","ArrayBuffer","header_block","info_block","buffer_block","charCodeAt","CPU.prototype.restore_state","info_block_len","info_block_str_len","info_block_buffer","info_block_obj","parse","state_object","E8390_CMD","EN0_CLDALO","EN0_STARTPG","EN0_CLDAHI","EN0_STOPPG","EN0_BOUNDARY","EN0_TSR","EN0_TPSR","EN0_NCR","EN0_TCNTLO","EN0_FIFO","EN0_TCNTHI","EN0_ISR","EN0_CRDALO","EN0_RSARLO","EN0_CRDAHI","EN0_RSARHI","EN0_RCNTLO","EN0_RCNTHI","EN0_RSR","EN0_RXCR","EN0_TXCR","EN0_COUNTER0","EN0_DCFG","EN0_COUNTER1","EN0_IMR","EN0_COUNTER2","NE_DATAPORT","NE_RESET","ENISR_RX","ENISR_TX","ENISR_RX_ERR","ENISR_TX_ERR","ENISR_OVER","ENISR_COUNTERS","ENISR_RDC","ENISR_RESET","ENISR_ALL","ENRSR_RXOK","START_PAGE","START_RX_PAGE","STOP_PAGE","Ne2k","receive","imr","cr","tpsr","tcnt","rcnt","dcfg","memory","txcr","rxcr","tsr","mac","rsar","pstart","pstop","boundary","curpg","do_interrupt","get_page","pg","update_irq","data_port_read8","data_port_read16","data_port_read32","data_port_write16","data_port_write32","Ne2k.prototype.get_state","Ne2k.prototype.set_state","Ne2k.prototype.do_interrupt","ir_mask","Ne2k.prototype.update_irq","data_port_write","Ne2k.prototype.data_port_write","Ne2k.prototype.data_port_write16","Ne2k.prototype.data_port_write32","data_port_read","Ne2k.prototype.data_port_read","Ne2k.prototype.data_port_read8","Ne2k.prototype.data_port_read16","Ne2k.prototype.data_port_read32","Ne2k.prototype.receive","total_length","packet_length","data_start","next","cut","Ne2k.prototype.get_page","DSP_COPYRIGHT","DSP_NO_COMMAND","DSP_BUFSIZE","DSP_DACSIZE","SB_DMA_BUFSIZE","SB_DMA_BLOCK_SAMPLES","SB_DMA0","SB_DMA1","SB_DMA3","SB_DMA5","SB_DMA6","SB_DMA7","SB_DMA_CHANNEL_8BIT","SB_DMA_CHANNEL_16BIT","SB_IRQ2","SB_IRQ5","SB_IRQ7","SB_IRQ10","SB_IRQ","SB_IRQ_8BIT","SB_IRQ_16BIT","SB_IRQ_MIDI","SB_IRQ_MPU","DSP_COMMAND_SIZES","DSP_COMMAND_HANDLERS","MIXER_READ_HANDLERS","MIXER_WRITE_HANDLERS","MIXER_REGISTER_IS_LEGACY","FM_HANDLERS","SB16","write_buffer","read_buffer","read_buffer_lastvalue","command","mixer_current_address","command_size","mixer_registers","mixer_reset","dummy_speaker_enabled","test_register","dsp_signed","dsp_16bit","dsp_stereo","dsp_highspeed","dac_buffers","dma_channel","dma_irq","dma_bytes_block","dma_bytes_left","dma_bytes_count","dma_sample_count","dma_channel_8bit","dma_channel_16bit","dma_autoinit","dma_buffer","dma_buffer_int8","dma_buffer_uint8","dma_buffer_int16","dma_buffer_uint16","dma_syncbuffer","dma_paused","dma_waiting_transfer","sampling_rate","bytes_per_sample","e2_value","e2_count","asp_registers","mpu_read_buffer","fm_current_address1","fm_current_address0","mpu_read_buffer_lastvalue","fm_waveform_select_enable","irq_triggered","port2x0_read","port2x1_read","port2x2_read","port2x3_read","port2x4_read","port2x5_read","port2x6_read","port2x7_read","port2x8_read","port2x9_read","port2xA_read","port2xB_read","port2xC_read","port2xD_read","port2xE_read","port2xF_read","port2x0_write","port2x1_write","port2x2_write","port2x3_write","port2x4_write","port2x5_write","port2x6_write","port2x7_write","port2x8_write","port2x9_write","port2xA_write","port2xB_write","port2xC_write","port2xD_write","port2xE_write","port2xF_write","port3x0_read","port3x1_read","port3x0_write","port3x1_write","dma_on_unmask","dac_handle_request","dsp_reset","SB16.prototype.dsp_reset","fill","SB16.prototype.get_state","mpu_read_buffer_last_value","SB16.prototype.set_state","mixer_full_update","SB16.prototype.port2x0_read","SB16.prototype.port2x1_read","SB16.prototype.port2x2_read","SB16.prototype.port2x3_read","SB16.prototype.port2x4_read","SB16.prototype.port2x5_read","mixer_read","SB16.prototype.port2x6_read","SB16.prototype.port2x7_read","SB16.prototype.port2x8_read","SB16.prototype.port2x9_read","SB16.prototype.port2xA_read","SB16.prototype.port2xB_read","SB16.prototype.port2xC_read","SB16.prototype.port2xD_read","SB16.prototype.port2xE_read","SB16.prototype.port2xF_read","SB16.prototype.port2x0_write","SB16.prototype.port2x1_write","handler","fm_default_write","SB16.prototype.port2x2_write","SB16.prototype.port2x3_write","SB16.prototype.port2x4_write","SB16.prototype.port2x5_write","mixer_write","SB16.prototype.port2x6_write","yesplease","SB16.prototype.port2x7_write","SB16.prototype.port2x8_write","SB16.prototype.port2x9_write","SB16.prototype.port2xA_write","SB16.prototype.port2xB_write","SB16.prototype.port2xC_write","command_do","SB16.prototype.port2xD_write","SB16.prototype.port2xE_write","SB16.prototype.port2xF_write","SB16.prototype.port3x0_read","SB16.prototype.port3x0_write","SB16.prototype.port3x1_read","SB16.prototype.port3x1_write","SB16.prototype.command_do","dsp_default_handler","SB16.prototype.dsp_default_handler","register_dsp_command","commands","any_first_digit","audio_normalize","dma_transfer_size_set","dma_transfer_start","sampling_rate_change","get_channel_count","SB_F9","SB16.prototype.mixer_read","SB16.prototype.mixer_write","mixer_default_read","SB16.prototype.mixer_default_read","mixer_default_write","SB16.prototype.mixer_default_write","SB16.prototype.mixer_reset","SB16.prototype.mixer_full_update","register_mixer_read","register_mixer_write","register_mixer_legacy","address_old","address_new_left","address_new_right","prev_right","prev_left","register_mixer_volume","mixer_source","SB16.prototype.fm_default_write","register_fm_write","addresses","between","SB_FM_OPERATORS_BY_OFFSET","get_fm_operator","fm_update_waveforms","SB16.prototype.fm_update_waveforms","SB16.prototype.sampling_rate_change","rate","SB16.prototype.get_channel_count","SB16.prototype.dma_transfer_size_set","SB16.prototype.dma_transfer_start","max_bytes_block","SB16.prototype.dma_on_unmask","dma_transfer_next","SB16.prototype.dma_transfer_next","samples","dma_to_dac","SB16.prototype.dma_to_dac","sample_count","amplitude","repeats","sample","dac_send","SB16.prototype.dac_handle_request","SB16.prototype.dac_send","out0","out1","SB16.prototype.raise_irq","SB16.prototype.lower_irq","audio_clip","VirtIO","queue_select","queue_size","queue_address","device_status","ring_start","ring_desc_start","last_idx","desc_idx","handle_descriptor","device_reply","VirtIO.prototype.get_state","VirtIO.prototype.set_state","VirtIO.prototype.reset","VirtIO.prototype.handle_descriptor","desc_start","buffer_idx","VRING_DESC_F_WRITE","VRING_DESC_F_INDIRECT","addr_low","addr_high","VRING_DESC_F_NEXT","buffer_len","pointer","VirtIO.prototype.device_reply","queueidx","result_length","used_desc_start","used_idx","used_desc_offset","Bus","BusConnector","listeners","pair","BusConnector.prototype.register","unregister","BusConnector.prototype.unregister","filter","BusConnector.prototype.send","unused_transfer","listener","send_async","BusConnector.prototype.send_async","create","Bus.create","c0","c1","log_data","do_the_log","dbg_names","reduce","log_last_message","log_message_repetitions","dbg_log_","stuff","level","time_str","getHours","getMinutes","getSeconds","getMilliseconds","stack","cond","dbg_assert_failed","trace","instruction_count","instruction_total","CPU_LOG_VERBOSE","CPU_EX_P","CPU_EX_U","CPU_EX_O","CPU_EX_Z","CPU_EX_D","CPU_EX_I","mem_page_infos","segment_is_null","segment_limits","segment_offsets","tlb_data","tlb_info","tlb_info_global","protected_mode","gdtr_offset","gdtr_size","idtr_offset","idtr_size","page_fault","tss_size_32","page_size_extensions","cpl","in_hlt","stack_size_32","is_32","last_result","last_add_result","last_op_size","last_op2","last_op1","prefixes","sysenter_eip","sysenter_esp","sysenter_cs","esp_phys","last_virt_esp","eip_phys","last_virt_eip","div32_result","phys_addr_high","phys_addr","modrm_byte","tsc_offset","paging","previous_ip","apic_enabled","timestamp_counter","reg32s","reg32","reg16s","reg8s","reg8","reg_mmxs","reg_mmx","reg_mmx8s","reg_mmx8","reg_xmm32s","mxcsr","sreg","dreg","bios","main","vga","fw_value","fpu","table16","table32","table0F_16","table0F_32","update_operand_size","debug_init","init2","CPU.prototype.get_state","virtio","hpet","ps2","uart0","fdc","cdrom","hda","pit","net","pic","sb16","uart1","uart2","uart3","CPU.prototype.set_state","full_clear_tlb","CPU.prototype.main_run","hlt_loop","do_run","exception_cleanup","CPU.prototype.exception_cleanup","clear_prefixes","CPU.prototype.reboot_internal","CPU.prototype.reset","switch_cs_real_mode","switch_seg","create_memory","CPU.prototype.create_memory","CPU.prototype.init","device_bus","vga_bios","a20_byte","load_devices","fill_cmos","fda","fdb","ide_device_count","hdb","enable_ne2k","fs9p","multiboot","load_multiboot","debug","CPU.prototype.load_multiboot","MULTIBOOT_SEARCH_BYTES","buf32","MAGIC","checksum","multiboot_info_addr","update_cs_size","MULTIBOOT_HEADER_ADDRESS","header_addr","load_addr","load_end_addr","bss_end_addr","entry_addr","file_start","get_seg","ELF_MAGIC","elf","read_elf","program_headers","program","paddr","vaddr","filesz","memsz","dump_state","dump_regs","CPU.prototype.fill_cmos","boot_order","memory_above_1m","memory_above_16m","fastboot","CPU.prototype.load_bios","vga_bios8","CPU.prototype.do_run","run_hardware_timers","do_many_cycles","CPU.prototype.do_many_cycles","do_many_cycles_unsafe","CPU.prototype.do_many_cycles_unsafe","k","cycle_internal","PROFILING","CPU.prototype.cycle_internal","opcode","read_imm8","logop","cycle","CPU.prototype.cycle","segment_prefix_op","CPU.prototype.segment_prefix_op","run_prefix_instruction","CPU.prototype.run_prefix_instruction","CPU.prototype.hlt_loop","CPU.prototype.run_hardware_timers","CPU.prototype.clear_prefixes","set_cr0","CPU.prototype.set_cr0","cr0","unimpl","new_paging","set_cr4","CPU.prototype.set_cr4","cr4","trigger_gp","clear_tlb","cpl_changed","CPU.prototype.cpl_changed","CPU.prototype.read_imm8","translate_address_read","data8","read_imm8s","CPU.prototype.read_imm8s","read_imm16","CPU.prototype.read_imm16","read_imm32s","CPU.prototype.read_imm32s","create_atom64s","CPU.prototype.create_atom64s","create_atom128s","CPU.prototype.create_atom128s","d0","d1","d2","d3","read_modrm_byte","CPU.prototype.read_modrm_byte","read_op0F","read_sib","read_op8","read_op8s","read_op16","read_op32s","read_disp8","read_disp8s","read_disp16","read_disp32s","CPU.prototype.init2","branch_taken","CPU.prototype.branch_taken","branch_not_taken","CPU.prototype.branch_not_taken","diverged","CPU.prototype.diverged","modrm_resolve","CPU.prototype.modrm_resolve","is_asize_32","modrm_table32","modrm_table16","sib_resolve","CPU.prototype.sib_resolve","sib_table","clear_instruction_cache","CPU.prototype.clear_instruction_cache","virt_boundary_read16","CPU.prototype.virt_boundary_read16","virt_boundary_read32s","CPU.prototype.virt_boundary_read32s","mid","virt_boundary_write16","CPU.prototype.virt_boundary_write16","virt_boundary_write32","CPU.prototype.virt_boundary_write32","safe_read8","CPU.prototype.safe_read8","CPU.prototype.safe_read16","CPU.prototype.safe_read32s","safe_read64s","CPU.prototype.safe_read64s","safe_read128s_aligned","CPU.prototype.safe_read128s_aligned","phys","safe_read128s_unaligned","CPU.prototype.safe_read128s_unaligned","safe_write8","CPU.prototype.safe_write8","translate_address_write","CPU.prototype.safe_write16","phys_low","CPU.prototype.safe_write32","safe_write64","CPU.prototype.safe_write64","safe_write128","CPU.prototype.safe_write128","read_moffs","CPU.prototype.read_moffs","get_seg_prefix","getiopl","CPU.prototype.getiopl","vm86_mode","CPU.prototype.vm86_mode","get_eflags","CPU.prototype.get_eflags","getcf","getpf","getaf","getzf","getsf","getof","update_eflags","CPU.prototype.update_eflags","new_flags","dont_update","get_stack_reg","CPU.prototype.get_stack_reg","set_stack_reg","CPU.prototype.set_stack_reg","adjust_stack_reg","CPU.prototype.adjust_stack_reg","get_stack_pointer","CPU.prototype.get_stack_pointer","get_real_eip","CPU.prototype.get_real_eip","call_interrupt_vector","CPU.prototype.call_interrupt_vector","interrupt_nr","is_software_int","error_code","debug_interrupt","translate_address_system_read","selector","access","dpl","do_task_switch","is_trap","is_16","lookup_segment_selector","effective_limit","is_valid","is_null","is_executable","is_present","trigger_np","old_flags","dc_bit","tss_stack_addr","get_tss_stack_addr","new_esp","new_ss","ss_info","is_system","is_writable","rpl","rw_bit","old_esp","old_ss","stack_space","translate_address_system_write","push32","push16","new_ip","new_cs","iret16","CPU.prototype.iret16","iret","iret32","CPU.prototype.iret32","CPU.prototype.iret","new_eip","temp_esp","temp_ss","new_es","new_ds","new_fs","new_gs","new_cpl","trigger_ss","CPU.prototype.switch_cs_real_mode","far_return","CPU.prototype.far_return","eip","stack_adjust","far_jump","CPU.prototype.far_jump","is_call","cs_selector","raw0","cs_info","parameter_count","raw1","old_stack_pointer","parameter","types","CPU.prototype.get_tss_stack_addr","CPU.prototype.do_task_switch","descriptor","tss_is_16","tss_is_busy","from_gdt","tsr_offset","old_eflags","table_offset","new_tsr_offset","new_cr3","new_eflags","new_ldt","load_ldt","hlt_op","CPU.prototype.hlt_op","show","raise_exception","CPU.prototype.raise_exception","raise_exception_with_code","CPU.prototype.raise_exception_with_code","trigger_de","CPU.prototype.trigger_de","CPU.prototype.trigger_ud","trigger_nm","CPU.prototype.trigger_nm","trigger_ts","CPU.prototype.trigger_ts","CPU.prototype.trigger_gp","CPU.prototype.trigger_np","CPU.prototype.trigger_ss","task_switch_test","CPU.prototype.task_switch_test","task_switch_test_mmx","CPU.prototype.task_switch_test_mmx","todo","CPU.prototype.todo","undefined_instruction","CPU.prototype.undefined_instruction","unimplemented_sse","CPU.prototype.unimplemented_sse","get_seg_prefix_ds","CPU.prototype.get_seg_prefix_ds","get_seg_prefix_ss","CPU.prototype.get_seg_prefix_ss","get_seg_prefix_cs","CPU.prototype.get_seg_prefix_cs","CPU.prototype.get_seg_prefix","default_segment","prefix","CPU.prototype.get_seg","segment","read_e8","CPU.prototype.read_e8","read_e8s","CPU.prototype.read_e8s","read_e16","CPU.prototype.read_e16","read_e16s","CPU.prototype.read_e16s","read_e32s","CPU.prototype.read_e32s","read_e32","CPU.prototype.read_e32","read_mmx_mem32s","CPU.prototype.read_mmx_mem32s","read_mmx_mem64s","CPU.prototype.read_mmx_mem64s","read_xmm_mem64s","CPU.prototype.read_xmm_mem64s","read_xmm_mem128s","CPU.prototype.read_xmm_mem128s","read_xmm_mem128s_unaligned","CPU.prototype.read_xmm_mem128s_unaligned","set_e8","CPU.prototype.set_e8","set_e16","CPU.prototype.set_e16","set_e32","CPU.prototype.set_e32","set_mmx_mem64s","CPU.prototype.set_mmx_mem64s","read_write_e8","CPU.prototype.read_write_e8","virt_addr","write_e8","CPU.prototype.write_e8","read_write_e16","CPU.prototype.read_write_e16","write_e16","CPU.prototype.write_e16","read_write_e32","CPU.prototype.read_write_e32","write_e32","CPU.prototype.write_e32","read_reg_e16","CPU.prototype.read_reg_e16","write_reg_e16","CPU.prototype.write_reg_e16","read_reg_e32s","CPU.prototype.read_reg_e32s","write_reg_e32","CPU.prototype.write_reg_e32","read_g8","CPU.prototype.read_g8","write_g8","CPU.prototype.write_g8","read_g16","CPU.prototype.read_g16","read_g16s","CPU.prototype.read_g16s","write_g16","CPU.prototype.write_g16","read_g32s","CPU.prototype.read_g32s","write_g32","CPU.prototype.write_g32","read_xmm64s","CPU.prototype.read_xmm64s","read_xmm128s","CPU.prototype.read_xmm128s","read_mmx64s","CPU.prototype.read_mmx64s","write_mmx64s","CPU.prototype.write_mmx64s","write_xmm64","CPU.prototype.write_xmm64","write_xmm128s","CPU.prototype.write_xmm128s","CPU.prototype.pic_call_irq","int","CPU.prototype.handle_irqs","CPU.prototype.device_raise_irq","CPU.prototype.device_lower_irq","test_privileges_for_io","CPU.prototype.test_privileges_for_io","tsr_size","iomap_base","port_info","cpuid","CPU.prototype.cpuid","eax","ecx","edx","ebx","CPU.prototype.update_cs_size","new_size","CPU.prototype.update_operand_size","CPU.prototype.lookup_segment_selector","is_gdt","selector_offset","is_conforming_executable","is_readable","table_limit","limit","CPU.prototype.switch_seg","load_tr","CPU.prototype.load_tr","CPU.prototype.load_ldt","arpl","CPU.prototype.arpl","seg","lar","CPU.prototype.lar","original","dpl_bad","LAR_INVALID_TYPE","lsl","CPU.prototype.lsl","LSL_INVALID_TYPE","verr","CPU.prototype.verr","verw","CPU.prototype.verw","CPU.prototype.clear_tlb","CPU.prototype.full_clear_tlb","invlpg","CPU.prototype.invlpg","page","CPU.prototype.translate_address_read","translate_address_user_read","CPU.prototype.translate_address_write","translate_address_user_write","CPU.prototype.translate_address_user_write","do_page_translation","CPU.prototype.translate_address_user_read","CPU.prototype.translate_address_system_write","CPU.prototype.translate_address_system_read","CPU.prototype.do_page_translation","for_writing","user","page_dir_addr","page_dir_entry","can_write","allow_user","trigger_pagefault","page_table_addr","page_table_entry","allowed_flag","CPU.prototype.writable_or_pagefault","CPU.prototype.trigger_pagefault","present","CPU.prototype.is_osize_32","CPU.prototype.is_asize_32","get_reg_asize","CPU.prototype.get_reg_asize","r","set_ecx_asize","CPU.prototype.set_ecx_asize","add_reg_asize","CPU.prototype.add_reg_asize","decr_ecx_asize","CPU.prototype.decr_ecx_asize","CPU.prototype.invalid_arithmatic","is_SNaN32","CPU.prototype.is_SNaN32","importScripts","self","DynamicTranslator","something","clear_cache","this.clear_cache","cycle_translated","this.cycle_translated","MAX_COUNT_PER_CYCLE","string_get_cycle_count","string_get_cycle_count2","addr1","addr2","movsb","CPU.prototype.movsb","dest","start_count","cycle_counter","phys_src","phys_dest","cont","movsw","CPU.prototype.movsw","single_size","movsd","CPU.prototype.movsd","ds","es","align_mask","cmpsb","is_repz","data_dest","data_src","cmp8","cmpsw","cmp16","cmpsd","cmp32","stosb","stosw","stosd","lodsb","lodsw","lodsd","scasb","scasw","scasd","insb","insw","insd","outsb","outsw","outsd","add8","CPU.prototype.add8","add16","CPU.prototype.add16","add32","CPU.prototype.add32","adc8","CPU.prototype.adc8","adc","adc16","CPU.prototype.adc16","adc32","CPU.prototype.adc32","sub8","CPU.prototype.sub8","sub","sub16","CPU.prototype.sub16","sub32","CPU.prototype.sub32","CPU.prototype.cmp8","CPU.prototype.cmp16","CPU.prototype.cmp32","sbb8","CPU.prototype.sbb8","sbb","sbb16","CPU.prototype.sbb16","sbb32","CPU.prototype.sbb32","CPU.prototype.add","dest_operand","source_operand","op_size","CPU.prototype.adc","cf","CPU.prototype.sub","CPU.prototype.sbb","inc8","CPU.prototype.inc8","inc","inc16","CPU.prototype.inc16","inc32","CPU.prototype.inc32","dec8","CPU.prototype.dec8","dec","dec16","CPU.prototype.dec16","dec32","CPU.prototype.dec32","CPU.prototype.inc","CPU.prototype.dec","neg8","CPU.prototype.neg8","neg","neg16","CPU.prototype.neg16","neg32","CPU.prototype.neg32","CPU.prototype.neg","mul8","CPU.prototype.mul8","imul8","CPU.prototype.imul8","mul16","CPU.prototype.mul16","high_result","imul16","CPU.prototype.imul16","imul_reg16","CPU.prototype.imul_reg16","operand1","operand2","mul32","CPU.prototype.mul32","lo","hi","imul32","CPU.prototype.imul32","imul_reg32","CPU.prototype.imul_reg32","div8","CPU.prototype.div8","target_operand","idiv8","CPU.prototype.idiv8","div16","CPU.prototype.div16","idiv16","CPU.prototype.idiv16","do_div32","CPU.prototype.do_div32","div_low","div_high","quot","q","div","div32","CPU.prototype.div32","dest_operand_low","dest_operand_high","result_mod","idiv32","CPU.prototype.idiv32","div_is_neg","is_neg","xadd8","CPU.prototype.xadd8","tmp","xadd16","CPU.prototype.xadd16","xadd32","CPU.prototype.xadd32","bcd_daa","CPU.prototype.bcd_daa","old_al","old_cf","old_af","bcd_das","CPU.prototype.bcd_das","bcd_aam","CPU.prototype.bcd_aam","temp","bcd_aad","CPU.prototype.bcd_aad","bcd_aaa","CPU.prototype.bcd_aaa","bcd_aas","CPU.prototype.bcd_aas","and8","CPU.prototype.and8","and","and16","CPU.prototype.and16","and32","CPU.prototype.and32","test8","CPU.prototype.test8","test16","CPU.prototype.test16","test32","CPU.prototype.test32","or8","CPU.prototype.or8","or","or16","CPU.prototype.or16","or32","CPU.prototype.or32","xor8","CPU.prototype.xor8","xor","xor16","CPU.prototype.xor16","xor32","CPU.prototype.xor32","CPU.prototype.and","CPU.prototype.or","CPU.prototype.xor","rol8","CPU.prototype.rol8","rol16","CPU.prototype.rol16","rol32","CPU.prototype.rol32","rcl8","CPU.prototype.rcl8","rcl16","CPU.prototype.rcl16","rcl32","CPU.prototype.rcl32","ror8","CPU.prototype.ror8","ror16","CPU.prototype.ror16","ror32","CPU.prototype.ror32","rcr8","CPU.prototype.rcr8","rcr16","CPU.prototype.rcr16","rcr32","CPU.prototype.rcr32","shl8","CPU.prototype.shl8","shl16","CPU.prototype.shl16","shl32","CPU.prototype.shl32","shr8","CPU.prototype.shr8","shr16","CPU.prototype.shr16","shr32","CPU.prototype.shr32","sar8","CPU.prototype.sar8","sar16","CPU.prototype.sar16","sar32","CPU.prototype.sar32","shrd16","CPU.prototype.shrd16","shrd32","CPU.prototype.shrd32","shld16","CPU.prototype.shld16","shld32","CPU.prototype.shld32","bt_reg","CPU.prototype.bt_reg","bit_base","bit_offset","btc_reg","CPU.prototype.btc_reg","bts_reg","CPU.prototype.bts_reg","btr_reg","CPU.prototype.btr_reg","bt_mem","CPU.prototype.bt_mem","btc_mem","CPU.prototype.btc_mem","btr_mem","CPU.prototype.btr_mem","bts_mem","CPU.prototype.bts_mem","bsf16","CPU.prototype.bsf16","old","bsf32","CPU.prototype.bsf32","bsr16","CPU.prototype.bsr16","bsr32","CPU.prototype.bsr32","popcnt","CPU.prototype.popcnt","saturate_sw_to_ub","CPU.prototype.saturate_sw_to_ub","saturate_sw_to_sb","CPU.prototype.saturate_sw_to_sb","saturate_sd_to_sw","CPU.prototype.saturate_sd_to_sw","saturate_sd_to_sb","CPU.prototype.saturate_sd_to_sb","saturate_sd_to_ub","CPU.prototype.saturate_sd_to_ub","saturate_ud_to_ub","CPU.prototype.saturate_ud_to_ub","saturate_uw","CPU.prototype.saturate_uw","CPU.prototype.integer_round","rc","rounded","round","jmpcc8","CPU.prototype.jmpcc8","condition","jmp_rel16","CPU.prototype.jmp_rel16","rel16","current_cs","jmpcc16","CPU.prototype.jmpcc16","imm16","jmpcc32","CPU.prototype.jmpcc32","imm32s","cmovcc16","CPU.prototype.cmovcc16","cmovcc32","CPU.prototype.cmovcc32","setcc","CPU.prototype.setcc","loopne","CPU.prototype.loopne","imm8s","loope","CPU.prototype.loope","loop","CPU.prototype.loop","jcxz","CPU.prototype.jcxz","CPU.prototype.getcf","CPU.prototype.getpf","CPU.prototype.getaf","CPU.prototype.getzf","CPU.prototype.getsf","CPU.prototype.getof","test_o","test_s","CPU.prototype.test_be","test_l","CPU.prototype.test_l","test_le","CPU.prototype.test_le","CPU.prototype.push16","sp","CPU.prototype.push32","imm32","pop16","CPU.prototype.pop16","pop32s","CPU.prototype.pop32s","pusha16","CPU.prototype.pusha16","pusha32","CPU.prototype.pusha32","popa16","CPU.prototype.popa16","popa32","CPU.prototype.popa32","xchg8","CPU.prototype.xchg8","memory_data","xchg16","CPU.prototype.xchg16","xchg16r","CPU.prototype.xchg16r","operand","xchg32","CPU.prototype.xchg32","xchg32r","CPU.prototype.xchg32r","lss16","CPU.prototype.lss16","new_reg","new_seg","lss32","CPU.prototype.lss32","enter16","CPU.prototype.enter16","nesting_level","frame_temp","tmp_ebp","enter32","CPU.prototype.enter32","bswap","CPU.prototype.bswap","fxsave","CPU.prototype.fxsave","fxrstor","CPU.prototype.fxrstor","new_mxcsr","t16","t32","op1","op2","ip","old_vbp","new_bp","new_ebp","cs","res32","res0","res1","source1","source2","new_tick","source8","destination8","destination_low","source16","destination16","destination_high","source64s","source8s","reg_offset","destination8s","byte4","byte5","byte6","byte7","word0","word1","word2","word3","source16s","destination16s","result8","order","word0_shift","word1_shift","word2_shift","word3_shift","destination128","m64_low","m64_high","rand","has_rand","d","CPU.prototype.debug_init","step","dump_regs_short","dump_instructions","where","vm","iopl","cs_eip","ss_esp","if_","flag_names","flag_string","get_regs_short","r32_names","line1","line2","lines","get_instructions","step_mode","opcodes","out","trace_all","all_ops","ops","opcode_map","load_page_entry","dword_entry","is_directory","accessed","dirty","cache_disable","read_write","debug.show","el","getElementById","scrollTop","debug.init","handle","seabios_debug","dump_stack","esp","dump_page_directory","sub_addr","subentry","dump_gdt_ldt","dump_table","flags_str","dump_idt","get_memory_dump","memory_hex_dump","used_memory_dump","block_size","run_until","parseInt","prompt","debug.unimpl","debug.logop","_ip","debug.debug_interrupt","DataView","U8","getUint8","setUint8","U16","getUint16","setUint16","U32","getUint32","setUint32","pad","Header","create_struct","magic","class","version0","osabi","abiversion","machine","version1","phoff","shoff","ehsize","phentsize","phnum","shentsize","shnum","shstrndx","ProgramHeader","SectionHeader","link","addralign","entsize","struct","keys","view","read_struct","read_structs","view_slice","sections_headers","section","Struct","LITTLE_ENDIAN","SHIFT_SCAN_CODE","SCAN_CODE_RELEASE","KeyboardAdapter","keyup_handler","altKey","keys_pressed","handle_code","keydown_handler","blur_handler","keydown","shiftKey","ctrlKey","keyCode","keyboard","emu_enabled","classList","contains","nodeName","codemap","preventDefault","send_to_controller","asciimap","asciimap_shift","simulate_press","this.simulate_press","simulate_char","this.simulate_char","MouseAdapter","may_handle","mouse","enabled","parent","child","touch_start_handler","touches","touch","last_x","clientX","last_y","clientY","touch_end_handler","left_down","middle_down","right_down","mousemove_handler","SPEED_FACTOR","pageX","offsetLeft","pageY","offsetTop","offsetWidth","offsetHeight","mousedown_handler","click_event","mouseup_handler","down","which","mousewheel_handler","wheelDelta","detail","DAC_QUEUE_RESERVE","AUDIOBUFFER_MINIMUM_SAMPLING_RATE","SpeakerAdapter","AudioContext","SpeakerDAC","AudioWorklet","SpeakerWorkletDAC","SpeakerBufferSourceDAC","audio_context","mixer","SpeakerMixer","pcspeaker","PCSpeaker","dac","suspend","resume","warn","create_gain_handler","audio_node","decibels","gain","setValueAtTime","currentTime","sources","Map","gain_right","gain_left","volume_right","volume_left","volume_both","node_treble_left","createBiquadFilter","node_treble_right","frequency","node_bass_left","node_bass_right","node_gain_left","createGain","node_gain_right","node_merger","createChannelMerger","input_left","input_right","connect","connect_source","source_id","disconnect_source","set_volume","update","add_source","SpeakerMixer.prototype.add_source","source_node","SpeakerMixerSource","has","SpeakerMixer.prototype.connect_source","SpeakerMixer.prototype.disconnect_source","disconnect","SpeakerMixer.prototype.set_volume","SpeakerMixer.prototype.update","net_gain_right","destination_left","destination_right","connected_right","connected_left","gain_hidden","node_splitter","createChannelSplitter","SpeakerMixerSource.prototype.update","SpeakerMixerSource.prototype.connect","both","SpeakerMixerSource.prototype.disconnect","SpeakerMixerSource.prototype.set_volume","set_gain_hidden","SpeakerMixerSource.prototype.set_gain_hidden","node_oscillator","createOscillator","mixer_connection","maxValue","PCSpeaker.prototype.start","worklet_string","worklet","sinc","DACProcessor","Reflect","construct","AudioWorkletProcessor","kernel_size","queue_data","queue_start","queue_end","queue_length","queued_samples","source_buffer_previous","EMPTY_BUFFER","source_buffer_current","source_samples_per_destination","source_block_start","source_time","source_offset","onmessage","self.port.onmessage","event","queue_push","sampleRate","MINIMUM_BUFFER_SIZE","setPrototypeOf","process","DACProcessor.prototype.process","inputs","outputs","parameters","sum1","sum0","convolute_index","get_sample","kernel","samples_needed_per_block","ensure_enough_data","DACProcessor.prototype.kernel","DACProcessor.prototype.get_sample","DACProcessor.prototype.ensure_enough_data","needed","current_length","prepare_next_buffer","DACProcessor.prototype.prepare_next_buffer","queue_shift","queue_pos","buffer_count","new_big_buffer_size","new_big_buffer","new_big_buffer_pos","small_buffer","pump","DACProcessor.prototype.pump","QUEUE_RESERVE","DACProcessor.prototype.queue_push","DACProcessor.prototype.queue_shift","DACProcessor.prototype.dbg_log","registerProcessor","worklet_code_start","worklet_code_end","worklet_code","worklet_blob","worklet_url","node_processor","node_output","audioWorklet","addModule","then","AudioWorkletNode","this.node_processor.port.onmessage","debugger","SpeakerDACDebugger","SpeakerWorkletDAC.prototype.queue","push_queued_data","SpeakerWorkletDAC.prototype.pump","buffered_time","rate_ratio","node_lowpass","SpeakerBufferSourceDAC.prototype.queue","block_duration","createBuffer","buffer_data0","getChannelData","buffer_data1","buffer_index","copyToChannel","createBufferSource","current_time","current_silence_duration","target_silence_duration","SpeakerBufferSourceDAC.prototype.pump","node_source","node_gain","is_active","queued_history","output_history","queued","output","SpeakerDACDebugger.prototype.start","duration_ms","createScriptProcessor","onaudioprocess","this.node_processor.onaudioprocess","inputBuffer","SpeakerDACDebugger.prototype.stop","SpeakerDACDebugger.prototype.push_queued_data","download_txt","SpeakerDACDebugger.prototype.download_txt","history_id","txt","download_csv","SpeakerDACDebugger.prototype.download_csv","csv_rows","buffer_id","SerialAdapter","element","keypress_handler","serial","send_char","paste_handler","clipboardData","getData","window_click_handler","blur","text_new_line","show_char","this.show_char","this.update","delta","update_timer","render","clearTimeout","this.render","this.send_char","chr_code","NetworkAdapter","url","send_data","this.send_data","socket","send_queue","reconnect_interval","last_connect_attempt","send_queue_limit","handle_message","NetworkAdapter.prototype.handle_message","handle_close","NetworkAdapter.prototype.handle_close","handle_open","NetworkAdapter.prototype.handle_open","handle_error","NetworkAdapter.prototype.handle_error","NetworkAdapter.prototype.destroy","close","NetworkAdapter.prototype.connect","WebSocket","binaryType","onopen","onclose","onerror","NetworkAdapter.prototype.send","ASYNC_SAFE","load_file","filename","options","http","XMLHttpRequest","method","as_text","responseType","headers","header_names","setRequestHeader","range","http.onload","response","progress","http.onprogress","load_file_nodejs","err","fd","o","encoding","AsyncXHRBuffer","loaded_blocks","SyncFileBuffer","AsyncFileBuffer","determine_size","cb","getResponseHeader","Range","AsyncXHRBuffer.prototype.load","get_from_cache","AsyncXHRBuffer.prototype.get_from_cache","number_of_blocks","block_index","block","AsyncXHRBuffer.prototype.get","handle_read","AsyncXHRBuffer.prototype.set","start_block","block_count","data_slice","AsyncXHRBuffer.prototype.handle_read","written_block","AsyncXHRBuffer.prototype.get_buffer","get_written_blocks","AsyncXHRBuffer.prototype.get_written_blocks","_","indices","SyncFileBuffer.prototype.load","load_next","SyncFileBuffer.prototype.load_next","filereader","FileReader","PART_SIZE","loaded","total","lengthComputable","readAsArrayBuffer","SyncFileBuffer.prototype.get","SyncFileBuffer.prototype.set","SyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.load","AsyncFileBuffer.prototype.get","fr","AsyncFileBuffer.prototype.get_buffer","get_as_file","AsyncFileBuffer.prototype.get_as_file","existing_blocks","Number","sort","current_offset","File","V86Starter","put_on_settings","disk_images","initial_state","fs9p_json","add_file","files_to_load","loadable","emulator","OnJSONLoaded","cpu_is_running","adapter_bus","emulator_bus","network_adapter","keyboard_adapter","mouse_adapter","screen_adapter","DummyScreenAdapter","serial_adapter","speaker_adapter","image_names","fs_url","base_url","FS","starter","file_index","file_count","file_name","request","V86Starter.prototype.run","V86Starter.prototype.stop","V86Starter.prototype.destroy","V86Starter.prototype.restart","add_listener","V86Starter.prototype.add_listener","remove_listener","V86Starter.prototype.remove_listener","V86Starter.prototype.restore_state","V86Starter.prototype.save_state","callback","get_statistics","V86Starter.prototype.get_statistics","instruction_counter","get_instruction_counter","V86Starter.prototype.get_instruction_counter","is_running","V86Starter.prototype.is_running","keyboard_send_scancodes","V86Starter.prototype.keyboard_send_scancodes","codes","keyboard_send_keys","V86Starter.prototype.keyboard_send_keys","keyboard_send_text","V86Starter.prototype.keyboard_send_text","string","screen_make_screenshot","V86Starter.prototype.screen_make_screenshot","screen_set_scale","V86Starter.prototype.screen_set_scale","sx","sy","screen_go_fullscreen","V86Starter.prototype.screen_go_fullscreen","focus_element","getElementsByClassName","focus","lock_mouse","V86Starter.prototype.lock_mouse","mouse_set_status","V86Starter.prototype.mouse_set_status","keyboard_set_status","V86Starter.prototype.keyboard_set_status","serial0_send","V86Starter.prototype.serial0_send","serial_send_bytes","V86Starter.prototype.serial_send_bytes","create_file","V86Starter.prototype.create_file","parent_id","SearchPath","path_infos","not_found","CreateBinaryFile","FileNotFoundError","read_file","V86Starter.prototype.read_file","WorkerBus","WorkerBus.Connector","Connector","WorkerBus.Connector.prototype.register","WorkerBus.Connector.prototype.send","transfer_list","WorkerBus.init","worker","graphic_buffer","get_text_screen","this.get_text_screen","get_text_row","this.get_text_row","S_IRWXUGO","S_IFMT","S_IFSOCK","S_IFLNK","S_IFREG","S_IFBLK","S_IFCHR","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","STATUS_INVALID","STATUS_OK","STATUS_OPEN","STATUS_ON_SERVER","STATUS_LOADING","JSONFS_VERSION","JSONFS_IDX_NAME","JSONFS_IDX_SIZE","JSONFS_IDX_MTIME","JSONFS_IDX_MODE","JSONFS_IDX_UID","JSONFS_IDX_GID","JSONFS_IDX_TARGET","baseurl","events","filesinloadingqueue","qidnumber","OnLoaded","this.OnLoaded","used_size","FS.prototype.AddEvent","OnEvent","HandleEvent","FS.prototype.HandleEvent","newevents","FS.prototype.OnJSONLoaded","fsdata","fsroot","LoadRecursive","me.OnLoaded","FS.prototype.LoadRecursive","ifmt","LoadDir","FS.prototype.LoadDir","children","updatedir","LoadFile","FS.prototype.LoadFile","LoadBinaryResource","GetFullPath","FS.prototype.PushInode","parent_node","nextid","firstid","Inode","FS.prototype.CreateInode","FS.prototype.CreateDirectory","NotifyListeners","FS.prototype.CreateFile","FS.prototype.CreateNode","FS.prototype.CreateSymlink","CreateTextFile","FS.prototype.CreateTextFile","FS.prototype.CreateBinaryFile","FS.prototype.OpenInode","FillDirectory","FS.prototype.CloseInode","FS.prototype.Rename","olddirid","newdirid","oldid","oldpath","newid","FindPreviousID","FS.prototype.Write","FS.prototype.Search","FS.prototype.GetTotalSize","FS.prototype.GetSpace","FS.prototype.GetFullPath","FS.prototype.FindPreviousID","FS.prototype.Unlink","FS.prototype.GetInode","FS.prototype.ChangeSize","newsize","FS.prototype.SearchPath","GetRecursiveList","FS.prototype.GetRecursiveList","dirid","list","MergeFile","FS.prototype.MergeFile","ids","RecursiveDelete","FS.prototype.RecursiveDelete","toDelete","DeleteNode","FS.prototype.DeleteNode","FS.prototype.NotifyListeners","action","Check","FS.prototype.Check","FS.prototype.FillDirectory","UTF8","UTF8Length","FS.prototype.PrepareCAPs","VIRTIO_MAGIC_REG","VIRTIO_VERSION_REG","VIRTIO_DEVICE_REG","VIRTIO_VENDOR_REG","VIRTIO_HOSTFEATURES_REG","VIRTIO_HOSTFEATURESSEL_REG","VIRTIO_GUESTFEATURES_REG","VIRTIO_GUESTFEATURESSEL_REG","VIRTIO_GUEST_PAGE_SIZE_REG","VIRTIO_QUEUESEL_REG","VIRTIO_QUEUENUMMAX_REG","VIRTIO_QUEUENUM_REG","VIRTIO_QUEUEALIGN_REG","VIRTIO_QUEUEPFN_REG","VIRTIO_QUEUENOTIFY_REG","VIRTIO_INTERRUPTSTATUS_REG","VIRTIO_INTERRUPTACK_REG","VIRTIO_STATUS_REG","message.Debug","message.Abort","OnSuccess","OnError","onreadystatechange","req.onreadystatechange","arrayBuffer","marshall.Marshall","typelist","lengthoffset","UnicodeToUTF8Stream","utf8","marshall.Unmarshall","utf8converter","UTF8StreamToUnicode","Put","marshall.Unmarshall2","stream","ofs","this.Put","UTF8.UTF8Length"]
}
